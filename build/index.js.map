{"version":3,"file":"index.js","mappings":"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","sources":["webpack://nocs-obatala/./node_modules/@wordpress/icons/build-module/library/close-small.js","webpack://nocs-obatala/./node_modules/@wordpress/icons/build-module/library/edit.js","webpack://nocs-obatala/./node_modules/@wordpress/icons/build-module/library/pencil.js","webpack://nocs-obatala/./node_modules/@wordpress/icons/build-module/library/trash.js","webpack://nocs-obatala/./src/admin/App.js","webpack://nocs-obatala/./src/admin/api/apiRequests.js","webpack://nocs-obatala/./src/admin/components/ProcessManager.js","webpack://nocs-obatala/./src/admin/components/ProcessStepManager.js","webpack://nocs-obatala/./src/admin/components/ProcessTypeManager.js","webpack://nocs-obatala/./src/admin/components/ProcessTypeManager/ProcessStepForm.js","webpack://nocs-obatala/./src/admin/components/ProcessTypeManager/ProcessTypeForm.js","webpack://nocs-obatala/./src/admin/components/ProcessTypeManager/ProcessTypeList.js","webpack://nocs-obatala/./src/admin/components/ProcessViewer.js","webpack://nocs-obatala/./src/admin/redux/reducer.js","webpack://nocs-obatala/./node_modules/react-dom/client.js","webpack://nocs-obatala/external window \"React\"","webpack://nocs-obatala/external window \"ReactDOM\"","webpack://nocs-obatala/external window \"ReactJSXRuntime\"","webpack://nocs-obatala/external window [\"wp\",\"apiFetch\"]","webpack://nocs-obatala/external window [\"wp\",\"blockEditor\"]","webpack://nocs-obatala/external window [\"wp\",\"components\"]","webpack://nocs-obatala/external window [\"wp\",\"primitives\"]","webpack://nocs-obatala/webpack/bootstrap","webpack://nocs-obatala/webpack/runtime/compat get default export","webpack://nocs-obatala/webpack/runtime/define property getters","webpack://nocs-obatala/webpack/runtime/hasOwnProperty shorthand","webpack://nocs-obatala/webpack/runtime/make namespace object"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst closeSmall = /*#__PURE__*/_jsx(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\",\n  children: /*#__PURE__*/_jsx(Path, {\n    d: \"M12 13.06l3.712 3.713 1.061-1.06L13.061 12l3.712-3.712-1.06-1.06L12 10.938 8.288 7.227l-1.061 1.06L10.939 12l-3.712 3.712 1.06 1.061L12 13.061z\"\n  })\n});\nexport default closeSmall;\n//# sourceMappingURL=close-small.js.map","/**\n * Internal dependencies\n */\n\nimport { default as pencil } from './pencil';\nexport default pencil;\n//# sourceMappingURL=edit.js.map","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst pencil = /*#__PURE__*/_jsx(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\",\n  children: /*#__PURE__*/_jsx(Path, {\n    d: \"m19 7-3-3-8.5 8.5-1 4 4-1L19 7Zm-7 11.5H5V20h7v-1.5Z\"\n  })\n});\nexport default pencil;\n//# sourceMappingURL=pencil.js.map","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst trash = /*#__PURE__*/_jsx(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\",\n  children: /*#__PURE__*/_jsx(Path, {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M12 5.5A2.25 2.25 0 0 0 9.878 7h4.244A2.251 2.251 0 0 0 12 5.5ZM12 4a3.751 3.751 0 0 0-3.675 3H5v1.5h1.27l.818 8.997a2.75 2.75 0 0 0 2.739 2.501h4.347a2.75 2.75 0 0 0 2.738-2.5L17.73 8.5H19V7h-3.325A3.751 3.751 0 0 0 12 4Zm4.224 4.5H7.776l.806 8.861a1.25 1.25 0 0 0 1.245 1.137h4.347a1.25 1.25 0 0 0 1.245-1.137l.805-8.861Z\"\n  })\n});\nexport default trash;\n//# sourceMappingURL=trash.js.map","import { createRoot } from \"react-dom/client\";\nimport ProcessManager from \"./components/ProcessManager\";\nimport ProcessTypeManager from \"./components/ProcessTypeManager\";\nimport ProcessStepManager from './components/ProcessStepManager';\nimport ProcessViewer from './components/ProcessViewer';\n\n// Função para navegar para o ProcessViewer ao selecionar um processo\nconst navigateToProcessViewer = (processId) => {\n  window.location.href = `?page=process-viewer&process_id=${processId}`;\n};\n\n// Adiciona um evento listener para ser executado quando o conteúdo do DOM for completamente carregado\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Obtém os elementos do DOM pelos IDs\n  const processElement = document.getElementById(\"process-manager\");\n  const processTypeElement = document.getElementById(\"process-type-manager\");\n  const processStepElement = document.getElementById(\"process-step-manager\");\n  const processViewerElement = document.getElementById(\"process-viewer\");\n\n  // Verifica se o elemento com o ID 'process-manager' existe\n  // Se existir, renderiza o componente ProcessManager dentro deste elemento\n  if (processElement) {\n    createRoot(processElement).render(<ProcessManager onSelectProcess={navigateToProcessViewer} />);\n  }\n\n  // Verifica se o elemento com o ID 'process-type-manager' existe\n  // Se existir, renderiza o componente ProcessTypeManager dentro deste elemento\n  if (processTypeElement) {\n    createRoot(processTypeElement).render(<ProcessTypeManager />);\n  }\n\n  // Verifica se o elemento com o ID 'process-step-manager' existe\n  // Se existir, renderiza o componente ProcessStepManager dentro deste elemento\n  if (processStepElement) {\n    createRoot(processStepElement).render(<ProcessStepManager />);\n  }\n\n  // Verifica se o elemento com o ID 'process-viewer' existe\n  // Se existir, renderiza o componente ProcessViewer dentro deste elemento\n  if (processViewerElement) {\n    createRoot(processViewerElement).render(<ProcessViewer />);\n  }\n});\n","import apiFetch from '@wordpress/api-fetch';\n\nexport const fetchProcessTypes = async () => {\n    const data = await apiFetch({ path: `/obatala/v1/process_type?per_page=100&_embed` });\n    return data.sort((a, b) => a.title.rendered.localeCompare(b.title.rendered));\n};\n\nexport const fetchProcessSteps = async () => {\n    const data = await apiFetch({ path: `/obatala/v1/process_step?per_page=100&_embed` });\n    return data.sort((a, b) => a.title.rendered.localeCompare(b.title.rendered));\n};\n\nexport const saveProcessType = async (id, processType) => {\n    const path = id ? `/obatala/v1/process_type/${id}` : `/obatala/v1/process_type`;\n    const method = id ? 'PUT' : 'POST';\n    const data = await apiFetch({ path, method, data: processType });\n    return data;\n};\n\nexport const deleteProcessType = async (id) => {\n    await apiFetch({ path: `/obatala/v1/process_type/${id}`, method: 'DELETE' });\n};\n\nexport const updateProcessStep = async (id, processStep) => {\n    const data = await apiFetch({ path: `/obatala/v1/process_step/${id}`, method: 'PUT', data: processStep });\n    return data;\n};\n\nexport const checkLinkedProcesses = async (typeId) => {\n    const allProcesses = await apiFetch({ path: `/obatala/v1/process_obatala?per_page=100` });\n    return allProcesses.some(process => Number(process.process_type) === typeId);\n};\n","import { useState, useEffect } from 'react';\nimport { Spinner, Button, SelectControl, TextControl, Notice, Panel, PanelHeader, PanelRow } from '@wordpress/components';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst ProcessManager = ({ onSelectProcess }) => {\n    const [processTypes, setProcessTypes] = useState([]);\n    const [processes, setProcesses] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [newProcessTitle, setNewProcessTitle] = useState('');\n    const [newProcessType, setNewProcessType] = useState('');\n    const [selectedProcessId, setSelectedProcessId] = useState(null);\n\n    useEffect(() => {\n        fetchProcessTypes();\n        fetchProcesses();\n    }, []);\n\n    const fetchProcessTypes = () => {\n        apiFetch({ path: `/obatala/v1/process_type?per_page=100&_embed` })\n            .then(data => {\n                const sortedProcessType = data.sort((a, b) => a.title.rendered.localeCompare(b.title.rendered));\n                setProcessTypes(sortedProcessType);\n            })\n            .catch(error => {\n                console.error('Error fetching process types:', error);\n            });\n    };\n\n    const fetchProcesses = () => {\n        setIsLoading(true);\n        apiFetch({ path: `/obatala/v1/process_obatala?per_page=100&_embed` })\n            .then(data => {\n                console.log('Fetched processes:', data); // Adiciona log para verificar os dados\n                setProcesses(data);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching processes:', error);\n                setIsLoading(false);\n            });\n    };\n\n    const handleCreateProcess = () => {\n        if (!newProcessTitle || !newProcessType) {\n            alert('Please provide a title and select a process type.');\n            return;\n        }\n\n        const newProcess = {\n            title: newProcessTitle,\n            status: 'publish',\n            type: 'process_obatala',\n            process_type: newProcessType,\n            current_stage: null,\n        };\n\n        apiFetch({ path: `/obatala/v1/process_obatala`, method: 'POST', data: newProcess })\n            .then(savedProcess => {\n                setProcesses([...processes, savedProcess]);\n                setNewProcessTitle('');\n                setNewProcessType('');\n            })\n            .catch(error => {\n                console.error('Error creating process:', error);\n            });\n    };\n\n    const handleSelectProcess = (processId) => {\n        setSelectedProcessId(processId);\n        onSelectProcess(processId);\n    };\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    return (\n        <div>\n            <span className=\"brand\"><strong>Obatala</strong> Curatorial Process Management</span>\n            <h2>Process Manager</h2>\n            <div className=\"panel-container\">\n                <main>\n                    <Panel>\n                        <PanelHeader>Existing Processes</PanelHeader>\n                        <PanelRow>\n                            {processes.length > 0 ? (\n                                <table className=\"wp-list-table widefat fixed striped\">\n                                    <thead>\n                                        <tr>\n                                            <th>Process Title</th>\n                                            <th>Process Type</th>\n                                            <th>Status</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {processes.map(process => {\n                                            const processTypeFiltered = processTypes.find(processType => {\n                                                return processType.id == process.process_type;\n                                            });\n                                            return (\n                                                <tr key={process.id}>\n                                                    <td>{process.title.rendered}</td>\n                                                    <td>{processTypeFiltered ? processTypeFiltered.title.rendered : 'Unknown'}</td>\n                                                    <td><span className=\"badge success\">{process.status}</span></td>\n                                                    <td>\n                                                        <Button isSecondary onClick={() => handleSelectProcess(process.id)}>\n                                                            View\n                                                        </Button>\n                                                    </td>\n                                                </tr>\n                                            );\n                                        })}\n                                    </tbody>\n                                </table>\n                            ) : (\n                                <Notice isDismissible={false} status=\"warning\">No existing processes.</Notice>\n                            )}\n                        </PanelRow>\n                    </Panel>\n                </main>\n                <aside>\n                    <Panel>\n                        <PanelHeader>Create Process</PanelHeader>\n                        <PanelRow>\n                            <TextControl\n                                label=\"Process Title\"\n                                value={newProcessTitle}\n                                onChange={(value) => setNewProcessTitle(value)}\n                            />\n                            <SelectControl\n                                label=\"Process Type\"\n                                value={newProcessType}\n                                options={[\n                                    { label: 'Select a process type...', value: '' },\n                                    ...processTypes.map(type => ({ label: type.title.rendered, value: type.id }))\n                                ]}\n                                onChange={(value) => setNewProcessType(value)}\n                            />\n                            <Button isPrimary onClick={handleCreateProcess}>Create Process</Button>\n                        </PanelRow>\n                    </Panel>\n                </aside>\n            </div>\n            {selectedProcessId && (\n                <div>\n                    {/* Render your ProcessViewer component or call onSelectProcess with selectedProcessId */}\n                    {onSelectProcess(selectedProcessId)}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ProcessManager;\n","import React, { useState, useEffect, useReducer} from 'react';\nimport { Spinner, Button, SelectControl, TextControl, Notice, Panel, PanelHeader, PanelBody, PanelRow, Icon, Modal, DatePicker, RadioControl, __experimentalConfirmDialog as ConfirmDialog } from '@wordpress/components';\nimport apiFetch from '@wordpress/api-fetch';\nimport { edit, trash } from \"@wordpress/icons\";\nimport { MediaUpload, MediaUploadCheck } from '@wordpress/block-editor';\nimport Reducer, { initialState } from '../redux/reducer'; \n\nconst ProcessStepManager = () => {\n    // Estado para armazenar os passos de processo\n    const [processSteps, setProcessSteps] = useState([]);\n\n    const [editingStep, setEditingStep] = useState(null);\n    const [notice, setNotice] = useState(null);\n    const [state, dispatch] = useReducer(Reducer, initialState);\n\n    // Estado para armazenar os tipos de processo\n    const [processTypes, setProcessTypes] = useState([]);\n    // Estado para armazenar o título do novo passo de processo\n    const [newStepTitle, setNewStepTitle] = useState('');\n    // Estado para armazenar o tipo do novo passo de processo\n    const [newStepType, setNewStepType] = useState('');\n    // Estado para armazenar os campos dinâmicos para os metadados\n    const [dynamicFields, setDynamicFields] = useState([{ name: '', type: 'text', value: '' }]);\n    // Estado para controlar o carregamento\n    const [isLoading, setIsLoading] = useState(true);\n    // Estado para o índice do campo dinâmico atualmente em modo de edição\n    const [editableFieldIndex, setEditableFieldIndex] = useState(-1);\n\n    // Carrega os passos de processo e tipos de processo ao inicializar\n    useEffect(() => {\n        fetchProcessSteps();\n    }, []);\n\n    // Função para buscar os passos de processo da API WordPress\n    const fetchProcessSteps = () => {\n        setIsLoading(true);\n        apiFetch({ path: `/obatala/v1/process_step?per_page=100&_embed` })\n            .then(data => {\n                const sortedSteps = data.sort((a, b) => a.title.rendered.localeCompare(b.title.rendered));\n                setProcessSteps(sortedSteps);;\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process steps:', error);\n                setIsLoading(false);\n            });\n    };\n\n    // Função para criar um novo passo de processo\n    const handleSaveStep = () => {\n        if (!newStepTitle) {\n            setNotice({ status: 'error', message: 'Step Title field cannot be empty.' });\n            return;\n        }\n\n        const requestData = {\n            title: newStepTitle,\n            status: 'publish',\n            type: 'process_step',\n        };\n\n        if (editingStep) {\n            apiFetch({ path: `/obatala/v1/process_step/${editingStep}`, method: 'PUT', data: requestData })\n                .then(updatedStep => {\n                    const updatedProcessSteps = processSteps.map(step =>\n                        step.id === editingStep ? updatedStep : step\n                    );\n                    setProcessSteps(updatedProcessSteps);\n                    setEditingStep(null);\n                    setNewStepTitle('');\n                    setNotice(null);\n\n                    const stepId = savedStep.id;\n                    const metaData = dynamicFields.map(field => ({\n                        key: field.name,\n                        value: getDefaultFieldValue(field.type) // Define o valor padrão conforme o tipo\n                    }));\n        \n                    // Salva os metadados do novo passo\n                    saveMetadata(stepId, metaData)\n                        .then(() => {\n                            // Atualiza a lista de passos de processo após salvar com sucesso\n                            fetchProcessSteps();\n                            // Limpa os campos de entrada após salvar\n                            setNewStepTitle('');\n                            setNewStepType('');\n                            setDynamicFields([{ name: '', type: 'text', value: '' }]);\n                        })\n                        .catch(error => {\n                            console.error('Error saving metadata:', error);\n                        });\n                })\n                .catch(error => {\n                    console.error('Error updating process step:', error);\n                });\n        } else {\n            apiFetch({ path: `/obatala/v1/process_step`, method: 'POST', data: requestData })\n                .then(savedStep => {\n                    setProcessSteps([...processSteps, savedStep]);\n                    setNewStepTitle('');\n\n                    const stepId = savedStep.id;\n                    const metaData = dynamicFields.map(field => ({\n                        key: field.name,\n                        value: getDefaultFieldValue(field.type) // Define o valor padrão conforme o tipo\n                    }));\n\n                    // Salva os metadados do novo passo\n                    saveMetadata(stepId, metaData)\n                    .then(() => {\n                        // Atualiza a lista de passos de processo após salvar com sucesso\n                        fetchProcessSteps();\n                        // Limpa os campos de entrada após salvar\n                        setNewStepTitle('');\n                        setNewStepType('');\n                        setDynamicFields([{ name: '', type: 'text', value: '' }]);\n                    })\n                    .catch(error => {\n                        console.error('Error saving metadata:', error);\n                    });\n                })\n                .catch(error => {\n                    console.error('Error creating process step:', error);\n                });\n        }\n    };\n\n    const handleEditStep = (stepId, currentTitle) => {\n        setEditingStep(stepId);\n        setNewStepTitle(currentTitle);\n    };\n\n    const handleDeleteProcessStep = async (id) => {\n        try {\n          const step = await apiFetch({ path: `/obatala/v1/process_step/${id}` });\n          const stepProcessTypes = Array.isArray(step.process_type) ? step.process_type : [step.process_type];\n      \n        \n          const hasLinkedProcesses = await apiFetch({ path: '/obatala/v1/process_obatala?per_page=100' })\n            .then(allProcesses => allProcesses.some(process => stepProcessTypes.includes(Number(process.process_type))));\n      \n          if (hasLinkedProcesses) {\n            setNotice({ status: 'error', message: 'Cannot delete step as it is linked to a process type in use.' });\n            return;\n          }\n      \n          await apiFetch({ path: `/obatala/v1/process_step/${id}`, method: 'DELETE' });\n          setProcessSteps(processSteps.filter(step => step.id !== id));\n        } catch (error) {\n          console.error('Error deleting process step:', error);\n        }\n      };\n      \n    \n    const handleConfirmDeleteStep = (id) => {\n        dispatch({ type: 'OPEN_MODAL_STEP', payload: id });\n    };\n\n    const handleCancel = () => {\n        setEditingStep(null);\n        setNewStepTitle('');\n        setNotice(null);\n        dispatch({ type: 'CLOSE_MODAL' });\n    };\n\n    // Função para salvar metadados do passo de processo\n    const saveMetadata = (stepId, metaData) => {\n        return new Promise((resolve, reject) => {\n            apiFetch({\n                path: `/wp-admin/admin-ajax.php`,\n                method: 'POST',\n                data: {\n                    action: 'save_metadata',\n                    step_id: stepId,\n                    meta_data: metaData\n                }\n            })\n            .then(response => {\n                if (response.success) {\n                    resolve();\n                } else {\n                    reject('Error saving metadata:', response.data);\n                }\n            })\n            .catch(error => {\n                reject('Error saving metadata:', error);\n            });\n        });\n    };\n\n    // Função para lidar com a mudança de campo dinâmico\n    const handleDynamicFieldChange = (index, field, value) => {\n        const updatedFields = [...dynamicFields];\n        updatedFields[index][field] = value;\n        setDynamicFields(updatedFields);\n    };\n\n    // Função para adicionar um novo campo dinâmico\n    const handleAddField = () => {\n        setDynamicFields([...dynamicFields, { name: '', type: 'text', value: '' }]);\n    };\n\n    // Função para remover um campo dinâmico\n    const handleRemoveField = (index) => {\n        const updatedFields = dynamicFields.filter((_, idx) => idx !== index);\n        setDynamicFields(updatedFields);\n    };\n\n    // Função para obter o valor padrão conforme o tipo do campo\n    const getDefaultFieldValue = (type) => {\n        switch (type) {\n            case 'text':\n            case 'textfield':\n            case 'number':\n                return '';\n            case 'datepicker':\n                return null; // Exemplo de valor padrão para datepicker\n            case 'upload':\n                return ''; // Exemplo de valor padrão para upload\n            case 'select':\n                return ''; // Exemplo de valor padrão para select\n            case 'radio':\n                return ''; // Exemplo de valor padrão para radio\n            default:\n                return '';\n        }\n    };\n\n    // Função para iniciar a edição do nome do campo dinâmico\n    const startEditFieldName = (index) => {\n        setEditableFieldIndex(index);\n    };\n\n    // Função para finalizar a edição do nome do campo dinâmico\n    const finishEditFieldName = (index, newName) => {\n        const updatedFields = [...dynamicFields];\n        updatedFields[index].name = newName;\n        setDynamicFields(updatedFields);\n        setEditableFieldIndex(-1);\n    };\n\n    // Renderiza um spinner enquanto os dados estão sendo carregados\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    return (\n        <div>\n            {/* Título e cabeçalho da página */}\n            <span className=\"brand\"><strong>Obatala</strong> Curatorial Process Management</span>\n            <h2>Step Manager</h2>\n            <div className=\"panel-container\">\n                <main>\n                     {/* Painel com os passos de processo existentes */}\n                     <ConfirmDialog\n                        isOpen={ state.isOpen }\n                        onConfirm={() => {\n                            handleDeleteProcessStep(state.deleteStep);\n                            dispatch({ type: 'CLOSE_MODAL' });\n                        }}\n                        onCancel={handleCancel}\n                    >   \n                        Are you sure you want to delete this {state.deleteProcessType ? 'Process Type' : 'Step' }?\n\n                    </ConfirmDialog>\n                    <Panel>\n                        <PanelHeader>Existing Steps</PanelHeader>\n                        <PanelRow>\n                            {/* Lista os passos de processo existentes */}\n                            {processSteps.length > 0 ? (\n                                <table className=\"wp-list-table widefat fixed striped\">\n                                    <thead>\n                                        <tr>\n                                            <th>Step Title</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {processSteps.map(step => (\n                                            <tr key={step.id}>\n                                                <td>{step.title.rendered}</td>\n                                                <td>\n                                                    <Button\n                                                        icon={<Icon icon={edit} />}\n                                                        onClick={() => handleEditStep(step.id, step.title.rendered)}\n                                                    />\n                                                    <Button\n                                                        icon={<Icon icon={trash} />}\n                                                        onClick={() => handleConfirmDeleteStep(step.id)}\n                                                    />\n                                                </td>\n                                            </tr>\n                                        ))}    \n                                    </tbody>\n                                </table>\n                            ) : (\n                                // Aviso se não houver passos de processo existentes\n                                <Notice isDismissible={false} status=\"warning\">No existing process steps.</Notice>\n                            )}\n                        </PanelRow>\n                    </Panel>\n                </main>\n                <aside>\n                     {/* Painel para criar um novo passo de processo */}\n                    <Panel>\n                        <PanelHeader>Add Step</PanelHeader>\n                        <PanelBody title=\"Main data\">\n                            <PanelRow>\n                                {/* Formulário para inserir título e tipo de processo do novo passo */}\n                                {notice && !editingStep && (\n                                    <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                                        {notice.message}\n                                    </Notice>\n                                )}\n                                <TextControl\n                                    label=\"Step Title\"\n                                    value={newStepTitle}\n                                    onChange={(value) => setNewStepTitle(value)}\n                                />\n                                <Button isPrimary onClick={handleSaveStep}>\n                                    Add Step\n                                </Button>\n                            </PanelRow>\n                        </PanelBody>\n                        <PanelBody title=\"Metadata\" className=\"counter-container\">\n                            {/* Renderiza os campos dinâmicos para os metadados */}\n                            {dynamicFields.map((field, index) => (\n                                <PanelRow key={index} className=\"counter-item\">\n                                    <Button icon={<Icon icon={trash} />} isDestructive onClick={() => handleRemoveField(index)} />\n                                    <TextControl\n                                        label=\"Title\"\n                                        value={field.name || `Metadata Name ${index + 1}`}\n                                        onChange={(e) => handleDynamicFieldChange(index, 'name', e.target.value)}\n                                        onBlur={() => finishEditFieldName(index, dynamicFields[index].name)}\n                                        autoFocus\n                                    />\n                                    <SelectControl\n                                        label=\"Type\"\n                                        value={field.type}\n                                        options={[\n                                            { label: 'Text', value: 'text' },\n                                            { label: 'Date Picker', value: 'datepicker' },\n                                            { label: 'Upload', value: 'upload' },\n                                            { label: 'Number', value: 'number' },\n                                            { label: 'Text Field', value: 'textfield' },\n                                            { label: 'Select', value: 'select' },\n                                            { label: 'Radio', value: 'radio' },\n                                        ]}\n                                        onChange={(value) => handleDynamicFieldChange(index, 'type', value)}\n                                    />\n                                </PanelRow>\n                                \n                            ))}\n                            <PanelRow>\n                                <Button isSecondary onClick={handleAddField}>Add Metadata</Button>\n                            </PanelRow>\n                        </PanelBody>\n\n                        <PanelRow>\n                            <Button isPrimary onClick={handleSaveStep}>Add Step</Button>\n                        </PanelRow>\n                    </Panel>\n                </aside>\n            </div>\n            {editingStep && (\n                <Modal\n                    title=\"Edit Process Step\"\n                    onRequestClose={handleCancel}\n                    isDismissible={true}\n                >\n                    {notice && editingStep && (\n                        <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                            {notice.message}\n                        </Notice>\n                    )}\n                    <TextControl\n                        label=\"Step Title\"\n                        value={newStepTitle}\n                        onChange={(value) => setNewStepTitle(value)}\n                    />\n                    <Button isPrimary onClick={handleSaveStep}>\n                        Save\n                    </Button>\n                    <Button onClick={handleCancel}>\n                        Cancel\n                    </Button>\n                </Modal>\n            )}\n        </div>\n    );\n};\n\nexport default ProcessStepManager;\n","import { useState, useEffect, useReducer } from 'react';\nimport {\n    Panel,\n    PanelHeader,\n    Spinner,\n    Notice,\n    __experimentalConfirmDialog as ConfirmDialog\n} from '@wordpress/components';\nimport {\n    fetchProcessTypes,\n    fetchProcessSteps,\n    saveProcessType,\n    deleteProcessType,\n    updateProcessStep,\n    checkLinkedProcesses\n} from '../api/apiRequests'; // Supondo que as funções de API estejam neste arquivo\nimport ProcessTypeForm from './ProcessTypeManager/ProcessTypeForm';\nimport ProcessTypeList from './ProcessTypeManager/ProcessTypeList';\nimport ProcessStepForm from './ProcessTypeManager/ProcessStepForm';\nimport Reducer, { initialState } from '../redux/reducer';\n\nconst ProcessTypeManager = () => {\n    const [processTypes, setProcessTypes] = useState([]);\n    const [processSteps, setProcessSteps] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [editingProcessType, setEditingProcessType] = useState(null);\n    const [state, dispatch] = useReducer(Reducer, initialState);\n    const [notice, setNotice] = useState(null);\n\n    useEffect(() => {\n        loadProcessTypes();\n        loadProcessSteps();\n    }, []);\n\n    const loadProcessTypes = async () => {\n        setIsLoading(true);\n        try {\n            const data = await fetchProcessTypes();\n            setProcessTypes(data);\n        } catch (error) {\n            setNotice({ status: 'error', message: 'Error fetching process types.' });\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const loadProcessSteps = async () => {\n        try {\n            const data = await fetchProcessSteps();\n            setProcessSteps(data);\n        } catch (error) {\n            setNotice({ status: 'error', message: 'Error fetching process steps.' });\n        }\n    };\n\n    const handleSaveProcessType = async (processType) => {\n        try {\n            if (editingProcessType) {\n                const updatedProcessType = await saveProcessType(editingProcessType.id, processType);\n                setProcessTypes((prevProcessTypes) =>\n                    prevProcessTypes.map((type) => (type.id === updatedProcessType.id ? updatedProcessType : type))\n                );\n                setEditingProcessType(null);\n            } else {\n                await saveProcessType(null, processType);\n                loadProcessTypes();\n            }\n        } catch (error) {\n            setNotice({ status: 'error', message: 'Error saving process type.' });\n        }\n    };\n\n    const handleDeleteProcessType = async (id) => {\n        try {\n            await deleteProcessType(id);\n            setProcessTypes((prevProcessTypes) => prevProcessTypes.filter((type) => type.id !== id));\n        } catch (error) {\n            setNotice({ status: 'error', message: 'Error deleting process type.' });\n        }\n    };\n\n    const handleEditProcessType = (processType) => {\n        setEditingProcessType(processType);\n    };\n\n    const handleAddProcessStep = async (steps) => {\n        try {\n            for (const step of steps) {\n                const { id, process_type } = step;\n                const existingStep = processSteps.find((existing) => existing.id === id);\n                if (!existingStep) {\n                    setNotice({ status: 'error', message: `Step not found: ${id}` });\n                    continue;\n                }\n\n                const currentProcessTypes = Array.isArray(existingStep.process_type)\n                    ? existingStep.process_type.map(Number)\n                    : [];\n                const newProcessType = Number(process_type);\n\n                if (currentProcessTypes.includes(newProcessType)) {\n                    setNotice({ status: 'error', message: 'Step is already linked to this Process Type.' });\n                    continue;\n                }\n\n                const updatedProcessTypes = [...currentProcessTypes, newProcessType];\n                await updateProcessStep(id, { process_type: updatedProcessTypes });\n                setProcessSteps((prevProcessSteps) =>\n                    prevProcessSteps.map((s) => (s.id === id ? { ...s, process_type: updatedProcessTypes } : s))\n                );\n            }\n        } catch (error) {\n            setNotice({ status: 'error', message: 'Error updating process step.' });\n        }\n    };\n\n    const handleUpdatedProcessStep = async () => {\n        const { stepId, typeId } = state.deleteStep;\n        try {\n            const existingStep = processSteps.find((step) => step.id === stepId);\n            if (!existingStep) {\n                setNotice({ status: 'error', message: `Step not found: ${stepId}` });\n                return;\n            }\n\n            const hasLinkedProcesses = await checkLinkedProcesses(typeId);\n            if (hasLinkedProcesses) {\n                setNotice({ status: 'error', message: 'Cannot delete step as it is linked to a process type in use.' });\n                return;\n            }\n\n            const stepProcessTypes = Array.isArray(existingStep.process_type)\n                ? existingStep.process_type.map(Number)\n                : [];\n            const updatedProcessTypes = stepProcessTypes.filter((id) => id !== typeId);\n\n            await updateProcessStep(stepId, { process_type: updatedProcessTypes });\n            setProcessSteps((prevProcessSteps) =>\n                prevProcessSteps.map((step) => (step.id === stepId ? { ...step, process_type: updatedProcessTypes } : step))\n            );\n        } catch (error) {\n            setNotice({ status: 'error', message: 'Error updating process step.' });\n        }\n    };\n\n    const handleConfirmDeleteType = (id) => {\n        dispatch({ type: 'OPEN_MODAL_PROCESS_TYPE', payload: id });\n    };\n\n    const handleConfirmDeleteStep = (stepId, typeId) => {\n        dispatch({ type: 'OPEN_MODAL_STEP', payload: { stepId, typeId } });\n    };\n\n    const handleCancel = () => {\n        dispatch({ type: 'CLOSE_MODAL' });\n    };\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    return (\n        <div>\n            <span className=\"brand\"><strong>Obatala</strong> Curatorial Process Management</span>\n            <h2>Process Type Manager</h2>\n            <div className=\"panel-container\">\n                <main>\n                    <ConfirmDialog\n                        isOpen={state.isOpen}\n                        onConfirm={() => {\n                            if (state.deleteProcessType) {\n                                handleDeleteProcessType(state.deleteProcessType);\n                            } else if (state.deleteStep) {\n                                handleUpdatedProcessStep();\n                            }\n                            dispatch({ type: 'CLOSE_MODAL' });\n                        }}\n                        onCancel={handleCancel}\n                    >\n                        Are you sure you want to delete this {state.deleteProcessType ? 'Process Type' : 'Step'}?\n                    </ConfirmDialog>\n                    <ProcessTypeList\n                        processTypes={processTypes}\n                        processSteps={processSteps}\n                        onEdit={handleEditProcessType}\n                        onDelete={handleConfirmDeleteType}\n                        onDeleteStep={handleConfirmDeleteStep}\n                    />\n                </main>\n                <aside>\n                    <Panel>\n                        <PanelHeader>Managing process types</PanelHeader>\n                        <ProcessTypeForm\n                            onSave={handleSaveProcessType}\n                            onCancel={() => setEditingProcessType(null)}\n                            editingProcessType={editingProcessType}\n                        />\n                        {notice && (\n                            <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                                {notice.message}\n                            </Notice>\n                        )}\n                        <ProcessStepForm\n                            processTypes={processTypes}\n                            processSteps={processSteps}\n                            onAddStep={handleAddProcessStep}\n                        />\n                    </Panel>\n                </aside>\n            </div>\n        </div>\n    );\n};\n\nexport default ProcessTypeManager;\n","import { useState } from 'react';\nimport { Button, ComboboxControl, SelectControl, PanelBody, PanelRow, Notice, Icon } from '@wordpress/components';\nimport { closeSmall } from '@wordpress/icons';\n\nconst ProcessStepForm = ({ processTypes, processSteps, onAddStep }) => {\n    const [selectedProcessType, setSelectedProcessType] = useState('');\n    const [selectedSteps, setSelectedSteps] = useState([]);\n    const [stepInputValue, setStepInputValue] = useState('');\n    const [notice, setNotice] = useState(null);\n\n    const handleAddStep = () => {\n        if (!selectedProcessType || selectedSteps.length === 0) {\n            setNotice({ status: 'error', message: 'Please select both a process type and at least one step.' });\n            return;\n        }\n\n        const stepsToAdd = selectedSteps.map(stepId => {\n            const step = processSteps.find(step => step.id === stepId);\n            return {\n                id: step.id,\n                title: step.title.rendered,\n                status: 'publish',\n                process_type: selectedProcessType,\n            };\n        });\n\n        onAddStep(stepsToAdd);\n        setSelectedSteps([]);\n        setNotice({ status: 'success', message: 'Steps added successfully.' });\n    };\n\n    const handleChange = (value) => {\n        if (value && !selectedSteps.includes(value)) {\n            setSelectedSteps([...selectedSteps, value]);\n            setStepInputValue('');\n        }\n    };\n\n    const handleRemoveStep = (stepId) => {\n        setSelectedSteps(selectedSteps.filter(step => step !== stepId));\n    };\n\n    return (\n        <PanelBody title=\"Add a Process Type Step\" initialOpen={true}>\n            <PanelRow>\n                {notice && (\n                    <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                        {notice.message}\n                    </Notice>\n                )}\n                <SelectControl\n                    label=\"Select Process Type\"\n                    value={selectedProcessType}\n                    options={[\n                        { label: 'Select a process type...', value: '' },\n                        ...processTypes.map(type => ({ label: type.title.rendered, value: type.id }))\n                    ]}\n                    onChange={(value) => setSelectedProcessType(value)}\n                />\n                <ComboboxControl\n                    label=\"Select one or more Steps\"\n                    value={stepInputValue}\n                    options={processSteps\n                        .filter(step => !selectedSteps.includes(step.id))\n                        .map(step => ({ label: step.title.rendered, value: step.id }))}\n                    onChange={handleChange}\n                    onInputChange={setStepInputValue}\n                />\n                <div className=\"selected-steps\">\n                    {selectedSteps.map((stepId) => {\n                        const step = processSteps.find(step => step.id === stepId);\n                        return (\n                            <div key={stepId} className=\"selected-step\">\n                                {step.title.rendered}\n                                <Button\n                                    icon={closeSmall}\n                                    onClick={() => handleRemoveStep(stepId)}\n                                    className=\"remove-step-button\"\n                                />\n                            </div>\n                        );\n                    })}\n                </div>\n                <Button isSecondary onClick={handleAddStep}>\n                    Add Process Step\n                </Button>\n            </PanelRow>\n        </PanelBody>\n    );\n};\n\nexport default ProcessStepForm;\n","import { useState, useEffect } from 'react';\nimport { Button, TextControl, TextareaControl, CheckboxControl, PanelBody, PanelRow, Notice } from '@wordpress/components';\n\nconst ProcessTypeForm = ({ onSave, onCancel, editingProcessType }) => {\n    const [processTypeName, setProcessTypeName] = useState('');\n    const [processTypeDescription, setProcessTypeDescription] = useState('');\n    const [acceptAttachments, setAcceptAttachments] = useState(false);\n    const [acceptTainacanItems, setAcceptTainacanItems] = useState(false);\n    const [generateTainacanItems, setGenerateTainacanItems] = useState(false);\n    const [notice, setNotice] = useState(null);\n\n    useEffect(() => {\n        if (editingProcessType) {\n            setProcessTypeName(editingProcessType.title.rendered);\n            setProcessTypeDescription(editingProcessType.description || '');\n            setAcceptAttachments(editingProcessType.accept_attachments ?? false);\n            setAcceptTainacanItems(editingProcessType.accept_tainacan_items ?? false);\n            setGenerateTainacanItems(editingProcessType.generate_tainacan_items ?? false);\n        }\n    }, [editingProcessType]);\n\n    const handleSave = () => {\n        if (!processTypeName || !processTypeDescription) {\n            setNotice({ status: 'error', message: 'Field Name and Description cannot be empty.' });\n            return;\n        }\n\n        const processType = {\n            status: 'publish',\n            title: processTypeName,\n            description: processTypeDescription,\n            accept_attachments: acceptAttachments,\n            accept_tainacan_items: acceptTainacanItems,\n            generate_tainacan_items: generateTainacanItems,\n        };\n\n        console.log('Saving process type:', processType); // Log para verificar os dados\n        onSave(processType);\n\n        if (!editingProcessType) {\n            handleResetForm();\n        }\n    };\n\n    const handleResetForm = () => {\n        setProcessTypeName('');\n        setProcessTypeDescription('');\n        setAcceptAttachments(false);\n        setAcceptTainacanItems(false);\n        setGenerateTainacanItems(false);\n    }\n\n    const handleCancel = () => {\n        onCancel();\n        setProcessTypeName('');\n        setProcessTypeDescription('');\n        setAcceptAttachments(false);\n        setAcceptTainacanItems(false);\n        setGenerateTainacanItems(false);\n    };\n\n    return (\n        <PanelBody title=\"Add Process Type\" initialOpen={ true }>\n            <PanelRow>\n                {notice && (\n                <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                    {notice.message}\n                </Notice>\n                )}\n                <TextControl\n                    label=\"Process Type Name\"\n                    value={processTypeName}\n                    onChange={(value) => setProcessTypeName(value)}\n                />\n                <TextareaControl\n                    label=\"Process Type Description\"\n                    value={processTypeDescription}\n                    onChange={(value) => setProcessTypeDescription(value)}\n                />\n                <CheckboxControl\n                    label=\"Accept Attachments\"\n                    checked={acceptAttachments}\n                    onChange={(value) => setAcceptAttachments(value)}\n                />\n                <CheckboxControl\n                    label=\"Accept Tainacan Items\"\n                    checked={acceptTainacanItems}\n                    onChange={(value) => setAcceptTainacanItems(value)}\n                />\n                <CheckboxControl\n                    label=\"Generate Tainacan Items\"\n                    checked={generateTainacanItems}\n                    onChange={(value) => setGenerateTainacanItems(value)}\n                />\n                {editingProcessType ? (\n                    <>\n                        <Button isPrimary onClick={handleSave}>\n                            Update Process Type\n                        </Button>\n                        <Button onClick={handleCancel}>\n                            Cancel\n                        </Button>\n                    </>\n                ) : (\n                    <Button isPrimary onClick={handleSave}>\n                        Add Process Type\n                    </Button>\n                )}\n            </PanelRow>\n        </PanelBody>\n    );\n};\n\nexport default ProcessTypeForm;\n","import { useEffect, useState } from 'react';\nimport { Button, Icon, Tooltip, Card, CardBody, CardHeader, CardFooter, Notice, Panel, PanelHeader, PanelRow, Draggable } from \"@wordpress/components\";\nimport { edit, trash } from \"@wordpress/icons\";\nimport apiFetch from '@wordpress/api-fetch';\n\nconst ProcessTypeList = ({\n  processTypes,\n  processSteps,\n  onEdit,\n  onDelete,\n  onDeleteStep,\n}) => {\n  const [stepsState, setStepsState] = useState({});\n\n  useEffect(() => {\n    const initialStepsState = processTypes.reduce((acc, type) => {\n      acc[type.id] = processSteps\n        .filter((step) => {\n          const stepTypes = Array.isArray(step.process_type) ? step.process_type : [step.process_type];\n          return stepTypes.includes(type.id);\n        })\n        .sort((a, b) => (a.step_order[type.id] || 0) - (b.step_order[type.id] || 0));\n      return acc;\n    }, {});\n    console.log('initialStepsState:', initialStepsState);\n    setStepsState(initialStepsState);\n  }, [processTypes, processSteps]);\n\n  const handleDragStart = (event, typeId, stepId) => {\n    event.dataTransfer.setData('typeId', typeId.toString());\n    event.dataTransfer.setData('stepId', stepId.toString());\n  };\n\n  const handleDrop = async (event, dropIndex, typeId) => {\n    event.preventDefault();\n    const draggedTypeId = event.dataTransfer.getData('typeId');\n    const draggedStepId = event.dataTransfer.getData('stepId');\n\n    if (!stepsState[draggedTypeId]) {\n        console.error(`Steps for typeId ${draggedTypeId} not found.`);\n        return;\n    }\n\n    const updatedSteps = [...stepsState[draggedTypeId]];\n    const draggedStepIndex = updatedSteps.findIndex(step => step.id === parseInt(draggedStepId, 10));\n    const [draggedStep] = updatedSteps.splice(draggedStepIndex, 1);\n    updatedSteps.splice(dropIndex, 0, draggedStep);\n\n    setStepsState(prevState => ({\n        ...prevState,\n        [draggedTypeId]: updatedSteps,\n    }));\n\n    try {\n        // Atualize a nova ordem no banco de dados\n        await Promise.all(updatedSteps.map((step, index) => {\n            const stepOrder = { ...step.step_order, [typeId]: index };\n            return apiFetch({\n                path: `/obatala/v1/process_step/${step.id}`,\n                method: 'PUT',\n                data: { step_order: stepOrder },\n            });\n        }));\n        console.log('Ordem das etapas atualizada no banco de dados');\n    } catch (error) {\n        console.error('Erro ao salvar a ordem das etapas:', error);\n    }\n};\n\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n  };\n\n\nreturn (\n    <Panel>\n      <PanelHeader>Existing Process Types</PanelHeader>\n      <PanelRow>\n        {processTypes.length > 0 ? (\n          <div className=\"card-container\">\n            {processTypes.map((type) => {\n              const steps = stepsState[type.id] || [];\n\n              return (\n                <Card key={type.id}>\n                  <CardHeader>\n                    <h4 className=\"card-title\">{type.title.rendered}</h4>\n                  </CardHeader>\n                  <CardBody>\n                    <dl className=\"description-list\">\n                      <div className=\"list-item\">\n                        <dt>Description:</dt>\n                        <dd>\n                          {type.description ? type.description.split('\\n').map((item, key) => (\n                            <span key={key}>{item}<br /></span>\n                          )) : \"-\"}\n                        </dd>\n                      </div>\n                    </dl>\n\n                    <p className={type.accept_attachments ? \"check true\" : \"check false\"}>\n                      {!type.accept_attachments && (\n                        <span className=\"visually-hidden\">Not</span>\n                      )}{\" \"}\n                      Accept attachments\n                    </p>\n                    <p className={type.accept_tainacan_items ? \"check true\" : \"check false\"}>\n                      {!type.accept_tainacan_items && (\n                        <span className=\"visually-hidden\">Not</span>\n                      )}{\" \"}\n                      Accept Tainacan items\n                    </p>\n                    <p className={type.generate_tainacan_items ? \"check true\" : \"check false\"}>\n                      {!type.generate_tainacan_items && (\n                        <span className=\"visually-hidden\">Not</span>\n                      )}{\" \"}\n                      Generate Tainacan items\n                    </p>\n\n                    {steps.length > 0 && (\n                      <>\n                        <hr />\n                        <h5>Steps</h5>\n                        <ol className=\"list-group\">\n                          {steps.map((step, index) => (\n                            <li\n                              key={`${step.id}-${index}`}\n                              className=\"list-group-item\"\n                              id={`step-${step.id}-${index}`}\n                              draggable=\"true\"\n                              onDragOver={handleDragOver}\n                              onDrop={(event) => handleDrop(event, index, type.id)}\n                              onDragStart={(event) => handleDragStart(event, type.id, step.id)}\n                            >\n                              {step.title.rendered}\n                              <Tooltip text=\"Delete Step\">\n                                <Button\n                                  isDestructive\n                                  icon={<Icon icon={trash} />}\n                                  onClick={() => onDeleteStep(step.id, type.id)}\n                                />\n                              </Tooltip>\n                            </li>\n                          ))}\n                        </ol>\n                      </>\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    <Tooltip text=\"Edit\">\n                      <Button\n                        icon={<Icon icon={edit} />}\n                        onClick={() => onEdit(type)}\n                      />\n                    </Tooltip>\n                    <Tooltip text=\"Delete\">\n                      <Button\n                        icon={<Icon icon={trash} />}\n                        onClick={() => onDelete(type.id)}\n                      />\n                    </Tooltip>\n                  </CardFooter>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <Notice isDismissible={false} status=\"warning\">No existing process types.</Notice>\n        )}\n      </PanelRow>\n    </Panel>\n  );\n  \n};\n\nexport default ProcessTypeList;\n","import { useState, useEffect } from 'react';\nimport { Spinner, Notice, Panel, PanelHeader, PanelBody, PanelRow } from '@wordpress/components';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst ProcessViewer = () => {\n    const [process, setProcess] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [processTypes, setProcessTypes] = useState([]);\n    const [processSteps, setProcessSteps] = useState([]);\n\n    const getProcessIdFromUrl = () => {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get('process_id');\n    };\n\n    useEffect(() => {\n        const processId = getProcessIdFromUrl();\n        if (processId) {\n            fetchProcess(processId);\n            fetchProcessTypes();\n            fetchProcessSteps();\n        } else {\n            setError('No process ID found in the URL.');\n            setIsLoading(false);\n        }\n    }, []);\n\n    const fetchProcess = (processId) => {\n        setIsLoading(true);\n        apiFetch({ path: `/obatala/v1/process_obatala/${processId}?_embed` })\n            .then(data => {\n                setProcess(data);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process:', error);\n                setError('Error fetching process details.');\n                setIsLoading(false);\n            });\n    };\n\n    const fetchProcessTypes = () => {\n        setIsLoading(true);\n        apiFetch({ path: `/obatala/v1/process_type?per_page=100&_embed` })\n            .then(data => {\n                setProcessTypes(data);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process types:', error);\n                setIsLoading(false);\n            });\n    };\n\n    const fetchProcessSteps = () => {\n        setIsLoading(true);\n        apiFetch({ path: `/obatala/v1/process_step?per_page=100&_embed` })\n            .then(data => {\n                setProcessSteps(data);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process steps:', error);\n                setIsLoading(false);\n            });\n    };\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    if (error) {\n        return <Notice status=\"error\" isDismissible={false}>{error}</Notice>;\n    }\n\n    if (!process) {\n        return <Notice status=\"warning\" isDismissible={false}>No process found.</Notice>;\n    }\n\n    // Filtrar as etapas pelo tipo de processo atual\n    const filteredSteps = processSteps\n    .filter(step => {\n        const stepProcessTypes = Array.isArray(step.process_type) ? step.process_type.map(Number) : [];\n        // Verifica se a etapa pertence ao tipo de processo atual\n        return stepProcessTypes.includes(Number(process.process_type));\n    })\n    .sort((a, b) => {\n        // Obtém o índice do tipo de processo atual\n        const currentProcessTypeId = process.process_type;\n        const indexA = a.step_order[currentProcessTypeId] || 0;\n        const indexB = b.step_order[currentProcessTypeId] || 0;\n\n        return indexA - indexB;\n      });\n\n    console.log('Process Type ID:', Number(process.process_type));\n    console.log('Filtered Steps:', filteredSteps);\n\n\n    return (\n        <div>\n            <span className=\"brand\"><strong>Obatala</strong> Curatorial Process Viewer</span>\n            <h2>{process.process_type ? 'Process type title' : ''}: {process.title.rendered}</h2>\n            <div className=\"badge-container\">\n                <span className=\"badge success\">{process.status}</span>\n                <span className=\"badge\">Current step</span>\n            </div>\n\n            <div className=\"panel-container\">\n                <main className=\"counter-container\">\n                    {filteredSteps.length > 0 ? (\n                        filteredSteps.map((step, index) => (\n                            <Panel key={step.id} className=\"counter-item\">\n                                <PanelHeader>{step.title.rendered}<span className=\"badge success\">Completed</span><small>Completed at 21/04/2024 by João Silva</small></PanelHeader>\n                                <PanelBody title=\"History\" initialOpen={false}>\n                                    <PanelRow>\n                                        {/* Renderizar histórico aqui, se houver */}\n                                    </PanelRow>\n                                </PanelBody>\n                                <PanelBody title=\"Comments\" initialOpen={false}>\n                                    <PanelRow>\n                                        {/* Renderizar comentários aqui, se houver */}\n                                    </PanelRow>\n                                </PanelBody>\n                            </Panel>\n                        ))\n                    ) : (\n                        <Notice status=\"warning\" isDismissible={false}>No steps found for this process type.</Notice>\n                    )}\n                </main>\n            </div>\n        </div>\n    );\n};\n\nexport default ProcessViewer;\n","export const initialState = {\n    isOpen: false, \n    deleteProcessType: null,\n    deleteStep: null, \n};\n \nfunction Reducer(state = initialState, action) {\n    switch (action.type) {\n      case 'OPEN_MODAL_PROCESS_TYPE':\n        return { ...state, isOpen: true, deleteProcessType: action.payload };\n      case 'OPEN_MODAL_STEP':\n        return { ...state, isOpen: true, deleteStep: action.payload };\n      case 'CLOSE_MODAL':\n        return { ...state, isOpen: false, deleteProcessType: null, deleteStep: null };\n      default:\n        return state;\n    }\n}\n \nexport default Reducer;","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","module.exports = window[\"React\"];","module.exports = window[\"ReactDOM\"];","module.exports = window[\"ReactJSXRuntime\"];","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"primitives\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["createRoot","ProcessManager","ProcessTypeManager","ProcessStepManager","ProcessViewer","jsx","_jsx","navigateToProcessViewer","processId","window","location","href","document","addEventListener","processElement","getElementById","processTypeElement","processStepElement","processViewerElement","render","onSelectProcess","apiFetch","fetchProcessTypes","data","path","sort","a","b","title","rendered","localeCompare","fetchProcessSteps","saveProcessType","id","processType","method","deleteProcessType","updateProcessStep","processStep","checkLinkedProcesses","typeId","allProcesses","some","process","Number","process_type","useState","useEffect","Spinner","Button","SelectControl","TextControl","Notice","Panel","PanelHeader","PanelRow","jsxs","_jsxs","processTypes","setProcessTypes","processes","setProcesses","isLoading","setIsLoading","newProcessTitle","setNewProcessTitle","newProcessType","setNewProcessType","selectedProcessId","setSelectedProcessId","fetchProcesses","then","sortedProcessType","catch","error","console","log","handleCreateProcess","alert","newProcess","status","type","current_stage","savedProcess","handleSelectProcess","children","className","length","map","processTypeFiltered","find","isSecondary","onClick","isDismissible","label","value","onChange","options","isPrimary","React","useReducer","PanelBody","Icon","Modal","DatePicker","RadioControl","__experimentalConfirmDialog","ConfirmDialog","edit","trash","MediaUpload","MediaUploadCheck","Reducer","initialState","processSteps","setProcessSteps","editingStep","setEditingStep","notice","setNotice","state","dispatch","newStepTitle","setNewStepTitle","newStepType","setNewStepType","dynamicFields","setDynamicFields","name","editableFieldIndex","setEditableFieldIndex","sortedSteps","handleSaveStep","message","requestData","updatedStep","updatedProcessSteps","step","stepId","savedStep","metaData","field","key","getDefaultFieldValue","saveMetadata","handleEditStep","currentTitle","handleDeleteProcessStep","stepProcessTypes","Array","isArray","hasLinkedProcesses","includes","filter","handleConfirmDeleteStep","payload","handleCancel","Promise","resolve","reject","action","step_id","meta_data","response","success","handleDynamicFieldChange","index","updatedFields","handleAddField","handleRemoveField","_","idx","startEditFieldName","finishEditFieldName","newName","isOpen","onConfirm","deleteStep","onCancel","icon","onRemove","isDestructive","e","target","onBlur","autoFocus","onRequestClose","ProcessTypeForm","ProcessTypeList","ProcessStepForm","editingProcessType","setEditingProcessType","loadProcessTypes","loadProcessSteps","handleSaveProcessType","updatedProcessType","prevProcessTypes","handleDeleteProcessType","handleEditProcessType","handleAddProcessStep","steps","existingStep","existing","currentProcessTypes","updatedProcessTypes","prevProcessSteps","s","handleUpdatedProcessStep","handleConfirmDeleteType","onEdit","onDelete","onDeleteStep","onSave","onAddStep","ComboboxControl","closeSmall","selectedProcessType","setSelectedProcessType","selectedSteps","setSelectedSteps","stepInputValue","setStepInputValue","handleAddStep","stepsToAdd","handleChange","handleRemoveStep","initialOpen","onInputChange","TextareaControl","CheckboxControl","Fragment","_Fragment","processTypeName","setProcessTypeName","processTypeDescription","setProcessTypeDescription","acceptAttachments","setAcceptAttachments","acceptTainacanItems","setAcceptTainacanItems","generateTainacanItems","setGenerateTainacanItems","_editingProcessType$a","_editingProcessType$a2","_editingProcessType$g","description","accept_attachments","accept_tainacan_items","generate_tainacan_items","handleSave","handleResetForm","checked","Tooltip","Card","CardBody","CardHeader","CardFooter","Draggable","stepsState","setStepsState","initialStepsState","reduce","acc","stepTypes","step_order","handleDragStart","event","dataTransfer","setData","toString","handleDrop","dropIndex","preventDefault","draggedTypeId","getData","draggedStepId","updatedSteps","draggedStepIndex","findIndex","parseInt","draggedStep","splice","prevState","all","stepOrder","handleDragOver","split","item","draggable","onDragOver","onDrop","onDragStart","text","setProcess","setError","getProcessIdFromUrl","urlParams","URLSearchParams","search","get","fetchProcess","filteredSteps","currentProcessTypeId","indexA","indexB"],"sourceRoot":""}