{"version":3,"file":"index.js","mappings":"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","sources":["webpack://nocs-obatala/./node_modules/@wordpress/icons/build-module/library/close-small.js","webpack://nocs-obatala/./node_modules/@wordpress/icons/build-module/library/edit.js","webpack://nocs-obatala/./node_modules/@wordpress/icons/build-module/library/pencil.js","webpack://nocs-obatala/./node_modules/@wordpress/icons/build-module/library/trash.js","webpack://nocs-obatala/./src/admin/App.js","webpack://nocs-obatala/./src/admin/components/ProcessManager.js","webpack://nocs-obatala/./src/admin/components/ProcessStepManager.js","webpack://nocs-obatala/./src/admin/components/ProcessTypeManager.js","webpack://nocs-obatala/./src/admin/components/ProcessTypeManager/ProcessStepForm.js","webpack://nocs-obatala/./src/admin/components/ProcessTypeManager/ProcessTypeForm.js","webpack://nocs-obatala/./src/admin/components/ProcessTypeManager/ProcessTypeList.js","webpack://nocs-obatala/./src/admin/components/ProcessViewer.js","webpack://nocs-obatala/./src/admin/redux/reducer.js","webpack://nocs-obatala/external window \"React\"","webpack://nocs-obatala/external window \"ReactJSXRuntime\"","webpack://nocs-obatala/external window [\"wp\",\"apiFetch\"]","webpack://nocs-obatala/external window [\"wp\",\"blockEditor\"]","webpack://nocs-obatala/external window [\"wp\",\"components\"]","webpack://nocs-obatala/external window [\"wp\",\"element\"]","webpack://nocs-obatala/external window [\"wp\",\"primitives\"]","webpack://nocs-obatala/webpack/bootstrap","webpack://nocs-obatala/webpack/runtime/compat get default export","webpack://nocs-obatala/webpack/runtime/define property getters","webpack://nocs-obatala/webpack/runtime/hasOwnProperty shorthand","webpack://nocs-obatala/webpack/runtime/make namespace object","webpack://nocs-obatala/./src/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst closeSmall = /*#__PURE__*/_jsx(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\",\n  children: /*#__PURE__*/_jsx(Path, {\n    d: \"M12 13.06l3.712 3.713 1.061-1.06L13.061 12l3.712-3.712-1.06-1.06L12 10.938 8.288 7.227l-1.061 1.06L10.939 12l-3.712 3.712 1.06 1.061L12 13.061z\"\n  })\n});\nexport default closeSmall;\n//# sourceMappingURL=close-small.js.map","/**\n * Internal dependencies\n */\n\nimport { default as pencil } from './pencil';\nexport default pencil;\n//# sourceMappingURL=edit.js.map","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst pencil = /*#__PURE__*/_jsx(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\",\n  children: /*#__PURE__*/_jsx(Path, {\n    d: \"m19 7-3-3-8.5 8.5-1 4 4-1L19 7Zm-7 11.5H5V20h7v-1.5Z\"\n  })\n});\nexport default pencil;\n//# sourceMappingURL=pencil.js.map","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst trash = /*#__PURE__*/_jsx(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\",\n  children: /*#__PURE__*/_jsx(Path, {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M12 5.5A2.25 2.25 0 0 0 9.878 7h4.244A2.251 2.251 0 0 0 12 5.5ZM12 4a3.751 3.751 0 0 0-3.675 3H5v1.5h1.27l.818 8.997a2.75 2.75 0 0 0 2.739 2.501h4.347a2.75 2.75 0 0 0 2.738-2.5L17.73 8.5H19V7h-3.325A3.751 3.751 0 0 0 12 4Zm4.224 4.5H7.776l.806 8.861a1.25 1.25 0 0 0 1.245 1.137h4.347a1.25 1.25 0 0 0 1.245-1.137l.805-8.861Z\"\n  })\n});\nexport default trash;\n//# sourceMappingURL=trash.js.map","import { render } from \"@wordpress/element\";\nimport ProcessManager from \"./components/ProcessManager\";\nimport ProcessTypeManager from \"./components/ProcessTypeManager\";\nimport ProcessStepManager from './components/ProcessStepManager';\nimport ProcessViewer from './components/ProcessViewer';\n\n// Função para navegar para o ProcessViewer ao selecionar um processo\nconst navigateToProcessViewer = (processId) => {\n  window.location.href = `?page=process-viewer&process_id=${processId}`;\n};\n\n// Adiciona um evento listener para ser executado quando o conteúdo do DOM for completamente carregado\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Obtém os elementos do DOM pelos IDs\n  const processElement = document.getElementById(\"process-manager\");\n  const processTypeElement = document.getElementById(\"process-type-manager\");\n  const processStepElement = document.getElementById(\"process-step-manager\");\n  const processViewerElement = document.getElementById(\"process-viewer\");\n\n  // Verifica se o elemento com o ID 'process-manager' existe\n  // Se existir, renderiza o componente ProcessManager dentro deste elemento\n  if (processElement) {\n    render(<ProcessManager onSelectProcess={navigateToProcessViewer} />, processElement);\n  }\n\n  // Verifica se o elemento com o ID 'process-type-manager' existe\n  // Se existir, renderiza o componente ProcessTypeManager dentro deste elemento\n  if (processTypeElement) {\n    render(<ProcessTypeManager />, processTypeElement);\n  }\n\n  // Verifica se o elemento com o ID 'process-step-manager' existe\n  // Se existir, renderiza o componente ProcessStepManager dentro deste elemento\n  if (processStepElement) {\n    render(<ProcessStepManager />, processStepElement);\n  }\n\n  // Verifica se o elemento com o ID 'process-viewer' existe\n  // Se existir, renderiza o componente ProcessViewer dentro deste elemento\n  if (processViewerElement) {\n    render(<ProcessViewer />, processViewerElement);\n  }\n});\n","import { useState, useEffect } from 'react';\nimport { Spinner, Button, SelectControl, TextControl, Notice, Panel, PanelHeader, PanelRow } from '@wordpress/components';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst ProcessManager = ({ onSelectProcess }) => {\n    const [processTypes, setProcessTypes] = useState([]);\n    const [processes, setProcesses] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [newProcessTitle, setNewProcessTitle] = useState('');\n    const [newProcessType, setNewProcessType] = useState('');\n    const [selectedProcessId, setSelectedProcessId] = useState(null);\n\n    useEffect(() => {\n        fetchProcessTypes();\n        fetchProcesses();\n    }, []);\n\n    const fetchProcessTypes = () => {\n        apiFetch({ path: `/wp/v2/process_type?per_page=100&_embed` })\n            .then(data => {\n                const sortedProcessType = data.sort((a, b) => a.title.rendered.localeCompare(b.title.rendered));\n                setProcessTypes(sortedProcessType);\n            })\n            .catch(error => {\n                console.error('Error fetching process types:', error);\n            });\n    };\n\n    const fetchProcesses = () => {\n        setIsLoading(true);\n        apiFetch({ path: `/wp/v2/process_obatala?per_page=100&_embed` })\n            .then(data => {\n                console.log('Fetched processes:', data); // Adiciona log para verificar os dados\n                setProcesses(data);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching processes:', error);\n                setIsLoading(false);\n            });\n    };\n\n    const handleCreateProcess = () => {\n        if (!newProcessTitle || !newProcessType) {\n            alert('Please provide a title and select a process type.');\n            return;\n        }\n\n        const newProcess = {\n            title: newProcessTitle,\n            status: 'publish',\n            type: 'process_obatala',\n            process_type: newProcessType,\n            current_stage: null,\n        };\n\n        apiFetch({ path: `/wp/v2/process_obatala`, method: 'POST', data: newProcess })\n            .then(savedProcess => {\n                setProcesses([...processes, savedProcess]);\n                setNewProcessTitle('');\n                setNewProcessType('');\n            })\n            .catch(error => {\n                console.error('Error creating process:', error);\n            });\n    };\n\n    const handleSelectProcess = (processId) => {\n        setSelectedProcessId(processId);\n        onSelectProcess(processId);\n    };\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    return (\n        <div>\n            <span className=\"brand\"><strong>Obatala</strong> Curatorial Process Management</span>\n            <h2>Process Manager</h2>\n            <div className=\"panel-container\">\n                <main>\n                    <Panel>\n                        <PanelHeader>Existing Processes</PanelHeader>\n                        <PanelRow>\n                            {processes.length > 0 ? (\n                                <table className=\"wp-list-table widefat fixed striped\">\n                                    <thead>\n                                        <tr>\n                                            <th>Process Title</th>\n                                            <th>Process Type</th>\n                                            <th>Status</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {processes.map(process => {\n                                            const processTypeFiltered = processTypes.find(processType => {\n                                                return processType.id == process.process_type;\n                                            });\n                                            return (\n                                                <tr key={process.id}>\n                                                    <td>{process.title.rendered}</td>\n                                                    <td>{processTypeFiltered ? processTypeFiltered.title.rendered : 'Unknown'}</td>\n                                                    <td><span className=\"badge success\">{process.status}</span></td>\n                                                    <td>\n                                                        <Button isSecondary onClick={() => handleSelectProcess(process.id)}>\n                                                            View\n                                                        </Button>\n                                                    </td>\n                                                </tr>\n                                            );\n                                        })}\n                                    </tbody>\n                                </table>\n                            ) : (\n                                <Notice isDismissible={false} status=\"warning\">No existing processes.</Notice>\n                            )}\n                        </PanelRow>\n                    </Panel>\n                </main>\n                <aside>\n                    <Panel>\n                        <PanelHeader>Create Process</PanelHeader>\n                        <PanelRow>\n                            <TextControl\n                                label=\"Process Title\"\n                                value={newProcessTitle}\n                                onChange={(value) => setNewProcessTitle(value)}\n                            />\n                            <SelectControl\n                                label=\"Process Type\"\n                                value={newProcessType}\n                                options={[\n                                    { label: 'Select a process type...', value: '' },\n                                    ...processTypes.map(type => ({ label: type.title.rendered, value: type.id }))\n                                ]}\n                                onChange={(value) => setNewProcessType(value)}\n                            />\n                            <Button isPrimary onClick={handleCreateProcess}>Create Process</Button>\n                        </PanelRow>\n                    </Panel>\n                </aside>\n            </div>\n            {selectedProcessId && (\n                <div>\n                    {/* Render your ProcessViewer component or call onSelectProcess with selectedProcessId */}\n                    {onSelectProcess(selectedProcessId)}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ProcessManager;\n","import React, { useState, useEffect, useReducer} from 'react';\nimport { Spinner, Button, SelectControl, TextControl, Notice, Panel, PanelHeader, PanelBody, PanelRow, Icon, Modal, DatePicker, RadioControl, __experimentalConfirmDialog as ConfirmDialog } from '@wordpress/components';\nimport apiFetch from '@wordpress/api-fetch';\nimport { edit, trash } from \"@wordpress/icons\";\nimport { MediaUpload, MediaUploadCheck } from '@wordpress/block-editor';\nimport Reducer, { initialState } from '../redux/reducer'; \n\nconst ProcessStepManager = () => {\n    // Estado para armazenar os passos de processo\n    const [processSteps, setProcessSteps] = useState([]);\n\n    const [editingStep, setEditingStep] = useState(null);\n    const [notice, setNotice] = useState(null);\n    const [state, dispatch] = useReducer(Reducer, initialState);\n\n    // Estado para armazenar os tipos de processo\n    const [processTypes, setProcessTypes] = useState([]);\n    // Estado para armazenar o título do novo passo de processo\n    const [newStepTitle, setNewStepTitle] = useState('');\n    // Estado para armazenar o tipo do novo passo de processo\n    const [newStepType, setNewStepType] = useState('');\n    // Estado para armazenar os campos dinâmicos para os metadados\n    const [dynamicFields, setDynamicFields] = useState([{ name: '', type: 'text', value: '' }]);\n    // Estado para controlar o carregamento\n    const [isLoading, setIsLoading] = useState(true);\n    // Estado para o índice do campo dinâmico atualmente em modo de edição\n    const [editableFieldIndex, setEditableFieldIndex] = useState(-1);\n\n    // Carrega os passos de processo e tipos de processo ao inicializar\n    useEffect(() => {\n        fetchProcessSteps();\n    }, []);\n\n    // Função para buscar os passos de processo da API WordPress\n    const fetchProcessSteps = () => {\n        setIsLoading(true);\n        apiFetch({ path: `/wp/v2/process_step?per_page=100&_embed` })\n            .then(data => {\n                const sortedSteps = data.sort((a, b) => a.title.rendered.localeCompare(b.title.rendered));\n                setProcessSteps(sortedSteps);;\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process steps:', error);\n                setIsLoading(false);\n            });\n    };\n\n    // Função para criar um novo passo de processo\n    const handleSaveStep = () => {\n        if (!newStepTitle) {\n            setNotice({ status: 'error', message: 'Step Title field cannot be empty.' });\n            return;\n        }\n\n        const requestData = {\n            title: newStepTitle,\n            status: 'publish',\n            type: 'process_step',\n        };\n\n        if (editingStep) {\n            apiFetch({ path: `/wp/v2/process_step/${editingStep}`, method: 'PUT', data: requestData })\n                .then(updatedStep => {\n                    const updatedProcessSteps = processSteps.map(step =>\n                        step.id === editingStep ? updatedStep : step\n                    );\n                    setProcessSteps(updatedProcessSteps);\n                    setEditingStep(null);\n                    setNewStepTitle('');\n                    setNotice(null);\n\n                    const stepId = savedStep.id;\n                    const metaData = dynamicFields.map(field => ({\n                        key: field.name,\n                        value: getDefaultFieldValue(field.type) // Define o valor padrão conforme o tipo\n                    }));\n        \n                    // Salva os metadados do novo passo\n                    saveMetadata(stepId, metaData)\n                        .then(() => {\n                            // Atualiza a lista de passos de processo após salvar com sucesso\n                            fetchProcessSteps();\n                            // Limpa os campos de entrada após salvar\n                            setNewStepTitle('');\n                            setNewStepType('');\n                            setDynamicFields([{ name: '', type: 'text', value: '' }]);\n                        })\n                        .catch(error => {\n                            console.error('Error saving metadata:', error);\n                        });\n                })\n                .catch(error => {\n                    console.error('Error updating process step:', error);\n                });\n        } else {\n            apiFetch({ path: `/wp/v2/process_step`, method: 'POST', data: requestData })\n                .then(savedStep => {\n                    setProcessSteps([...processSteps, savedStep]);\n                    setNewStepTitle('');\n\n                    const stepId = savedStep.id;\n                    const metaData = dynamicFields.map(field => ({\n                        key: field.name,\n                        value: getDefaultFieldValue(field.type) // Define o valor padrão conforme o tipo\n                    }));\n\n                    // Salva os metadados do novo passo\n                    saveMetadata(stepId, metaData)\n                    .then(() => {\n                        // Atualiza a lista de passos de processo após salvar com sucesso\n                        fetchProcessSteps();\n                        // Limpa os campos de entrada após salvar\n                        setNewStepTitle('');\n                        setNewStepType('');\n                        setDynamicFields([{ name: '', type: 'text', value: '' }]);\n                    })\n                    .catch(error => {\n                        console.error('Error saving metadata:', error);\n                    });\n                })\n                .catch(error => {\n                    console.error('Error creating process step:', error);\n                });\n        }\n    };\n\n    const handleEditStep = (stepId, currentTitle) => {\n        setEditingStep(stepId);\n        setNewStepTitle(currentTitle);\n    };\n\n    const handleDeleteProcessStep = async (id) => {\n        try {\n          const step = await apiFetch({ path: `/wp/v2/process_step/${id}` });\n          const stepProcessTypes = Array.isArray(step.process_type) ? step.process_type : [step.process_type];\n      \n        \n          const hasLinkedProcesses = await apiFetch({ path: '/wp/v2/process_obatala?per_page=100' })\n            .then(allProcesses => allProcesses.some(process => stepProcessTypes.includes(Number(process.process_type))));\n      \n          if (hasLinkedProcesses) {\n            setNotice({ status: 'error', message: 'Cannot delete step as it is linked to a process type in use.' });\n            return;\n          }\n      \n          await apiFetch({ path: `/wp/v2/process_step/${id}`, method: 'DELETE' });\n          setProcessSteps(processSteps.filter(step => step.id !== id));\n        } catch (error) {\n          console.error('Error deleting process step:', error);\n        }\n      };\n      \n    \n    const handleConfirmDeleteStep = (id) => {\n        dispatch({ type: 'OPEN_MODAL_STEP', payload: id });\n    };\n\n    const handleCancel = () => {\n        setEditingStep(null);\n        setNewStepTitle('');\n        setNotice(null);\n        dispatch({ type: 'CLOSE_MODAL' });\n    };\n\n    // Função para salvar metadados do passo de processo\n    const saveMetadata = (stepId, metaData) => {\n        return new Promise((resolve, reject) => {\n            apiFetch({\n                path: `/wp-admin/admin-ajax.php`,\n                method: 'POST',\n                data: {\n                    action: 'save_metadata',\n                    step_id: stepId,\n                    meta_data: metaData\n                }\n            })\n            .then(response => {\n                if (response.success) {\n                    resolve();\n                } else {\n                    reject('Error saving metadata:', response.data);\n                }\n            })\n            .catch(error => {\n                reject('Error saving metadata:', error);\n            });\n        });\n    };\n\n    // Função para lidar com a mudança de campo dinâmico\n    const handleDynamicFieldChange = (index, field, value) => {\n        const updatedFields = [...dynamicFields];\n        updatedFields[index][field] = value;\n        setDynamicFields(updatedFields);\n    };\n\n    // Função para adicionar um novo campo dinâmico\n    const handleAddField = () => {\n        setDynamicFields([...dynamicFields, { name: '', type: 'text', value: '' }]);\n    };\n\n    // Função para remover um campo dinâmico\n    const handleRemoveField = (index) => {\n        const updatedFields = dynamicFields.filter((_, idx) => idx !== index);\n        setDynamicFields(updatedFields);\n    };\n\n    // Função para obter o valor padrão conforme o tipo do campo\n    const getDefaultFieldValue = (type) => {\n        switch (type) {\n            case 'text':\n            case 'textfield':\n            case 'number':\n                return '';\n            case 'datepicker':\n                return null; // Exemplo de valor padrão para datepicker\n            case 'upload':\n                return ''; // Exemplo de valor padrão para upload\n            case 'select':\n                return ''; // Exemplo de valor padrão para select\n            case 'radio':\n                return ''; // Exemplo de valor padrão para radio\n            default:\n                return '';\n        }\n    };\n\n    // Função para iniciar a edição do nome do campo dinâmico\n    const startEditFieldName = (index) => {\n        setEditableFieldIndex(index);\n    };\n\n    // Função para finalizar a edição do nome do campo dinâmico\n    const finishEditFieldName = (index, newName) => {\n        const updatedFields = [...dynamicFields];\n        updatedFields[index].name = newName;\n        setDynamicFields(updatedFields);\n        setEditableFieldIndex(-1);\n    };\n\n    // Renderiza um spinner enquanto os dados estão sendo carregados\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    return (\n        <div>\n            {/* Título e cabeçalho da página */}\n            <span className=\"brand\"><strong>Obatala</strong> Curatorial Process Management</span>\n            <h2>Step Manager</h2>\n            <div className=\"panel-container\">\n                <main>\n                     {/* Painel com os passos de processo existentes */}\n                     <ConfirmDialog\n                        isOpen={ state.isOpen }\n                        onConfirm={() => {\n                            handleDeleteProcessStep(state.deleteStep);\n                            dispatch({ type: 'CLOSE_MODAL' });\n                        }}\n                        onCancel={handleCancel}\n                    >   \n                        Are you sure you want to delete this {state.deleteProcessType ? 'Process Type' : 'Step' }?\n\n                    </ConfirmDialog>\n                    <Panel>\n                        <PanelHeader>Existing Steps</PanelHeader>\n                        <PanelRow>\n                            {/* Lista os passos de processo existentes */}\n                            {processSteps.length > 0 ? (\n                                <table className=\"wp-list-table widefat fixed striped\">\n                                    <thead>\n                                        <tr>\n                                            <th>Step Title</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {processSteps.map(step => (\n                                            <tr key={step.id}>\n                                                <td>{step.title.rendered}</td>\n                                                <td>\n                                                    <Button\n                                                        icon={<Icon icon={edit} />}\n                                                        onClick={() => handleEditStep(step.id, step.title.rendered)}\n                                                    />\n                                                    <Button\n                                                        icon={<Icon icon={trash} />}\n                                                        onClick={() => handleConfirmDeleteStep(step.id)}\n                                                    />\n                                                </td>\n                                            </tr>\n                                        ))}    \n                                    </tbody>\n                                </table>\n                            ) : (\n                                // Aviso se não houver passos de processo existentes\n                                <Notice isDismissible={false} status=\"warning\">No existing process steps.</Notice>\n                            )}\n                        </PanelRow>\n                    </Panel>\n                </main>\n                <aside>\n                     {/* Painel para criar um novo passo de processo */}\n                    <Panel>\n                        <PanelHeader>Add Step</PanelHeader>\n                        <PanelBody title=\"Main data\">\n                            <PanelRow>\n                                {/* Formulário para inserir título e tipo de processo do novo passo */}\n                                {notice && !editingStep && (\n                                    <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                                        {notice.message}\n                                    </Notice>\n                                )}\n                                <TextControl\n                                    label=\"Step Title\"\n                                    value={newStepTitle}\n                                    onChange={(value) => setNewStepTitle(value)}\n                                />\n                                <Button isPrimary onClick={handleSaveStep}>\n                                    Add Step\n                                </Button>\n                            </PanelRow>\n                        </PanelBody>\n                        <PanelBody title=\"Metadata\" className=\"counter-container\">\n                            {/* Renderiza os campos dinâmicos para os metadados */}\n                            {dynamicFields.map((field, index) => (\n                                <PanelRow key={index} className=\"counter-item\">\n                                    <Button icon={<Icon icon={trash} />} isDestructive onClick={() => handleRemoveField(index)} />\n                                    <TextControl\n                                        label=\"Title\"\n                                        value={field.name || `Metadata Name ${index + 1}`}\n                                        onChange={(e) => handleDynamicFieldChange(index, 'name', e.target.value)}\n                                        onBlur={() => finishEditFieldName(index, dynamicFields[index].name)}\n                                        autoFocus\n                                    />\n                                    <SelectControl\n                                        label=\"Type\"\n                                        value={field.type}\n                                        options={[\n                                            { label: 'Text', value: 'text' },\n                                            { label: 'Date Picker', value: 'datepicker' },\n                                            { label: 'Upload', value: 'upload' },\n                                            { label: 'Number', value: 'number' },\n                                            { label: 'Text Field', value: 'textfield' },\n                                            { label: 'Select', value: 'select' },\n                                            { label: 'Radio', value: 'radio' },\n                                        ]}\n                                        onChange={(value) => handleDynamicFieldChange(index, 'type', value)}\n                                    />\n                                </PanelRow>\n                                \n                            ))}\n                            <PanelRow>\n                                <Button isSecondary onClick={handleAddField}>Add Metadata</Button>\n                            </PanelRow>\n                        </PanelBody>\n\n                        <PanelRow>\n                            <Button isPrimary onClick={handleSaveStep}>Add Step</Button>\n                        </PanelRow>\n                    </Panel>\n                </aside>\n            </div>\n            {editingStep && (\n                <Modal\n                    title=\"Edit Process Step\"\n                    onRequestClose={handleCancel}\n                    isDismissible={true}\n                >\n                    {notice && editingStep && (\n                        <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                            {notice.message}\n                        </Notice>\n                    )}\n                    <TextControl\n                        label=\"Step Title\"\n                        value={newStepTitle}\n                        onChange={(value) => setNewStepTitle(value)}\n                    />\n                    <Button isPrimary onClick={handleSaveStep}>\n                        Save\n                    </Button>\n                    <Button onClick={handleCancel}>\n                        Cancel\n                    </Button>\n                </Modal>\n            )}\n        </div>\n    );\n};\n\nexport default ProcessStepManager;\n","import { useState, useEffect, useReducer } from 'react';\nimport {\n    Panel,\n    PanelHeader,\n    Spinner,\n    Notice,\n    __experimentalConfirmDialog as ConfirmDialog\n    } from '@wordpress/components';\nimport apiFetch from '@wordpress/api-fetch';\nimport ProcessTypeForm from './ProcessTypeManager/ProcessTypeForm';\nimport ProcessTypeList from './ProcessTypeManager/ProcessTypeList';\nimport ProcessStepForm from './ProcessTypeManager/ProcessStepForm';\nimport Reducer, { initialState } from '../redux/reducer'; \n\n\nconst ProcessTypeManager = () => {\n    const [processTypes, setProcessTypes] = useState([]);\n    const [processSteps, setProcessSteps] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [editingProcessType, setEditingProcessType] = useState(null);\n    const [state, dispatch] = useReducer(Reducer, initialState);\n    const [notice, setNotice] = useState(null);\n\n      \n    useEffect(() => {\n        fetchProcessTypes();\n        fetchProcessSteps();\n    }, []);\n\n    const fetchProcessTypes = () => {\n        setIsLoading(true);\n        apiFetch({ path: `/wp/v2/process_type?per_page=100&_embed` })\n            .then(data => {\n                console.log('Fetched Process Types:', data);\n                const sortedProcessTypes = data.sort((a, b) => a.title.rendered.localeCompare(b.title.rendered));\n                setProcessTypes(sortedProcessTypes);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process types:', error);\n                setIsLoading(false);\n            });\n    };\n\n    const fetchProcessSteps = () => {\n        apiFetch({ path: `/wp/v2/process_step?per_page=100&_embed` })\n            .then(data => {\n                console.log('Fetched Process Steps:', data);\n                const sortedSteps = data.sort((a, b) => a.title.rendered.localeCompare(b.title.rendered));\n                setProcessSteps(sortedSteps);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process steps:', error);\n                setIsLoading(false);\n            });\n    };\n\n    const handleSaveProcessType = (processType) => {\n        if (editingProcessType) {\n            apiFetch({ path: `/wp/v2/process_type/${editingProcessType.id}`, method: 'PUT', data: processType })\n                .then(savedProcessType => {\n                    const updatedProcessTypes = processTypes.map(type => type.id === savedProcessType.id ? savedProcessType : type);\n                    setProcessTypes(updatedProcessTypes);\n                    setEditingProcessType(null);\n                })\n                .catch(error => {\n                    console.error('Error updating process type:', error);\n                });\n        } else {\n            apiFetch({ path: `/wp/v2/process_type`, method: 'POST', data: processType })\n                .then(savedProcessType => {\n                    setProcessTypes([...processTypes, savedProcessType]);\n                    fetchProcessTypes();\n                })\n                .catch(error => {\n                    console.error('Error adding process type:', error);\n                });\n        }\n    };\n\n    const handleDeleteProcessType = (id) => {\n        apiFetch({ path: `/wp/v2/process_type/${id}`, method: 'DELETE' })\n            .then(() => {\n                const updatedProcessTypes = processTypes.filter(type => type.id !== id);\n                setProcessTypes(updatedProcessTypes);\n            })\n            .catch(error => {\n                console.error('Error deleting process type:', error);\n            });\n    };\n\n    const handleEditProcessType = (processType) => {\n        setEditingProcessType(processType);\n    };\n\n\n    const handleAddProcessStep = (steps) => {\n        steps.forEach(step => {\n            const { id, process_type } = step;\n    \n            const existingStep = processSteps.find(existing => existing.id === id);\n            \n            if (!existingStep) {\n                console.error('Etapa não encontrada:', id);\n                return;\n            }\n    \n            const currentProcessTypes = Array.isArray(existingStep.process_type) ? \n                                        existingStep.process_type.map(Number) : [];\n            const newProcessType = Number(process_type);\n    \n            if (currentProcessTypes.includes(newProcessType)) {\n                setNotice({ status: 'error', message: `Step is already linked to this Process Type` });\n                return;\n            }\n        \n            const updatedProcessTypes = [...currentProcessTypes, newProcessType];\n    \n            apiFetch({\n                path: `/wp/v2/process_step/${id}`,\n                method: 'PUT',\n                data: { process_type: updatedProcessTypes }\n            })\n            .then(updatedProcessStep => {\n                setProcessSteps(prevProcessSteps =>\n                    prevProcessSteps.map(s => s.id === id ? updatedProcessStep : s)\n                );\n            })\n            .catch(error => {\n                console.error('Error updating process step:', error);\n            });\n        });\n    };\n    \n    \n    \n    const handleUpdatedProcessStep = async () => {\n        const { stepId, typeId } = state.deleteStep;\n\n        try {\n            const existingStep = processSteps.find(step => step.id === stepId);\n    \n            if (!existingStep) {\n                console.error('Etapa não encontrada:', stepId);\n                return;\n            }\n    \n            // Verifica se o tipo de processo específico está vinculado a algum processo\n            const hasLinkedProcesses = await apiFetch({ path: `/wp/v2/process_obatala?per_page=100` })\n                .then(allProcesses => \n                    allProcesses.some(process => Number(process.process_type) === typeId)\n                );\n    \n            if (hasLinkedProcesses) {\n                setNotice({ status: 'error', message: 'Cannot delete step as it is linked to a process type in use.' });\n                return;\n            }\n    \n            // Atualiza os tipos de processo da etapa para remover o tipo específico\n            const stepProcessTypes = Array.isArray(existingStep.process_type) ? existingStep.process_type.map(Number) : [];\n            const updatedProcessTypes = stepProcessTypes.filter(id => id !== typeId);\n    \n            //console.log('Updated Process Types:', updatedProcessTypes);\n    \n            const updatedProcessStep = await apiFetch({\n                path: `/wp/v2/process_step/${stepId}`,\n                method: 'PUT',\n                data: { process_type: updatedProcessTypes }\n            });\n    \n            //console.log('Etapa atualizada:', updatedProcessStep);\n    \n            setProcessSteps(prevProcessSteps =>\n                prevProcessSteps.map(step => step.id === stepId ? updatedProcessStep : step)\n            );\n    \n        } catch (error) {\n            console.error('Erro ao atualizar a etapa do processo:', error);\n        }\n    };\n    \n    \n\n    const handleConfirmDeleteType = (id) => {\n        dispatch({ type: 'OPEN_MODAL_PROCESS_TYPE', payload: id });\n    };\n\n    const handleConfirmDeleteStep = (stepId, typeId) => {\n        dispatch({ type: 'OPEN_MODAL_STEP', payload: {stepId, typeId} });\n    };\n     \n    const handleCancel = () => {\n        dispatch({ type: 'CLOSE_MODAL' });\n    }; \n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    return (\n            <div>\n            <span className=\"brand\"><strong>Obatala</strong> Curatorial Process Management</span>\n            <h2>Process Type Manager</h2>\n            <div className=\"panel-container\">\n                <main>\n                     <ConfirmDialog\n                        isOpen={ state.isOpen }\n                        onConfirm={() => {\n                            if (state.deleteProcessType) {\n                                handleDeleteProcessType(state.deleteProcessType);\n                            } else if (state.deleteStep) {\n                                handleUpdatedProcessStep(state.deleteStep);\n                            }\n                            dispatch({ type: 'CLOSE_MODAL' });\n                        }}\n                        onCancel={handleCancel}\n                    >   \n                        Are you sure you want to delete this {state.deleteProcessType ? 'Process Type' : 'Step' }?\n\n                    </ConfirmDialog>\n\n                    <ProcessTypeList \n                        processTypes={processTypes} \n                        processSteps={processSteps} \n                        onEdit={handleEditProcessType} \n                        onDelete={handleConfirmDeleteType} \n                        onDeleteStep={handleConfirmDeleteStep}\n                    />\n                </main>\n                <aside>\n                    <Panel>\n                        <PanelHeader>Managing process types</PanelHeader>\n                        <ProcessTypeForm onSave={handleSaveProcessType} onCancel={() => setEditingProcessType(null)} editingProcessType={editingProcessType} />    \n                        {notice && (\n                            <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                                {notice.message}\n                            </Notice>\n                        )}\n                        <ProcessStepForm processTypes={processTypes} processSteps={processSteps} onAddStep={handleAddProcessStep} />\n                    </Panel>\n                </aside>\n            </div>\n        </div>\n      \n    );\n};\n\nexport default ProcessTypeManager;","import { useState } from 'react';\nimport { Button, ComboboxControl, SelectControl, PanelBody, PanelRow, Notice, Icon } from '@wordpress/components';\nimport { closeSmall } from '@wordpress/icons';\n\nconst ProcessStepForm = ({ processTypes, processSteps, onAddStep }) => {\n    const [selectedProcessType, setSelectedProcessType] = useState('');\n    const [selectedSteps, setSelectedSteps] = useState([]);\n    const [stepInputValue, setStepInputValue] = useState('');\n    const [notice, setNotice] = useState(null);\n\n    const handleAddStep = () => {\n        if (!selectedProcessType || selectedSteps.length === 0) {\n            setNotice({ status: 'error', message: 'Please select both a process type and at least one step.' });\n            return;\n        }\n\n        const stepsToAdd = selectedSteps.map(stepTitle => {\n            const step = processSteps.find(step => step.title.rendered === stepTitle);\n            return {\n                id: step.id,\n                title: step.title.rendered,\n                status: 'publish',\n                process_type: selectedProcessType,\n            };\n        });\n\n        onAddStep(stepsToAdd);\n        setSelectedSteps([]);\n        setNotice({ status: 'success', message: 'Steps added successfully.' });\n    };\n\n    const handleChange = (value) => {\n        if (value && !selectedSteps.includes(value)) {\n            setSelectedSteps([...selectedSteps, value]);\n            setStepInputValue('');\n        }\n    };\n\n    const handleRemoveStep = (stepTitle) => {\n        setSelectedSteps(selectedSteps.filter(step => step !== stepTitle));\n    };\n\n    return (\n        <PanelBody title=\"Add a Process Type Step\" initialOpen={true}>\n            <PanelRow>\n                {notice && (\n                    <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                        {notice.message}\n                    </Notice>\n                )}\n                <SelectControl\n                    label=\"Select Process Type\"\n                    value={selectedProcessType}\n                    options={[\n                        { label: 'Select a process type...', value: '' },\n                        ...processTypes.map(type => ({ label: type.title.rendered, value: type.id }))\n                    ]}\n                    onChange={(value) => setSelectedProcessType(value)}\n                />\n                <ComboboxControl\n                    label=\"Select one or more Steps\"\n                    value={stepInputValue}\n                    options={processSteps\n                        .filter(step => !selectedSteps.includes(step.title.rendered))\n                        .map(step => ({ label: step.title.rendered, value: step.title.rendered }))}\n                    onChange={handleChange}\n                    onInputChange={setStepInputValue}\n                />\n                <div className=\"selected-steps\">\n                    {selectedSteps.map(step => (\n                        <div key={step} className=\"selected-step\">\n                            {step}\n                            <Button\n                                icon={closeSmall}\n                                onClick={() => handleRemoveStep(step)}\n                                className=\"remove-step-button\"\n                            />\n                        </div>\n                    ))}\n                </div>\n                <Button isSecondary onClick={handleAddStep}>\n                    Add Process Step\n                </Button>\n            </PanelRow>\n        </PanelBody>\n    );\n};\n\nexport default ProcessStepForm;\n","import { useState, useEffect } from 'react';\nimport { Button, TextControl, TextareaControl, CheckboxControl, PanelBody, PanelRow, Notice } from '@wordpress/components';\n\nconst ProcessTypeForm = ({ onSave, onCancel, editingProcessType }) => {\n    const [processTypeName, setProcessTypeName] = useState('');\n    const [processTypeDescription, setProcessTypeDescription] = useState('');\n    const [acceptAttachments, setAcceptAttachments] = useState(false);\n    const [acceptTainacanItems, setAcceptTainacanItems] = useState(false);\n    const [generateTainacanItems, setGenerateTainacanItems] = useState(false);\n    const [notice, setNotice] = useState(null);\n\n\n    useEffect(() => {\n        if (editingProcessType) {\n            setProcessTypeName(editingProcessType.title.rendered);\n            setProcessTypeDescription(editingProcessType.description || '');\n            setAcceptAttachments(editingProcessType.accept_attachments ?? false);\n            setAcceptTainacanItems(editingProcessType.accept_tainacan_items ?? false);\n            setGenerateTainacanItems(editingProcessType.generate_tainacan_items ?? false);\n        }\n    }, [editingProcessType]);\n\n    const handleSave = () => {\n        if (!processTypeName || !processTypeDescription) {\n            setNotice({ status: 'error', message: 'Field Name and Description cannot be empty.' });\n            return;\n        }\n\n        const processType = {\n            status: 'publish',\n            title: processTypeName,\n            description: processTypeDescription,\n            accept_attachments: acceptAttachments,\n            accept_tainacan_items: acceptTainacanItems,\n            generate_tainacan_items: generateTainacanItems,\n        };\n        onSave(processType);\n\n        if (!editingProcessType) {\n            handleResetForm();\n        }\n        \n    };\n\n    const handleResetForm = () => {\n        setProcessTypeName('');\n        setProcessTypeDescription('');\n        setAcceptAttachments(false);\n        setAcceptTainacanItems(false);\n        setGenerateTainacanItems(false);\n    }\n\n    const handleCancel = () => {\n        onCancel();\n        setProcessTypeName('');\n        setProcessTypeDescription('');\n        setAcceptAttachments(false);\n        setAcceptTainacanItems(false);\n        setGenerateTainacanItems(false);\n    };\n\n    return (\n        <PanelBody title=\"Add Process Type\" initialOpen={ true }>\n            \n            <PanelRow>\n                {notice && (\n                <Notice status={notice.status} isDismissible onRemove={() => setNotice(null)}>\n                    {notice.message}\n                </Notice>\n                )}\n                <TextControl\n                    label=\"Process Type Name\"\n                    value={processTypeName}\n                    onChange={(value) => setProcessTypeName(value)}\n                />\n                <TextareaControl\n                    label=\"Process Type Description\"\n                    value={processTypeDescription}\n                    onChange={(value) => setProcessTypeDescription(value)}\n                />\n                <CheckboxControl\n                    label=\"Accept Attachments\"\n                    checked={acceptAttachments}\n                    onChange={(value) => setAcceptAttachments(value)}\n                />\n                <CheckboxControl\n                    label=\"Accept Tainacan Items\"\n                    checked={acceptTainacanItems}\n                    onChange={(value) => setAcceptTainacanItems(value)}\n                />\n                <CheckboxControl\n                    label=\"Generate Tainacan Items\"\n                    checked={generateTainacanItems}\n                    onChange={(value) => setGenerateTainacanItems(value)}\n                />\n                {editingProcessType ? (\n                    <>\n                        <Button isPrimary onClick={handleSave}>\n                            Update Process Type\n                        </Button>\n                        <Button onClick={handleCancel}>\n                            Cancel\n                        </Button>\n                    </>\n                ) : (\n                    <Button isPrimary onClick={handleSave}>\n                        Add Process Type\n                    </Button>\n                )}\n            </PanelRow>\n        </PanelBody>\n    );\n};\n\nexport default ProcessTypeForm;","import { useEffect, useState } from 'react';\nimport { Button, Icon, Tooltip, Card, CardBody, CardHeader, CardFooter, Notice, Panel, PanelHeader, PanelRow, Draggable } from \"@wordpress/components\";\nimport { edit, trash } from \"@wordpress/icons\";\nimport apiFetch from '@wordpress/api-fetch';\n\nconst ProcessTypeList = ({\n  processTypes,\n  processSteps,\n  onEdit,\n  onDelete,\n  onDeleteStep,\n}) => {\n  const [stepsState, setStepsState] = useState({});\n\n  useEffect(() => {\n    const initialStepsState = processTypes.reduce((acc, type) => {\n      acc[type.id] = processSteps\n        .filter((step) => {\n          const stepTypes = Array.isArray(step.process_type) ? step.process_type : [step.process_type];\n          return stepTypes.includes(type.id);\n        })\n        .sort((a, b) => (a.step_order[type.id] || 0) - (b.step_order[type.id] || 0));\n      return acc;\n    }, {});\n    console.log('initialStepsState:', initialStepsState);\n    setStepsState(initialStepsState);\n  }, [processTypes, processSteps]);\n\n  const handleDragStart = (event, typeId, stepId) => {\n    event.dataTransfer.setData('typeId', typeId.toString());\n    event.dataTransfer.setData('stepId', stepId.toString());\n  };\n\n  const handleDrop = async (event, dropIndex, typeId) => {\n    event.preventDefault();\n    const draggedTypeId = event.dataTransfer.getData('typeId');\n    const draggedStepId = event.dataTransfer.getData('stepId');\n\n    if (!stepsState[draggedTypeId]) {\n        console.error(`Steps for typeId ${draggedTypeId} not found.`);\n        return;\n    }\n\n    const updatedSteps = [...stepsState[draggedTypeId]];\n    const draggedStepIndex = updatedSteps.findIndex(step => step.id === parseInt(draggedStepId, 10));\n    const [draggedStep] = updatedSteps.splice(draggedStepIndex, 1);\n    updatedSteps.splice(dropIndex, 0, draggedStep);\n\n    setStepsState(prevState => ({\n        ...prevState,\n        [draggedTypeId]: updatedSteps,\n    }));\n\n    try {\n        // Atualize a nova ordem no banco de dados\n        await Promise.all(updatedSteps.map((step, index) => {\n            const stepOrder = { ...step.step_order, [typeId]: index };\n            return apiFetch({\n                path: `/wp/v2/process_step/${step.id}`,\n                method: 'PUT',\n                data: { step_order: stepOrder },\n            });\n        }));\n        console.log('Ordem das etapas atualizada no banco de dados');\n    } catch (error) {\n        console.error('Erro ao salvar a ordem das etapas:', error);\n    }\n};\n\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n  };\n\n\nreturn (\n    <Panel>\n      <PanelHeader>Existing Process Types</PanelHeader>\n      <PanelRow>\n        {processTypes.length > 0 ? (\n          <div className=\"card-container\">\n            {processTypes.map((type) => {\n              const steps = stepsState[type.id] || [];\n\n              return (\n                <Card key={type.id}>\n                  <CardHeader>\n                    <h4 className=\"card-title\">{type.title.rendered}</h4>\n                  </CardHeader>\n                  <CardBody>\n                    <dl className=\"description-list\">\n                      <div className=\"list-item\">\n                        <dt>Description:</dt>\n                        <dd>\n                          {type.description ? type.description.split('\\n').map((item, key) => (\n                            <span key={key}>{item}<br /></span>\n                          )) : \"-\"}\n                        </dd>\n                      </div>\n                    </dl>\n\n                    <p className={type.accept_attachments ? \"check true\" : \"check false\"}>\n                      {!type.accept_attachments && (\n                        <span className=\"visually-hidden\">Not</span>\n                      )}{\" \"}\n                      Accept attachments\n                    </p>\n                    <p className={type.accept_tainacan_items ? \"check true\" : \"check false\"}>\n                      {!type.accept_tainacan_items && (\n                        <span className=\"visually-hidden\">Not</span>\n                      )}{\" \"}\n                      Accept Tainacan items\n                    </p>\n                    <p className={type.generate_tainacan_items ? \"check true\" : \"check false\"}>\n                      {!type.generate_tainacan_items && (\n                        <span className=\"visually-hidden\">Not</span>\n                      )}{\" \"}\n                      Generate Tainacan items\n                    </p>\n\n                    {steps.length > 0 && (\n                      <>\n                        <hr />\n                        <h5>Steps</h5>\n                        <ol className=\"list-group\">\n                          {steps.map((step, index) => (\n                            <li\n                              key={`${step.id}-${index}`}\n                              className=\"list-group-item\"\n                              id={`step-${step.id}-${index}`}\n                              draggable=\"true\"\n                              onDragOver={handleDragOver}\n                              onDrop={(event) => handleDrop(event, index, type.id)}\n                              onDragStart={(event) => handleDragStart(event, type.id, step.id)}\n                            >\n                              {step.title.rendered}\n                              <Tooltip text=\"Delete Step\">\n                                <Button\n                                  isDestructive\n                                  icon={<Icon icon={trash} />}\n                                  onClick={() => onDeleteStep(step.id, type.id)}\n                                />\n                              </Tooltip>\n                            </li>\n                          ))}\n                        </ol>\n                      </>\n                    )}\n                  </CardBody>\n                  <CardFooter>\n                    <Tooltip text=\"Edit\">\n                      <Button\n                        icon={<Icon icon={edit} />}\n                        onClick={() => onEdit(type)}\n                      />\n                    </Tooltip>\n                    <Tooltip text=\"Delete\">\n                      <Button\n                        icon={<Icon icon={trash} />}\n                        onClick={() => onDelete(type.id)}\n                      />\n                    </Tooltip>\n                  </CardFooter>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <Notice isDismissible={false} status=\"warning\">No existing process types.</Notice>\n        )}\n      </PanelRow>\n    </Panel>\n  );\n  \n};\n\nexport default ProcessTypeList;\n","import { useState, useEffect } from 'react';\nimport { Spinner, Notice, Panel, PanelHeader, PanelBody, PanelRow } from '@wordpress/components';\nimport apiFetch from '@wordpress/api-fetch';\n\nconst ProcessViewer = () => {\n    const [process, setProcess] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [processTypes, setProcessTypes] = useState([]);\n    const [processSteps, setProcessSteps] = useState([]);\n\n    const getProcessIdFromUrl = () => {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get('process_id');\n    };\n\n    useEffect(() => {\n        const processId = getProcessIdFromUrl();\n        if (processId) {\n            fetchProcess(processId);\n            fetchProcessTypes();\n            fetchProcessSteps();\n        } else {\n            setError('No process ID found in the URL.');\n            setIsLoading(false);\n        }\n    }, []);\n\n    const fetchProcess = (processId) => {\n        setIsLoading(true);\n        apiFetch({ path: `/wp/v2/process_obatala/${processId}?_embed` })\n            .then(data => {\n                setProcess(data);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process:', error);\n                setError('Error fetching process details.');\n                setIsLoading(false);\n            });\n    };\n\n    const fetchProcessTypes = () => {\n        setIsLoading(true);\n        apiFetch({ path: `/wp/v2/process_type?per_page=100&_embed` })\n            .then(data => {\n                setProcessTypes(data);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process types:', error);\n                setIsLoading(false);\n            });\n    };\n\n    const fetchProcessSteps = () => {\n        setIsLoading(true);\n        apiFetch({ path: `/wp/v2/process_step?per_page=100&_embed` })\n            .then(data => {\n                setProcessSteps(data);\n                setIsLoading(false);\n            })\n            .catch(error => {\n                console.error('Error fetching process steps:', error);\n                setIsLoading(false);\n            });\n    };\n\n    if (isLoading) {\n        return <Spinner />;\n    }\n\n    if (error) {\n        return <Notice status=\"error\" isDismissible={false}>{error}</Notice>;\n    }\n\n    if (!process) {\n        return <Notice status=\"warning\" isDismissible={false}>No process found.</Notice>;\n    }\n\n    // Filtrar as etapas pelo tipo de processo atual\n    const filteredSteps = processSteps\n    .filter(step => {\n        const stepProcessTypes = Array.isArray(step.process_type) ? step.process_type.map(Number) : [];\n        // Verifica se a etapa pertence ao tipo de processo atual\n        return stepProcessTypes.includes(Number(process.process_type));\n    })\n    .sort((a, b) => {\n        // Obtém o índice do tipo de processo atual\n        const currentProcessTypeId = process.process_type;\n        const indexA = a.step_order[currentProcessTypeId] || 0;\n        const indexB = b.step_order[currentProcessTypeId] || 0;\n\n        return indexA - indexB;\n      });\n\n    console.log('Process Type ID:', Number(process.process_type));\n    console.log('Filtered Steps:', filteredSteps);\n\n\n    return (\n        <div>\n            <span className=\"brand\"><strong>Obatala</strong> Curatorial Process Viewer</span>\n            <h2>{process.process_type ? 'Process type title' : ''}: {process.title.rendered}</h2>\n            <div className=\"badge-container\">\n                <span className=\"badge success\">{process.status}</span>\n                <span className=\"badge\">Current step</span>\n            </div>\n\n            <div className=\"panel-container\">\n                <main className=\"counter-container\">\n                    {filteredSteps.length > 0 ? (\n                        filteredSteps.map((step, index) => (\n                            <Panel key={step.id} className=\"counter-item\">\n                                <PanelHeader>{step.title.rendered}<span className=\"badge success\">Completed</span><small>Completed at 21/04/2024 by João Silva</small></PanelHeader>\n                                <PanelBody title=\"History\" initialOpen={false}>\n                                    <PanelRow>\n                                        {/* Renderizar histórico aqui, se houver */}\n                                    </PanelRow>\n                                </PanelBody>\n                                <PanelBody title=\"Comments\" initialOpen={false}>\n                                    <PanelRow>\n                                        {/* Renderizar comentários aqui, se houver */}\n                                    </PanelRow>\n                                </PanelBody>\n                            </Panel>\n                        ))\n                    ) : (\n                        <Notice status=\"warning\" isDismissible={false}>No steps found for this process type.</Notice>\n                    )}\n                </main>\n            </div>\n        </div>\n    );\n};\n\nexport default ProcessViewer;\n","export const initialState = {\n    isOpen: false, \n    deleteProcessType: null,\n    deleteStep: null, \n};\n \nfunction Reducer(state = initialState, action) {\n    switch (action.type) {\n      case 'OPEN_MODAL_PROCESS_TYPE':\n        return { ...state, isOpen: true, deleteProcessType: action.payload };\n      case 'OPEN_MODAL_STEP':\n        return { ...state, isOpen: true, deleteStep: action.payload };\n      case 'CLOSE_MODAL':\n        return { ...state, isOpen: false, deleteProcessType: null, deleteStep: null };\n      default:\n        return state;\n    }\n}\n \nexport default Reducer;","module.exports = window[\"React\"];","module.exports = window[\"ReactJSXRuntime\"];","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"primitives\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './admin/App';"],"names":["render","ProcessManager","ProcessTypeManager","ProcessStepManager","ProcessViewer","jsx","_jsx","navigateToProcessViewer","processId","window","location","href","document","addEventListener","processElement","getElementById","processTypeElement","processStepElement","processViewerElement","onSelectProcess","useState","useEffect","Spinner","Button","SelectControl","TextControl","Notice","Panel","PanelHeader","PanelRow","apiFetch","jsxs","_jsxs","processTypes","setProcessTypes","processes","setProcesses","isLoading","setIsLoading","newProcessTitle","setNewProcessTitle","newProcessType","setNewProcessType","selectedProcessId","setSelectedProcessId","fetchProcessTypes","fetchProcesses","path","then","data","sortedProcessType","sort","a","b","title","rendered","localeCompare","catch","error","console","log","handleCreateProcess","alert","newProcess","status","type","process_type","current_stage","method","savedProcess","handleSelectProcess","children","className","length","map","process","processTypeFiltered","find","processType","id","isSecondary","onClick","isDismissible","label","value","onChange","options","isPrimary","React","useReducer","PanelBody","Icon","Modal","DatePicker","RadioControl","__experimentalConfirmDialog","ConfirmDialog","edit","trash","MediaUpload","MediaUploadCheck","Reducer","initialState","processSteps","setProcessSteps","editingStep","setEditingStep","notice","setNotice","state","dispatch","newStepTitle","setNewStepTitle","newStepType","setNewStepType","dynamicFields","setDynamicFields","name","editableFieldIndex","setEditableFieldIndex","fetchProcessSteps","sortedSteps","handleSaveStep","message","requestData","updatedStep","updatedProcessSteps","step","stepId","savedStep","metaData","field","key","getDefaultFieldValue","saveMetadata","handleEditStep","currentTitle","handleDeleteProcessStep","stepProcessTypes","Array","isArray","hasLinkedProcesses","allProcesses","some","includes","Number","filter","handleConfirmDeleteStep","payload","handleCancel","Promise","resolve","reject","action","step_id","meta_data","response","success","handleDynamicFieldChange","index","updatedFields","handleAddField","handleRemoveField","_","idx","startEditFieldName","finishEditFieldName","newName","isOpen","onConfirm","deleteStep","onCancel","deleteProcessType","icon","onRemove","isDestructive","e","target","onBlur","autoFocus","onRequestClose","ProcessTypeForm","ProcessTypeList","ProcessStepForm","editingProcessType","setEditingProcessType","sortedProcessTypes","handleSaveProcessType","savedProcessType","updatedProcessTypes","handleDeleteProcessType","handleEditProcessType","handleAddProcessStep","steps","forEach","existingStep","existing","currentProcessTypes","updatedProcessStep","prevProcessSteps","s","handleUpdatedProcessStep","typeId","handleConfirmDeleteType","onEdit","onDelete","onDeleteStep","onSave","onAddStep","ComboboxControl","closeSmall","selectedProcessType","setSelectedProcessType","selectedSteps","setSelectedSteps","stepInputValue","setStepInputValue","handleAddStep","stepsToAdd","stepTitle","handleChange","handleRemoveStep","initialOpen","onInputChange","TextareaControl","CheckboxControl","Fragment","_Fragment","processTypeName","setProcessTypeName","processTypeDescription","setProcessTypeDescription","acceptAttachments","setAcceptAttachments","acceptTainacanItems","setAcceptTainacanItems","generateTainacanItems","setGenerateTainacanItems","_editingProcessType$a","_editingProcessType$a2","_editingProcessType$g","description","accept_attachments","accept_tainacan_items","generate_tainacan_items","handleSave","handleResetForm","checked","Tooltip","Card","CardBody","CardHeader","CardFooter","Draggable","stepsState","setStepsState","initialStepsState","reduce","acc","stepTypes","step_order","handleDragStart","event","dataTransfer","setData","toString","handleDrop","dropIndex","preventDefault","draggedTypeId","getData","draggedStepId","updatedSteps","draggedStepIndex","findIndex","parseInt","draggedStep","splice","prevState","all","stepOrder","handleDragOver","split","item","draggable","onDragOver","onDrop","onDragStart","text","setProcess","setError","getProcessIdFromUrl","urlParams","URLSearchParams","search","get","fetchProcess","filteredSteps","currentProcessTypeId","indexA","indexB"],"sourceRoot":""}