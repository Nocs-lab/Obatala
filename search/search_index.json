{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documenta\u00e7\u00e3o do Plugin","text":""},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O plugin foi desenvolvido para gerenciar funcionalidades administrativas e de interface dentro da plataforma WordPress. Este documento detalha as classes principais que comp\u00f5em o sistema, como <code>AdminMenu</code>, <code>Enqueuer</code> e <code>SettingsPage</code>, explicando suas responsabilidades e intera\u00e7\u00f5es.</p>"},{"location":"#conceitos-envolvidos","title":"Conceitos Envolvidos","text":""},{"location":"#gerenciamento-de-menus-administrativos","title":"Gerenciamento de Menus Administrativos","text":"<p>A classe <code>AdminMenu</code> \u00e9 respons\u00e1vel por gerenciar a adi\u00e7\u00e3o de menus no painel administrativo do WordPress. Estes menus permitem que os administradores acessem p\u00e1ginas de configura\u00e7\u00e3o e funcionalidades espec\u00edficas do plugin.</p>"},{"location":"#enfileiramento-de-scripts-e-estilos","title":"Enfileiramento de Scripts e Estilos","text":"<p>A classe <code>Enqueuer</code> lida com o enfileiramento de scripts e estilos (JavaScript e CSS) necess\u00e1rios para o funcionamento correto do plugin tanto no front-end quanto no back-end.</p>"},{"location":"#paginas-de-configuracao","title":"P\u00e1ginas de Configura\u00e7\u00e3o","text":"<p>A classe <code>SettingsPage</code> \u00e9 respons\u00e1vel por criar e gerenciar as p\u00e1ginas de configura\u00e7\u00e3o do plugin dentro do painel administrativo, onde o usu\u00e1rio pode ajustar as op\u00e7\u00f5es e salvar suas prefer\u00eancias.</p>"},{"location":"#diagrama-de-classes","title":"Diagrama de Classes","text":"<pre><code>classDiagram\n    class AdminMenu {\n        +init() void\n        +add_admin_pages() void\n        +render_main_page() void\n        +render_page() void\n        +enqueue_scripts() void\n        -pages array\n    }\n\n    class Enqueuer {\n        +init() void\n        +enqueue_admin_scripts(hook) void\n        -pages array\n    }\n\n    class SettingsPage {\n        +register_settings() void\n        +create_settings_page() void\n        +some_setting_field_render() void\n        +enable_feature_field_render() void\n        +api_key_field_render() void\n        -some_setting string\n        -enable_feature bool\n        -api_key string\n    }\n\n    AdminMenu --&gt; SettingsPage : registra e exibe\n    Enqueuer --&gt; AdminMenu : enfileira scripts/estilos\n    SettingsPage --&gt; AdminMenu : renderiza configura\u00e7\u00e3o</code></pre>"},{"location":"#explicacao-do-diagrama-de-classes","title":"Explica\u00e7\u00e3o do Diagrama de Classes","text":"<p>O diagrama de classes acima representa as principais intera\u00e7\u00f5es entre as classes <code>AdminMenu</code>, <code>Enqueuer</code> e <code>SettingsPage</code>.</p> <ul> <li>AdminMenu: Gerencia a adi\u00e7\u00e3o de menus e submenus no painel administrativo do WordPress.</li> <li>Enqueuer: Respons\u00e1vel por carregar os scripts e estilos necess\u00e1rios para a interface do plugin.</li> <li>SettingsPage: Cria e gerencia as p\u00e1ginas de configura\u00e7\u00e3o no painel administrativo, sendo associada diretamente ao menu gerido pela <code>AdminMenu</code>.</li> </ul>"},{"location":"#descricao-das-classes","title":"Descri\u00e7\u00e3o das Classes","text":""},{"location":"#adminmenu","title":"AdminMenu","text":"<p>Classe respons\u00e1vel por gerenciar os menus administrativos do plugin Obatala no WordPress.</p>"},{"location":"#funcao","title":"Fun\u00e7\u00e3o","text":"<p>Gerencia o menu principal e os submenus, criando p\u00e1ginas de administra\u00e7\u00e3o para o plugin Obatala no WordPress.</p>"},{"location":"#responsabilidades","title":"Responsabilidades","text":"<ul> <li> <p>init()   M\u00e9todo de inicializa\u00e7\u00e3o principal que adiciona as a\u00e7\u00f5es para registrar as p\u00e1ginas de administra\u00e7\u00e3o (<code>add_admin_pages</code>) e enfileirar scripts (<code>enqueue_scripts</code>) no painel do WordPress.</p> </li> <li> <p>add_admin_pages()   Adiciona a p\u00e1gina principal e submenus ao painel administrativo. Utiliza o array <code>self::$pages</code> para definir as configura\u00e7\u00f5es de cada item de menu.</p> </li> <li> <p>Menu Principal: Cria o menu principal usando as configura\u00e7\u00f5es do array <code>self::$pages['main']</code>, incluindo t\u00edtulo, permiss\u00e3o, \u00edcone e posi\u00e7\u00e3o.</p> </li> <li> <p>Submenus: Adiciona submenus ao menu principal com as configura\u00e7\u00f5es de <code>self::$pages['submenus']</code>, permitindo definir permiss\u00f5es e callbacks espec\u00edficos.</p> </li> <li> <p>render_main_page()   Exibe a p\u00e1gina principal do menu Obatala. Apresenta uma mensagem de boas-vindas e orienta o usu\u00e1rio a selecionar uma op\u00e7\u00e3o do submenu.   Inclui um estilo CSS inline para ocultar submenus espec\u00edficos no menu lateral.</p> </li> <li> <p>render_page()   Renderiza uma p\u00e1gina de administra\u00e7\u00e3o com base no ID da p\u00e1gina atual. Verifica o ID da tela atual e exibe uma div correspondente ao submenu ativo.</p> </li> <li> <p>enqueue_scripts()   Enfileira os scripts e estilos necess\u00e1rios para o funcionamento do menu de administra\u00e7\u00e3o. Adiciona um estilo CSS para garantir que o menu principal e submenus estejam sempre vis\u00edveis ao serem selecionados.</p> </li> </ul>"},{"location":"#estrutura-do-menu","title":"Estrutura do Menu","text":"<p>A estrutura do menu \u00e9 configurada no atributo <code>self::$pages</code> da classe <code>AdminMenu</code>, conforme o exemplo a seguir:</p> <pre><code>&lt;?php\n  private static $pages = [\n      'main' =&gt; [\n          'title' =&gt; 'Obatala',\n          'menu_title' =&gt; 'Obatala',\n          'capability' =&gt; 'manage_options',\n          'slug' =&gt; 'obatala-main',\n          'callback' =&gt; 'render_main_page',\n          'icon' =&gt; 'dashicons-admin-site',\n          'position' =&gt; 2\n      ],\n      'submenus' =&gt; [\n          [\n              'parent_slug' =&gt; 'obatala-main',\n              'title' =&gt; 'Process Manager',\n              'menu_title' =&gt; 'Process Manager',\n              'capability' =&gt; 'manage_options',\n              'slug' =&gt; 'process-manager',\n              'callback' =&gt; 'render_page',\n              'show_in_menu' =&gt; true\n          ],\n          [\n              'parent_slug' =&gt; 'obatala-main',\n              'title' =&gt; 'Process Viewer',\n              'menu_title' =&gt; 'Process Viewer',\n              'capability' =&gt; 'read',\n              'slug' =&gt; 'process-viewer',\n              'callback' =&gt; 'render_page',\n              'show_in_menu' =&gt; true\n          ],\n      ]\n  ];\n?&gt;\n</code></pre>"},{"location":"#enqueuer","title":"Enqueuer","text":"<p>Classe respons\u00e1vel por gerenciar o enfileiramento de scripts e estilos no painel administrativo do plugin Obatala no WordPress.</p>"},{"location":"#funcao_1","title":"Fun\u00e7\u00e3o","text":"<p>Enfileira os scripts e estilos necess\u00e1rios para as p\u00e1ginas de administra\u00e7\u00e3o espec\u00edficas do plugin Obatala, garantindo que recursos como JavaScript e CSS estejam dispon\u00edveis quando o usu\u00e1rio acessa as p\u00e1ginas administrativas.</p>"},{"location":"#responsabilidades_1","title":"Responsabilidades","text":"<ul> <li> <p>init()   M\u00e9todo de inicializa\u00e7\u00e3o principal que adiciona uma a\u00e7\u00e3o para enfileirar scripts (<code>enqueue_admin_scripts</code>) no painel administrativo do WordPress.</p> </li> <li> <p>enqueue_admin_scripts($hook)   Enfileira os scripts e estilos necess\u00e1rios para as p\u00e1ginas administrativas espec\u00edficas do plugin. Este m\u00e9todo verifica se o <code>$hook</code> atual corresponde a uma das p\u00e1ginas definidas em <code>self::$pages</code>.   Quando uma correspond\u00eancia \u00e9 encontrada, s\u00e3o registrados e enfileirados:</p> </li> <li> <p>Script Principal do Plugin: Carrega o JavaScript do plugin a partir do arquivo <code>build/index.js</code>, utilizando as depend\u00eancias e vers\u00e3o especificadas no arquivo <code>index.asset.php</code>.</p> </li> <li> <p>Estilo Principal do Plugin: Carrega o arquivo CSS principal do plugin (<code>css/style.css</code>) para estilizar as p\u00e1ginas administrativas.</p> </li> <li> <p>Estilo React Flow: Enfileira o estilo do React Flow (<code>css/react-flow.css</code>) para garantir a correta renderiza\u00e7\u00e3o de componentes interativos no plugin.</p> </li> </ul>"},{"location":"#estrutura-das-paginas","title":"Estrutura das P\u00e1ginas","text":"<p>A lista de p\u00e1ginas \u00e9 armazenada no atributo <code>self::$pages</code>, que define os identificadores de p\u00e1ginas espec\u00edficas para o enfileiramento de recursos.</p> <pre><code>&lt;?php\n  private static $pages = [\n      'obatala_page_process-manager' =&gt; 'process-manager',\n      'obatala_page_process-type-manager' =&gt; 'process-type-manager',\n      'obatala_page_process-viewer' =&gt; 'process-viewer',\n      'obatala_page_process-step-manager' =&gt; 'process-step-manager',\n      'obatala_page_process-type-editor' =&gt; 'process-type-editor',\n      'obatala_page_sector_manager' =&gt; 'sector_manager'\n  ];\n?&gt;\n</code></pre>"},{"location":"#classe-settingspage","title":"Classe SettingsPage","text":"<p>A classe <code>SettingsPage</code> \u00e9 respons\u00e1vel por registrar e renderizar as configura\u00e7\u00f5es personalizadas para o plugin Obatala no painel administrativo do WordPress.</p>"},{"location":"#funcao_2","title":"Fun\u00e7\u00e3o","text":"<p>Esta classe facilita a cria\u00e7\u00e3o de uma p\u00e1gina de configura\u00e7\u00f5es com campos personalizados, como caixas de texto e checkbox, permitindo que o administrador configure o plugin diretamente pelo painel de administra\u00e7\u00e3o do WordPress.</p>"},{"location":"#responsabilidades_2","title":"Responsabilidades","text":"<ul> <li> <p>register_settings()   Registra os campos de configura\u00e7\u00e3o, agrupando-os em uma se\u00e7\u00e3o e adicionando os campos individuais.</p> </li> <li> <p>some_setting_field_render()    Renderiza um campo de texto some_setting para ajustes espec\u00edficos.</p> </li> <li> <p>enable_feature_field_render()   Renderiza um checkbox enable_feature para ativar ou desativar uma funcionalidade.</p> </li> <li> <p>api_key_field_render()   Renderiza o campo api_key, permitindo ao administrador inserir uma chave de API.</p> </li> <li> <p>create_settings_page()   Gera a interface da p\u00e1gina de configura\u00e7\u00f5es, exibindo o formul\u00e1rio de submiss\u00e3o.</p> </li> </ul>"},{"location":"#estrutura-do-codigo","title":"Estrutura do C\u00f3digo","text":"<p>Abaixo est\u00e3o exemplos do c\u00f3digo que comp\u00f5e cada campo de configura\u00e7\u00e3o:</p>"},{"location":"#estrutura-de-registro","title":"Estrutura de Registro","text":"<pre><code>&lt;?php\n  register_setting('obatala_settings_group', 'some_setting');\n  register_setting('obatala_settings_group', 'enable_feature');\n  register_setting('obatala_settings_group', 'api_key');\n?&gt;\n</code></pre>"},{"location":"#consideracoes-finais","title":"Considera\u00e7\u00f5es Finais","text":"<p>Esta documenta\u00e7\u00e3o detalha a estrutura b\u00e1sica do plugin, explicando como as classes interagem para fornecer funcionalidades administrativas no WordPress. O uso de namespaces e o enfileiramento adequado de scripts garantem que o plugin opere de forma eficiente e compat\u00edvel com o ambiente do WordPress.</p>"},{"location":"gutenberg/","title":"Criando uma P\u00e1gina no Painel de Administra\u00e7\u00e3o com Blocos Gutenberg","text":"<p>Este guia fornece uma vis\u00e3o clara e concisa sobre como criar uma p\u00e1gina no painel de administra\u00e7\u00e3o do WordPress utilizando blocos Gutenberg, permitindo a cria\u00e7\u00e3o de interfaces interativas e din\u00e2micas com React no WordPress.</p> <p>Nota</p> <p>Para mais detalhes sobre o uso de Gutenberg e uma lista completa de blocos reutiliz\u00e1veis, visite: The WordPress Gutenberg.</p>"},{"location":"gutenberg/#passo-1-enfileiramento-de-scripts","title":"Passo 1: Enfileiramento de Scripts","text":"<p>No arquivo principal <code>obatala.php</code>, enfileiramos os scripts necess\u00e1rios para carregar a interface React no painel de administra\u00e7\u00e3o:</p> <pre><code>&lt;?php\n    public function admin_enqueue_scripts( $hook ) {\n        \\Obatala\\Admin\\Enqueuer::enqueue_admin_scripts( $hook );\n    }\n?&gt;\n</code></pre>"},{"location":"gutenberg/#passo-2-registro-das-paginas-de-administracao","title":"Passo 2: Registro das P\u00e1ginas de Administra\u00e7\u00e3o","text":"<p>Na classe <code>AdminMenu</code>, registramos as p\u00e1ginas de administra\u00e7\u00e3o. Cada p\u00e1gina \u00e9 associada a um callback que imprime uma <code>div</code> com um ID espec\u00edfico. Este ID \u00e9 usado posteriormente para renderizar o corpo da p\u00e1gina com React.</p> <pre><code>&lt;?php\n    namespace Obatala\\Admin;\n\n    class AdminMenu {\n        public static function add_admin_pages() {\n            add_menu_page(\n                __('Exemplo', 'obatala'),\n                __('Exemplo', 'obatala'),\n                'manage_options',\n                'exemplo',\n                [self::class, 'funcao_exemplo'],\n                'dashicons-admin-generic',\n                8\n            );\n        }\n        public static function funcao_exemplo() {\n            echo '&lt;div id=\"id-exemplo\"&gt;&lt;/div&gt;';\n        }\n    }\n?&gt;\n</code></pre>"},{"location":"gutenberg/#passo-3-enfileiramento-condicional-de-scripts","title":"Passo 3: Enfileiramento Condicional de Scripts","text":"<p>A classe <code>Enqueuer</code> verifica se o hook da p\u00e1gina atual corresponde a um dos hooks esperados. Se sim, os scripts JavaScript e estilos CSS s\u00e3o carregados na p\u00e1gina.</p> <pre><code>&lt;?php\n    namespace Obatala\\Admin;\n\n    class Enqueuer {\n        private static $pages = [\n            'toplevel_page_exemplo' =&gt; 'exemplo',\n        ];\n\n        public static function enqueue_admin_scripts($hook) {\n            if (array_key_exists($hook, self::$pages)) {\n                $asset_file = include OBATALA_PLUGIN_DIR . 'build/index.asset.php';\n\n                wp_register_script(\n                    'obatala-admin-scripts',\n                    OBATALA_PLUGIN_URL . 'build/index.js',\n                    $asset_file['dependencies'],\n                    $asset_file['version'],\n                    true\n                );\n                wp_enqueue_script('obatala-admin-scripts');\n\n                wp_register_style(\n                    'obatala-admin-styles',\n                    OBATALA_PLUGIN_URL . 'css/style.css',\n                    ['wp-components'],\n                    $asset_file['version']\n                );\n                wp_enqueue_style('obatala-admin-styles');\n            }\n        }\n    }\n?&gt;\n</code></pre>"},{"location":"gutenberg/#passo-4-renderizacao-com-react","title":"Passo 4: Renderiza\u00e7\u00e3o com React","text":"<p>No arquivo <code>src/admin/App.js</code>, utilizamos o React para renderizar componentes nas p\u00e1ginas de administra\u00e7\u00e3o do WordPress. A fun\u00e7\u00e3o <code>render</code> do React \u00e9 chamada para cada <code>div</code> com um ID correspondente.</p> <pre><code>import { render } from '@wordpress/element';\nimport Exemplo from './components/Exemplo';\n\ndocument.addEventListener('DOMContentLoaded', () =&gt; {\n\n    const exemploElement = document.getElementById('id-exemplo');\n\n    if (exemploElement) {\n        render(&lt;Exemplo /&gt;, exemploElement);\n    }\n});\n</code></pre>"},{"location":"gutenberg/#recursos-adicionais","title":"Recursos Adicionais","text":"<p>Nota</p> <ul> <li>Para uma vis\u00e3o detalhada sobre como utilizar Gutenberg no contexto do nosso plugin, acesse o curso online.</li> <li>Documenta\u00e7\u00e3o completa e lista de blocos reutiliz\u00e1veis est\u00e3o dispon\u00edveis em: The WordPress Gutenberg.</li> </ul>"},{"location":"organizacao/","title":"Organiza\u00e7\u00e3o","text":""},{"location":"organizacao/#estrutura-de-arquivos-do-plugin-obatala","title":"Estrutura de Arquivos do Plugin \"Obatala\"","text":"<p>Este documento descreve a estrutura de arquivos do plugin \"Obatala\", que \u00e9 utilizado para gerenciar processos curatoriais no WordPress. A estrutura \u00e9 organizada de forma a separar claramente a l\u00f3gica de neg\u00f3cios, a interface de administra\u00e7\u00e3o, os templates e outros componentes necess\u00e1rios para o funcionamento do plugin. Al\u00e9m disso, abordaremos a utiliza\u00e7\u00e3o de namespaces e a nomenclatura de arquivos conforme o padr\u00e3o PSR-4.</p>"},{"location":"organizacao/#estrutura-de-arquivos","title":"Estrutura de Arquivos","text":"<pre><code>\u2514\u2500\u2500 \ud83d\udcc1Obatala\n    \u2514\u2500\u2500 \ud83d\udcc1.github\n        \u2514\u2500\u2500 \ud83d\udcc1workflows\n            \u2514\u2500\u2500 release.yml\n            \u2514\u2500\u2500 version.yml\n    \u2514\u2500\u2500 \ud83d\udcc1build\n        \u2514\u2500\u2500 index.asset.php\n        \u2514\u2500\u2500 index.js\n        \u2514\u2500\u2500 index.js.map\n        \u2514\u2500\u2500 style-index-rtl.css\n        \u2514\u2500\u2500 style-index.css\n        \u2514\u2500\u2500 style-index.css.map\n    \u2514\u2500\u2500 \ud83d\udcc1classes\n        \u2514\u2500\u2500 \ud83d\udcc1Admin\n            \u2514\u2500\u2500 AdminMenu.php\n            \u2514\u2500\u2500 Enqueuer.php\n            \u2514\u2500\u2500 SettingsPage.php\n        \u2514\u2500\u2500 \ud83d\udcc1Api\n            \u2514\u2500\u2500 CustomPostTypeApi.php\n            \u2514\u2500\u2500 ObatalaAPI.php\n            \u2514\u2500\u2500 ProcessApi.php\n            \u2514\u2500\u2500 ProcessTypeApi.php\n            \u2514\u2500\u2500 SectorApi.php\n        \u2514\u2500\u2500 \ud83d\udcc1Entities\n            \u2514\u2500\u2500 Process.php\n            \u2514\u2500\u2500 ProcessType.php\n            \u2514\u2500\u2500 Sector.php\n        \u2514\u2500\u2500 \ud83d\udcc1Metadata\n            \u2514\u2500\u2500 ProcessMetadataManager.php\n    \u2514\u2500\u2500 \ud83d\udcc1css\n        \u2514\u2500\u2500 react-flow.css\n        \u2514\u2500\u2500 style.css\n    \u2514\u2500\u2500 \ud83d\udcc1developer\n        \u2514\u2500\u2500 create-zip.js\n        \u2514\u2500\u2500 update-plugin-version.js\n    \u2514\u2500\u2500 \ud83d\udcc1languages\n        \u2514\u2500\u2500 obatala-pt_BR.mo\n        \u2514\u2500\u2500 obatala-pt_BR.po\n        \u2514\u2500\u2500 obatala.pot\n    \u2514\u2500\u2500 \ud83d\udcc1mk-docs\n        \u2514\u2500\u2500 \ud83d\udcc1docs\n            \u2514\u2500\u2500 \ud83d\udcc1metadados\n                \u2514\u2500\u2500 implementacao.md\n                \u2514\u2500\u2500 metadados.md\n            \u2514\u2500\u2500 \ud83d\udcc1modelagem\n                \u2514\u2500\u2500 \ud83d\udcc1classes\n                    \u2514\u2500\u2500 etapa.md\n                    \u2514\u2500\u2500 notificacao.md\n                    \u2514\u2500\u2500 pessoa.md\n                    \u2514\u2500\u2500 processo.md\n                    \u2514\u2500\u2500 setor.md\n                \u2514\u2500\u2500 index.md\n                \u2514\u2500\u2500 processos.md\n            \u2514\u2500\u2500 \ud83d\udcc1roadmap\n                \u2514\u2500\u2500 sprint-1.md\n                \u2514\u2500\u2500 sprint-2.md\n                \u2514\u2500\u2500 sprint-3.md\n                \u2514\u2500\u2500 sprint-4.md\n                \u2514\u2500\u2500 sprint-5.md\n                \u2514\u2500\u2500 sprint-6.md\n                \u2514\u2500\u2500 stories.md\n            \u2514\u2500\u2500 \ud83d\udcc1stylesheets\n                \u2514\u2500\u2500 extra.css\n            \u2514\u2500\u2500 \ud83d\udcc1tutoriais\n                \u2514\u2500\u2500 guia-dev.md\n            \u2514\u2500\u2500 gutenberg.md\n            \u2514\u2500\u2500 index.md\n            \u2514\u2500\u2500 organizacao.md\n            \u2514\u2500\u2500 posts-customizados.md\n        \u2514\u2500\u2500 mkdocs.yml\n        \u2514\u2500\u2500 requirements.txt\n    \u2514\u2500\u2500 \ud83d\udcc1src\n        \u2514\u2500\u2500 \ud83d\udcc1admin\n            \u2514\u2500\u2500 \ud83d\udcc1api\n                \u2514\u2500\u2500 apiRequests.js\n            \u2514\u2500\u2500 \ud83d\udcc1components\n                \u2514\u2500\u2500 \ud83d\udcc1FlowEditor\n                    \u2514\u2500\u2500 \ud83d\udcc1components\n                        \u2514\u2500\u2500 \ud83d\udcc1dragables\n                            \u2514\u2500\u2500 DragAndDropList.js\n                            \u2514\u2500\u2500 SortableField.js\n                        \u2514\u2500\u2500 \ud83d\udcc1inputControls\n                            \u2514\u2500\u2500 DatePickerControls.js\n                            \u2514\u2500\u2500 FileUploadControls.js\n                            \u2514\u2500\u2500 LabelWithIcon.js\n                            \u2514\u2500\u2500 NumberFieldControls.js\n                            \u2514\u2500\u2500 SelectRadioControls.js\n                            \u2514\u2500\u2500 TainacanSearch.js\n                            \u2514\u2500\u2500 TextFieldControls.js\n                        \u2514\u2500\u2500 \ud83d\udcc1reactFlow\n                            \u2514\u2500\u2500 CustomEdge.js\n                            \u2514\u2500\u2500 FlowButtons.js\n                            \u2514\u2500\u2500 NodeContent.js\n                            \u2514\u2500\u2500 NodeHandle.js\n                        \u2514\u2500\u2500 FieldComponents.js\n                        \u2514\u2500\u2500 SlidingDrawer.js\n                    \u2514\u2500\u2500 \ud83d\udcc1context\n                        \u2514\u2500\u2500 DrawerContext.js\n                        \u2514\u2500\u2500 FlowContext.js\n                    \u2514\u2500\u2500 \ud83d\udcc1helpers\n                        \u2514\u2500\u2500 dataValidator.js\n                    \u2514\u2500\u2500 mockdata.js\n                    \u2514\u2500\u2500 ProcessFlow.js\n                \u2514\u2500\u2500 \ud83d\udcc1ProcessManager\n                    \u2514\u2500\u2500 CommentForm.js\n                    \u2514\u2500\u2500 MetaFieldInputs.js\n                    \u2514\u2500\u2500 MetroNavigation.js\n                    \u2514\u2500\u2500 ProcessCreator.js\n                    \u2514\u2500\u2500 ProcessStage.js\n                \u2514\u2500\u2500 \ud83d\udcc1ProcessTypeManager\n                    \u2514\u2500\u2500 ProcessTypeForm.js\n                    \u2514\u2500\u2500 ProcessTypeList.js\n                \u2514\u2500\u2500 \ud83d\udcc1SectorManager\n                    \u2514\u2500\u2500 SectorCreator.js\n                    \u2514\u2500\u2500 SectorList.js\n                \u2514\u2500\u2500 \ud83d\udcc1Tainacan\n                    \u2514\u2500\u2500 \ud83d\udcc1TainacanSearch\n                        \u2514\u2500\u2500 CollectionCard.js\n                        \u2514\u2500\u2500 ItemCard.js\n                    \u2514\u2500\u2500 TainacanSearch.js\n                \u2514\u2500\u2500 ProcessManager.js\n                \u2514\u2500\u2500 ProcessModelEditor.js\n                \u2514\u2500\u2500 ProcessTypeManager.js\n                \u2514\u2500\u2500 ProcessViewer.js\n                \u2514\u2500\u2500 SectorManager.js\n            \u2514\u2500\u2500 \ud83d\udcc1redux\n                \u2514\u2500\u2500 reducer.js\n            \u2514\u2500\u2500 App.js\n        \u2514\u2500\u2500 index.js\n    \u2514\u2500\u2500 \ud83d\udcc1vendor\n        \u2514\u2500\u2500 \ud83d\udcc1composer\n            \u2514\u2500\u2500 autoload_classmap.php\n            \u2514\u2500\u2500 autoload_namespaces.php\n            \u2514\u2500\u2500 autoload_psr4.php\n            \u2514\u2500\u2500 autoload_real.php\n            \u2514\u2500\u2500 autoload_static.php\n            \u2514\u2500\u2500 ClassLoader.php\n            \u2514\u2500\u2500 installed.json\n            \u2514\u2500\u2500 installed.php\n            \u2514\u2500\u2500 InstalledVersions.php\n            \u2514\u2500\u2500 LICENSE\n        \u2514\u2500\u2500 autoload.php\n    \u2514\u2500\u2500 \ud83d\udcc1view\n        \u2514\u2500\u2500 archive-obatala_steps.php\n        \u2514\u2500\u2500 archive-process_obatala.php\n        \u2514\u2500\u2500 single-obatala_steps.php\n        \u2514\u2500\u2500 single-process_obatala.php\n    \u2514\u2500\u2500 .gitignore\n    \u2514\u2500\u2500 composer.json\n    \u2514\u2500\u2500 obatala.php\n    \u2514\u2500\u2500 package-lock.json\n    \u2514\u2500\u2500 package.json\n    \u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"organizacao/#descricao-dos-arquivos-e-diretorios","title":"Descri\u00e7\u00e3o dos Arquivos e Diret\u00f3rios","text":""},{"location":"organizacao/#githubworkflows","title":"\ud83d\udcc1 .github/workflows","text":"<p>Cont\u00e9m os workflows do GitHub Actions para automa\u00e7\u00e3o de tarefas no projeto.</p> <ul> <li>release.yml: Configura a automa\u00e7\u00e3o para criar uma nova vers\u00e3o.</li> <li>version.yml: Gerencia o versionamento do projeto.</li> </ul>"},{"location":"organizacao/#classes","title":"\ud83d\udcc1 classes","text":""},{"location":"organizacao/#admin","title":"\ud83d\udcc1 Admin","text":"<p>Classes para gerenciamento administrativo do plugin.</p> <ul> <li>AdminMenu.php: Gerencia o menu administrativo do WordPress.</li> <li>Enqueuer.php: Controla a adi\u00e7\u00e3o de scripts e estilos no painel.</li> <li>SettingsPage.php: Define a p\u00e1gina de configura\u00e7\u00f5es do plugin.</li> </ul>"},{"location":"organizacao/#api","title":"\ud83d\udcc1 Api","text":"<p>Classes de API para interagir com diferentes endpoints.</p> <ul> <li>CustomPostTypeApi.php: API para o registro de tipos de post personalizados.</li> <li>ObatalaAPI.php: Gerencia as integra\u00e7\u00f5es de API principais.</li> <li>ProcessApi.php, ProcessTypeApi.php, SectorApi.php: APIs para opera\u00e7\u00f5es espec\u00edficas de processos, tipos de processo e setores.</li> </ul>"},{"location":"organizacao/#entities","title":"\ud83d\udcc1 Entities","text":"<p>Define entidades principais.</p> <ul> <li>Process.php: Define a entidade <code>Processo</code>.</li> <li>ProcessType.php: Define a entidade <code>Tipo de Processo</code>.</li> <li>Sector.php: Define a entidade <code>Setor</code>.</li> </ul>"},{"location":"organizacao/#metadata","title":"\ud83d\udcc1 Metadata","text":"<ul> <li> <p>ProcessMetadataManager.php: Gerencia metadados de processos.</p> </li> <li> <p>create-zip.js: Cria um arquivo ZIP do plugin para distribui\u00e7\u00e3o.</p> </li> <li>update-plugin-version.js: Atualiza a vers\u00e3o do plugin.</li> </ul>"},{"location":"organizacao/#src","title":"\ud83d\udcc1 src","text":""},{"location":"organizacao/#admin_1","title":"\ud83d\udcc1 admin","text":""},{"location":"organizacao/#api_1","title":"\ud83d\udcc1 api","text":"<ul> <li>apiRequests.js: Fun\u00e7\u00f5es para chamadas de API.</li> </ul>"},{"location":"organizacao/#components","title":"\ud83d\udcc1 components","text":""},{"location":"organizacao/#floweditor","title":"\ud83d\udcc1 FlowEditor","text":"<p>Editor de fluxo para o projeto.</p> <ul> <li>dragables: Componentes para arrastar e soltar, como <code>DragAndDropList.js</code>.</li> <li>inputControls: Controles personalizados de input, como <code>DatePickerControls.js</code>.</li> <li>reactFlow: Componentes de fluxo, incluindo <code>CustomEdge.js</code>, <code>NodeContent.js</code>.</li> </ul>"},{"location":"organizacao/#processmanager","title":"\ud83d\udcc1 ProcessManager","text":"<p>Gerenciamento de processos.</p> <ul> <li>Inclui <code>CommentForm.js</code>, <code>ProcessCreator.js</code>, entre outros.</li> </ul>"},{"location":"organizacao/#processtypemanager","title":"\ud83d\udcc1 ProcessTypeManager","text":"<p>Gerenciamento de tipos de processo.</p> <ul> <li>ProcessTypeForm.js, ProcessTypeList.js: Formul\u00e1rios e listas.</li> </ul>"},{"location":"organizacao/#sectormanager","title":"\ud83d\udcc1 SectorManager","text":"<p>Gerenciamento de setores.</p> <ul> <li>SectorCreator.js, SectorList.js.</li> </ul>"},{"location":"organizacao/#tainacan","title":"\ud83d\udcc1 Tainacan","text":"<p>Componentes de integra\u00e7\u00e3o com o Tainacan.</p> <ul> <li>TainacanSearch: Componente de busca Tainacan.</li> <li>CollectionCard.js e ItemCard.js: Cards para cole\u00e7\u00f5es e itens.</li> </ul>"},{"location":"organizacao/#redux","title":"\ud83d\udcc1 redux","text":"<ul> <li> <p>reducer.js: Gerenciamento do estado do Redux.</p> </li> <li> <p>App.js: Ponto de entrada do aplicativo.</p> </li> </ul>"},{"location":"organizacao/#arquivos-raiz","title":"Arquivos Raiz","text":"<ul> <li>.gitignore: Define arquivos ignorados pelo Git.</li> <li>composer.json: Configura\u00e7\u00e3o do Composer.</li> <li>obatala.php: Arquivo principal do plugin.</li> <li>package-lock.json e package.json: Configura\u00e7\u00e3o de depend\u00eancias NPM.</li> <li>README.md: Documenta\u00e7\u00e3o inicial do projeto.</li> </ul>"},{"location":"organizacao/#utilizacao-de-namespaces-e-nomenclatura-de-arquivos","title":"Utiliza\u00e7\u00e3o de Namespaces e Nomenclatura de Arquivos","text":""},{"location":"organizacao/#padrao-psr-4","title":"Padr\u00e3o PSR-4","text":"<p>O padr\u00e3o PSR-4 \u00e9 uma recomenda\u00e7\u00e3o de autoloading para interoperabilidade de c\u00f3digo PHP. Ele especifica uma maneira de mapear namespaces de classes diretamente para a estrutura de diret\u00f3rios, facilitando a organiza\u00e7\u00e3o e o carregamento autom\u00e1tico de classes.</p>"},{"location":"organizacao/#namespaces","title":"Namespaces","text":"<p>Namespaces s\u00e3o uma maneira de encapsular itens (como classes, interfaces e fun\u00e7\u00f5es) para evitar conflitos de nome e organizar o c\u00f3digo de forma hier\u00e1rquica. No PSR-4, os namespaces s\u00e3o mapeados para diret\u00f3rios espec\u00edficos.</p>"},{"location":"organizacao/#nomenclatura-de-arquivos","title":"Nomenclatura de Arquivos","text":"<ul> <li>Estrutura do Namespace: O namespace de uma classe deve corresponder ao caminho do diret\u00f3rio a partir do diret\u00f3rio base especificado no <code>composer.json</code>.</li> <li>Nomes de Arquivos: O nome do arquivo deve corresponder exatamente ao nome da classe, incluindo mai\u00fasculas e min\u00fasculas, e ter a extens\u00e3o <code>.php</code>.</li> </ul>"},{"location":"organizacao/#exemplo","title":"Exemplo","text":"<p>Para uma classe <code>AdminMenu</code> localizada em <code>classes/admin/AdminMenu.php</code>:</p> <ol> <li>Namespace: O namespace pode ser <code>Obatala\\Admin</code>.</li> <li> <p>Declara\u00e7\u00e3o da Classe:    <pre><code>&lt;?php\n namespace Obatala\\Admin;\n\n class AdminMenu {\n     // Conte\u00fado da classe\n }\n?&gt;\n</code></pre></p> </li> <li> <p>Configura\u00e7\u00e3o no <code>composer.json</code>:    <pre><code>{\n    \"autoload\": {\n        \"psr-4\": {\n            \"Obatala\\\\\": \"classes/\"\n        }\n    }\n}\n</code></pre></p> </li> </ol> <p>Com essa configura\u00e7\u00e3o, o Composer pode carregar automaticamente a classe <code>AdminMenu</code> a partir do arquivo <code>classes/admin/AdminMenu.php</code>.</p>"},{"location":"organizacao/#conclusao","title":"Conclus\u00e3o","text":"<p>Este documento apresentou uma vis\u00e3o detalhada da estrutura de arquivos do plugin \"Obatala\" e explicou como usar namespaces e a nomenclatura de arquivos conforme o padr\u00e3o PSR-4 para organizar o c\u00f3digo de forma eficiente e evitar conflitos de nome. Seguir essas pr\u00e1ticas ajuda a manter o c\u00f3digo limpo, modular e f\u00e1cil de manter.</p>"},{"location":"posts-customizados/","title":"Utiliza\u00e7\u00e3o dos Custom Post Types no Plugin Obatala","text":"<p>No plugin Obatala, utilizamos tr\u00eas tipos de post personalizados (Custom Post Types) para gerenciar processos curatoriais e suas etapas: ProcessManager, ProcessTypeManager e ProcessModel. Cada tipo de post tem um papel espec\u00edfico na configura\u00e7\u00e3o e opera\u00e7\u00e3o do sistema de gest\u00e3o de processos.</p>"},{"location":"posts-customizados/#descricao-dos-custom-post-types","title":"Descri\u00e7\u00e3o dos Custom Post Types","text":""},{"location":"posts-customizados/#1-processmodel","title":"1. ProcessModel","text":"<ul> <li>Fun\u00e7\u00e3o: Serve como modelo para as etapas de um processo.</li> <li>Utiliza\u00e7\u00e3o: Armazena os metadados usados para criar campos personalizados em cada etapa. Esses campos s\u00e3o exibidos na interface do processo para intera\u00e7\u00e3o dos usu\u00e1rios.</li> <li>Estrutura: Inclui campos para o t\u00edtulo e a descri\u00e7\u00e3o de cada etapa, al\u00e9m dos dados de fluxo (<code>flowData</code>), que especificam a sequ\u00eancia e conex\u00e3o entre as etapas.</li> </ul>"},{"location":"posts-customizados/#2-processtypemanager","title":"2. ProcessTypeManager","text":"<ul> <li>Fun\u00e7\u00e3o: Define o modelo ou tipo de processo.</li> <li>Utiliza\u00e7\u00e3o: Armazena o t\u00edtulo do tipo de processo, a descri\u00e7\u00e3o e uma lista ordenada de etapas (steps) que comp\u00f5em o processo. Esse tipo permite gerenciar diferentes modelos de processos, cada um com suas etapas espec\u00edficas.</li> <li>Estrutura: Cont\u00e9m campos para o t\u00edtulo e a descri\u00e7\u00e3o do processo, al\u00e9m de uma refer\u00eancia \u00e0s etapas (<code>ProcessModel</code>) que definem a sequ\u00eancia do processo.</li> </ul>"},{"location":"posts-customizados/#3-processmanager","title":"3. ProcessManager","text":"<ul> <li>Fun\u00e7\u00e3o: Representa a inst\u00e2ncia real de um processo no sistema.</li> <li>Utiliza\u00e7\u00e3o: Quando um novo processo \u00e9 criado, ele \u00e9 baseado em um tipo (<code>ProcessTypeManager</code>). Durante a cria\u00e7\u00e3o, ele consulta o <code>ProcessTypeManager</code> e o <code>ProcessModel</code> associado para gravar os metadados necess\u00e1rios. Esses metadados s\u00e3o usados para criar e interagir com o processo.</li> <li>Estrutura: Inclui campos para o t\u00edtulo e descri\u00e7\u00e3o do processo, o tipo de processo, as etapas e os metadados necess\u00e1rios para a intera\u00e7\u00e3o.</li> </ul>"},{"location":"posts-customizados/#fluxo-de-trabalho-dos-custom-post-types","title":"Fluxo de Trabalho dos Custom Post Types","text":"<ol> <li> <p>Defini\u00e7\u00e3o dos Modelos:          </p> <ul> <li>Cria-se um <code>ProcessModel</code> para cada etapa que pode fazer parte de um processo.</li> <li>Define-se os metadados que descrevem os campos personalizados a serem exibidos na interface do processo.</li> </ul> </li> <li> <p>Cria\u00e7\u00e3o do Tipo de Processo:     </p> <ul> <li>Cria-se um <code>ProcessTypeManager</code> para definir um modelo de processo.</li> <li>Inclui-se uma lista ordenada de <code>ProcessModel</code>, especificando a sequ\u00eancia de etapas que o processo seguir\u00e1.</li> </ul> </li> <li> <p>Instancia\u00e7\u00e3o de um Processo:       </p> <ul> <li>Cria-se um <code>ProcessManager</code> baseado em um <code>ProcessTypeManager</code>.</li> <li>O <code>ProcessManager</code> consulta o <code>ProcessTypeManager</code> e as etapas no <code>ProcessModel</code> associado para configurar os metadados e campos personalizados.</li> <li>Esses metadados s\u00e3o gravados no <code>ProcessManager</code> para criar uma interface interativa onde os usu\u00e1rios podem gerenciar e interagir com cada etapa.</li> </ul> </li> </ol>"},{"location":"posts-customizados/#diagrama-do-processo","title":"Diagrama do Processo","text":"<pre><code>classDiagram\n    class ProcessModel {\n        +String nome\n        +String descricao\n        +List~Metadados~ metadados\n    }\n\n    class ProcessTypeManager {\n        +String nome\n        +String descricao\n        +List~ProcessModel~ etapas\n    }\n\n    class ProcessManager {\n        +String nome\n        +String descricao\n        +ProcessTypeManager tipo\n        +List~ProcessModel~ etapas\n        +List~Metadados~ metadados\n    }\n\n    ProcessTypeManager \"1\" -- \"*\" ProcessModel : inclui\n    ProcessManager \"1\" -- \"*\" ProcessModel : consulta e inclui\n    ProcessManager \"1\" -- \"1\" ProcessTypeManager : \u00e9 baseado em\n    ProcessModel \"1\" -- \"*\" Metadados : define\n    ProcessManager \"1\" -- \"*\" Metadados : utiliza</code></pre>"},{"location":"posts-customizados/#conclusao","title":"Conclus\u00e3o","text":"<p>O plugin Obatala utiliza uma estrutura organizada de Custom Post Types para gerenciar processos curatoriais, etapas e tipos de processos. Essa abordagem permite uma configura\u00e7\u00e3o flex\u00edvel e a integra\u00e7\u00e3o de metadados personalizados, facilitando a cria\u00e7\u00e3o de interfaces interativas para a gest\u00e3o de processos dentro do WordPress.</p>"},{"location":"metadados/implementacao/","title":"Implementa\u00e7\u00e3o de Metadados Din\u00e2micos","text":""},{"location":"metadados/implementacao/#arquivos-e-classes","title":"Arquivos e Classes","text":"<pre><code>classDiagram\n    MetadataHandler --&gt; ProcessMetadataManager\n\n    class MetadataHandler {\n        +handle_save_metadata()\n        +handle_get_metadata()\n        +handle_delete_metadata()\n        +handle_save_step_data()\n    }\n\n    class ProcessMetadataManager {\n        +save_metadata(step_id, meta_value, meta_key)\n        +save_step_data(step_id, process_id)\n        +get_metadata(step_id)\n        +delete_metadata(step_id, meta_key)\n        +render_input_field(type, args)\n        +sanitize_metadata(meta_data)\n        +validate_metadata(meta_data)\n    }</code></pre>"},{"location":"metadados/implementacao/#processmetadatamanagerphp","title":"ProcessMetadataManager.php","text":"<p>Esta classe \u00e9 respons\u00e1vel por gerenciar os metadados din\u00e2micos associados \u00e0s etapas de um processo. Suas principais responsabilidades incluem salvar, recuperar e deletar metadados no banco de dados do WordPress.</p>"},{"location":"metadados/implementacao/#metodos-principais","title":"M\u00e9todos Principais","text":"<ul> <li> <p>save_metadata($step_id, $meta_value, $meta_key): Adiciona ou atualiza um metadado din\u00e2mico para uma etapa espec\u00edfica. Se a chave do metadado n\u00e3o for fornecida, um identificador \u00fanico \u00e9 gerado. O valor do metadado \u00e9 sanitizado e validado antes de ser salvo.</p> </li> <li> <p>save_step_data($step_id, $process_id): Salva os dados dos campos de uma etapa do processo, armazenando todos os metadados associados a esta etapa no post_meta do processo.</p> </li> <li> <p>get_metadata($step_id): Recupera todos os metadados din\u00e2micos associados a uma etapa espec\u00edfica. Retorna um array de metadados filtrados pelo prefixo definido.</p> </li> <li> <p>delete_metadata($step_id, $meta_key): Remove um metadado din\u00e2mico espec\u00edfico de uma etapa, retornando um valor booleano indicando o sucesso ou falha da opera\u00e7\u00e3o.</p> </li> <li> <p>render_input_field($type, $args): Renderiza um campo de input com base no tipo especificado. O tipo de campo \u00e9 adicionado aos argumentos, e os dados do campo s\u00e3o salvos como metadado para uso posterior.</p> </li> <li> <p>sanitize_metadata($meta_data): Sanitiza os dados do metadado, garantindo que os campos como 'type', 'name', 'value', 'label', e 'options' sejam tratados corretamente antes do armazenamento.</p> </li> <li> <p>validate_metadata($meta_data): Valida os dados do metadado, verificando se o campo \"name\" foi fornecido.</p> </li> </ul>"},{"location":"metadados/implementacao/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"metadados/implementacao/#salvar-metadados","title":"Salvar Metadados","text":"<pre><code>&lt;?php\n    ProcessMetadataManager::save_metadata($step_id, $meta_value, $meta_key);\n    Recuperar Metadados:\n?&gt;\n</code></pre>"},{"location":"metadados/implementacao/#recuperar-metadados","title":"Recuperar Metadados","text":"<pre><code>&lt;?php\n    $metadata = ProcessMetadataManager::get_metadata($step_id);\n?&gt;\n</code></pre>"},{"location":"metadados/implementacao/#deletar-metadados","title":"Deletar Metadados","text":"<pre><code>&lt;?php\n    ProcessMetadataManager::delete_metadata($step_id, $meta_key);\n?&gt;\n</code></pre>"},{"location":"metadados/implementacao/#salvar-dados-da-etapa","title":"Salvar Dados da Etapa:","text":"<pre><code>&lt;?php\n    ProcessMetadataManager::save_step_data($step_id, $process_id);\n?&gt;\n</code></pre>"},{"location":"metadados/implementacao/#renderizar-um-campo-de-input","title":"Renderizar um Campo de Input","text":"<pre><code>&lt;?php\n    ProcessMetadataManager::render_input_field('text', ['step_id' =&gt; $step_id, 'name' =&gt; 'campo_exemplo', 'label' =&gt; 'Campo de Exemplo']);\n?&gt;\n</code></pre>"},{"location":"metadados/implementacao/#conclusao","title":"Conclus\u00e3o","text":"<p>\u00c9 importante garantir que os IDs das etapas sejam v\u00e1lidos e que os dados a serem salvos sejam sanitizados e validados para evitar problemas de seguran\u00e7a e integridade de dados. A classe utiliza fun\u00e7\u00f5es nativas do WordPress para manipula\u00e7\u00e3o de metadados, garantindo uma integra\u00e7\u00e3o adequada com a base de dados.</p>"},{"location":"metadados/metadados/","title":"Metadados Din\u00e2micos para Gest\u00e3o de Processos no Plugin Obatala","text":""},{"location":"metadados/metadados/#atencao","title":"Aten\u00e7\u00e3o","text":"<p>Os snippets de c\u00f3digo neste documento s\u00e3o apenas modelos ilustrativos.</p> <p>O plugin Obatala permite a cria\u00e7\u00e3o e o gerenciamento de processos curatoriais no WordPress, utilizando metadados din\u00e2micos para atender \u00e0s necessidades espec\u00edficas de cada etapa. Esta documenta\u00e7\u00e3o detalha como implementar e utilizar esses metadados dentro das interfaces de processos e etapas.</p>"},{"location":"metadados/metadados/#conceito-de-metadados-dinamicos","title":"Conceito de Metadados Din\u00e2micos","text":"<p>Os metadados din\u00e2micos no Obatala s\u00e3o dados adicionais associados a cada etapa de um processo, armazenados como <code>post_meta</code> no WordPress. Esses metadados representam campos de formul\u00e1rio que podem ser configurados dinamicamente.</p>"},{"location":"metadados/metadados/#exemplo-de-metadado-dinamico-estrutura-do-flowdata","title":"Exemplo de Metadado Din\u00e2mico: Estrutura do <code>flowData</code>","text":"<p>O <code>flowData</code> \u00e9 uma estrutura que organiza as etapas de um processo e seus campos personalizados. Veja um exemplo de como o <code>flowData</code> \u00e9 estruturado:</p> <pre><code>&lt;?php\n    flowData = [\n        [\n            'nodes' =&gt; [\n                [\n                    'id' =&gt; 'Etapa 1',\n                    'type' =&gt; 'customNode',\n                    'dragHandle' =&gt; '.custom-drag-handle',\n                    'position' =&gt; ['x' =&gt; 50, 'y' =&gt; 50],\n                    'data' =&gt; [\n                        'fields' =&gt; [\n                            [\n                                'id' =&gt; 'text-1',\n                                'type' =&gt; 'text',\n                                'title' =&gt; 'Campo sem t\u00edtulo',\n                                'config' =&gt; [\n                                    'label' =&gt; 'Campo sem t\u00edtulo',\n                                    'placeholder' =&gt; 'adds shine',\n                                    'required' =&gt; false,\n                                    'minLength' =&gt; '10',\n                                    'maxLength' =&gt; 100,\n                                    'pattern' =&gt; '',\n                                    'helpText' =&gt; 'adds shine adds shine adds shine adds shine',\n                                ],\n                            ],\n                        ],\n                        'stageName' =&gt; 'Etapa 1',\n                    ],\n                    'measured' =&gt; ['width' =&gt; 200, 'height' =&gt; 133],\n                    'selected' =&gt; true,\n                ],\n            ],\n            'edges' =&gt; [],\n        ],\n    ];\n?&gt;\n</code></pre>"},{"location":"metadados/metadados/#componentes-do-flowdata","title":"Componentes do flowData","text":"<ul> <li>nodes: Cont\u00e9m as etapas do processo, onde cada etapa inclui informa\u00e7\u00f5es espec\u00edficas:</li> <li>id: Identificador \u00fanico da etapa, como Etapa 1.</li> <li>type: Tipo do n\u00f3, definido como <code>customNode</code>.</li> <li>dragHandle: Classe CSS usada para arrastar o n\u00f3.</li> <li>position: Coordenadas de posi\u00e7\u00e3o (x, y) da etapa na interface.</li> <li>data: Dados da etapa, incluindo:<ul> <li>fields: Campos personalizados da etapa, cada um com:</li> <li>id: Identificador \u00fanico do campo, ex.: text-1.</li> <li>type: Tipo do campo, como text.</li> <li>title: T\u00edtulo do campo.</li> <li>config: Configura\u00e7\u00f5es do campo, com propriedades como <code>label</code>, <code>placeholder</code>, <code>required</code>, <code>minLength</code>, <code>maxLength</code>, <code>pattern</code>, e <code>helpText</code>.</li> <li>stageName: Nome da etapa, como Etapa 1.</li> </ul> </li> <li>measured: Dimens\u00f5es da etapa (largura e altura) para a renderiza\u00e7\u00e3o.</li> <li>selected: Indica se a etapa est\u00e1 selecionada (booleano).</li> <li>edges: Define conex\u00f5es entre etapas, permitindo representar visualmente o fluxo entre elas. Neste exemplo, est\u00e1 vazio.</li> </ul>"},{"location":"metadados/metadados/#implementacao-de-metadados-dinamicos","title":"Implementa\u00e7\u00e3o de Metadados Din\u00e2micos","text":""},{"location":"metadados/metadados/#criando-metadados-dinamicos-nas-etapas","title":"Criando Metadados Din\u00e2micos nas Etapas","text":"<p>Nas etapas (ProcessModel), os metadados configurados s\u00e3o utilizados como modelos para os campos exibidos no processo.</p>"},{"location":"metadados/metadados/#interface-para-adicionar-metadados-dinamicos","title":"Interface para Adicionar Metadados Din\u00e2micos","text":"<p>A interface de administra\u00e7\u00e3o do WordPress permite aos usu\u00e1rios adicionar e configurar metadados din\u00e2micos para cada etapa, usando uma interface em React.</p> <pre><code>import React, { useState } from 'react';\n\nfunction DynamicFieldConfigurator() {\n    const [fields, setFields] = useState([]);\n\n    const addField = (type) =&gt; {\n        const newField = {\n            id: Date.now(),\n            type: type,\n            placeholder: \"\",\n            name: \"\",\n            label: \"\",\n            value: \"\",\n        };\n        setFields([...fields, newField]);\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;button onClick={() =&gt; addField('text')}&gt;Adicionar Campo de Texto&lt;/button&gt;\n            &lt;button onClick={() =&gt; addField('number')}&gt;Adicionar Campo Num\u00e9rico&lt;/button&gt;\n            &lt;div&gt;\n                {fields.map(field =&gt; (\n                    &lt;div key={field.id}&gt;\n                        &lt;label&gt;{field.label}&lt;/label&gt;\n                        &lt;input \n                            type={field.type} \n                            placeholder={field.placeholder} \n                            name={field.name} \n                            value={field.value} \n                            onChange={(e) =&gt; {\n                                field.value = e.target.value;\n                                setFields([...fields]);\n                            }}\n                        /&gt;\n                    &lt;/div&gt;\n                ))}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"metadados/metadados/#armazenando-metadados-como-post_meta","title":"Armazenando Metadados como post_meta","text":"<p>Ap\u00f3s configurar os metadados, eles s\u00e3o salvos no WordPress como <code>post_meta</code>. Cada campo \u00e9 armazenado com uma chave \u00fanica que combina o tipo e o identificador do campo.</p> <pre><code>&lt;?php\n    function save_dynamic_fields($post_id, $fields) {\n        foreach ($fields as $field) {\n            $meta_key = \"{$field['type']}_{$field['id']}\";\n            update_post_meta($post_id, $meta_key, json_encode($field));\n        }\n    }\n?&gt;\n</code></pre>"},{"location":"metadados/metadados/#exibindo-metadados-dinamicos-na-interface-de-gestao-de-processos","title":"Exibindo Metadados Din\u00e2micos na Interface de Gest\u00e3o de Processos","text":"<p>Na interface de gest\u00e3o de processos, os campos din\u00e2micos definidos nos metadados s\u00e3o renderizados conforme as configura\u00e7\u00f5es.</p> <pre><code>import React from 'react';\n\nfunction DynamicFieldRenderer({ fields }) {\n    return (\n        &lt;div&gt;\n            {fields.map(field =&gt; (\n                &lt;div key={field.id}&gt;\n                    &lt;label&gt;{field.label}&lt;/label&gt;\n                    &lt;input \n                        type={field.type} \n                        placeholder={field.placeholder} \n                        name={field.name} \n                        value={field.value} \n                        onChange={(e) =&gt; {\n                            field.value = e.target.value;\n                        }}\n                    /&gt;\n                &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"metadados/metadados/#fluxo-de-trabalho-para-metadados-dinamicos","title":"Fluxo de Trabalho para Metadados Din\u00e2micos","text":"<ol> <li>Configura\u00e7\u00e3o de Metadados nas Etapas: O usu\u00e1rio define campos personalizados atrav\u00e9s da interface de configura\u00e7\u00e3o na etapa.</li> <li>Armazenamento de Metadados: Os campos configurados s\u00e3o salvos como <code>post_meta</code>.</li> <li>Renderiza\u00e7\u00e3o de Campos no Processo: Durante a execu\u00e7\u00e3o do processo, os campos din\u00e2micos s\u00e3o renderizados na interface.</li> <li>Salvamento de Dados do Processo: Os valores preenchidos s\u00e3o armazenados como <code>post_meta</code>.</li> </ol>"},{"location":"metadados/metadados/#diagrama-do-processo-de-metadados-dinamicos","title":"Diagrama do Processo de Metadados Din\u00e2micos","text":"<pre><code>classDiagram\n    class Processo {\n        +String nome\n        +Date data\n        +String descricao\n        +List~Etapa~ etapas\n        +String status\n        +Date prazo\n        +List~Metadado~ metadados\n        +List~Arquivo~ arquivos\n    }\n\n    class Etapa {\n        +String nome\n        +String descricao\n        +List~Metadado~ metadados\n        +List~Pessoa~ pessoas\n        +List~Comentario~ comentarios\n        +List~Arquivo~ arquivos\n        +List~Notificacao~ notificacoes\n        +String status\n        +Date prazo\n        +Setor setor\n    }\n\n    class Metadado {\n        +String tipo\n        +String placeholder\n        +String nome\n        +String label\n        +String value\n    }\n\n    Processo \"1\" -- \"*\" Etapa : cont\u00e9m\n    Etapa \"1\" -- \"*\" Metadado : define\n    Processo \"1\" -- \"*\" Metadado : utiliza</code></pre>"},{"location":"metadados/metadados/#conclusao","title":"Conclus\u00e3o","text":"<p>Os metadados din\u00e2micos no plugin Obatala oferecem flexibilidade para a configura\u00e7\u00e3o de processos curatoriais, permitindo a cria\u00e7\u00e3o e personaliza\u00e7\u00e3o de campos conforme a necessidade de cada etapa. A estrutura flowData organiza visualmente o processo e simplifica a intera\u00e7\u00e3o do usu\u00e1rio com o sistema, melhorando a gest\u00e3o de dados curatoriais.</p>"},{"location":"modelagem/","title":"Este reposit\u00f3rio","text":""},{"location":"modelagem/processos/","title":"Vis\u00e3o geral do processo","text":"<p>Este documento descreve a modelagem de um processo como uma entidade dentro do WordPress, esta \u00e9 a modelagem inicial do processo dentro do sistema e serve como base para ter um entendimento desta entidade, e como modelar ela dentro do sistema, os m\u00e9todos aqui descritos ser\u00e3o ampliados e trabalhados conforme o desenvolvimento do plugin tomar forma. </p> <p>Nota</p> <p>Manteremos esta documenta\u00e7\u00e3o como est\u00e1 por ter sido aceita como a primeira modelagem de um processo v\u00e1lida.</p>"},{"location":"modelagem/processos/#entidade-processo","title":"Entidade: Processo","text":""},{"location":"modelagem/processos/#propriedades-do-processo","title":"Propriedades do Processo:","text":"<ol> <li> <p>Nome (Title) </p> <ul> <li>Identifica\u00e7\u00e3o \u00fanica do processo.</li> </ul> </li> <li> <p>Data (Date)</p> <ul> <li>Data de cria\u00e7\u00e3o ou in\u00edcio do processo.</li> </ul> </li> <li> <p>Conte\u00fado (Content)</p> <ul> <li>Descri\u00e7\u00e3o detalhada do processo.</li> </ul> </li> <li> <p>Etapas (Steps)</p> <ul> <li>Fases ou passos do processo, incluindo coment\u00e1rios, setores, pessoas, status, itens, cole\u00e7\u00f5es e notifica\u00e7\u00f5es associadas.</li> </ul> </li> <li> <p>Status</p> <ul> <li>Estado atual do processo (ex: Iniciado, Em Progresso, Conclu\u00eddo).</li> </ul> </li> <li> <p>Prazo (Deadline)</p> <ul> <li>Data limite para a conclus\u00e3o do processo/etapa.</li> </ul> </li> <li> <p>Notifica\u00e7\u00f5es (Notifications)</p> <ul> <li>Alertas ou avisos relacionados ao processo.</li> </ul> </li> <li> <p>Pessoas (People)</p> <ul> <li>Usu\u00e1rios ou grupos de usu\u00e1rios envolvidos no processo.</li> </ul> </li> <li> <p>Arquivos (Attachments)         - Documentos ou arquivos relacionados ao processo.</p> </li> </ol>"},{"location":"modelagem/processos/#estrutura-do-processo","title":"Estrutura do Processo","text":"<pre><code>classDiagram\n    class Processo{\n        +String nome\n        +Date data\n        +String conteudo\n        +List&lt;Etapa&gt; etapas\n        +String status\n        +Date prazo\n        +List&lt;Notificacao&gt; notificacoes\n        +List&lt;Arquivo&gt; arquivos\n    }\n\n    class Setor {\n        +String nome\n    }\n\n    class Colecao {\n        +String nome\n        +TaincanID\n        +List Itens\n    }\n\n    class Item {\n        +String nome\n        +TaincanID\n    }\n\n    class Etapa {\n        +String nome\n        +List&lt;Comentario&gt; comentarios\n        +List&lt;Setor&gt; setores\n        +Date prazo\n        +List&lt;Pessoa&gt; pessoas\n        +String status\n    }\n\n    class Notificacao {\n        +String mensagem\n        +Date dataEnvio\n    }\n\n    class Pessoa {\n        +String nome\n        +String email\n    }\n\n    class Arquivo {\n        +String nome\n        +String url\n        +String autor\n        +String etapa\n    }\n\n    class Comentario {\n        +String nome\n        +String url\n    }\n\n    Etapa \"*\" -- \"1\" Setor : pertence a\n    Processo \"1\" -- \"*\" Item : interage com\n    Processo \"1\" -- \"*\" Colecao : interage com\n    Colecao \"1\" -- \"*\" Item : possui\n    Etapa \"1\" -- \"*\" Pessoa : envolvido\n    Etapa \"1\" -- \"*\" Comentario : possui\n    Etapa \"1\" -- \"*\" Notificacao : dispara\n    Etapa \"1\" -- \"*\" Arquivo : anexa\n    Pessoa \"1\" -- \"*\"  Setor: pertence a\n    Processo \"1\" -- \"*\" Etapa : cont\u00e9m\n    Processo \"1\" -- \"*\" Notificacao : possui\n    Processo \"1\" -- \"*\" Arquivo : possui</code></pre>"},{"location":"modelagem/processos/#sequencia-do-processo","title":"Sequ\u00eancia do Processo","text":"<pre><code>sequenceDiagram\n    participant Usu\u00e1rio\n    participant Sistema\n    participant Notifica\u00e7\u00e3o\n    participant Tainacan\n\n    Usu\u00e1rio-&gt;&gt;Sistema: Criar Processo\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Cria\u00e7\u00e3o\n    Usu\u00e1rio-&gt;&gt;Sistema: Definir Setores e Etapas\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Defini\u00e7\u00e3o\n\n    loop Progresso do Processo\n        Usu\u00e1rio-&gt;&gt;Sistema: Atualizar Etapa e Status\n        Sistema--&gt;&gt;Notifica\u00e7\u00e3o: Disparar Notifica\u00e7\u00e3o\n        Notifica\u00e7\u00e3o--&gt;&gt;Usu\u00e1rio: Receber Notifica\u00e7\u00e3o\n        Usu\u00e1rio-&gt;&gt;Sistema: Adicionar Pessoas e Arquivos\n        Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Adi\u00e7\u00e3o\n        Sistema-&gt;&gt;Tainacan: Adiciona ou recupera Itens/Cole\u00e7\u00f5es\n        Tainacan--&gt;&gt;Sistema: Confirma\u00e7\u00e3o de Adi\u00e7\u00e3o\n        Usu\u00e1rio-&gt;&gt;Sistema: Concluir Etapa\n        Sistema--&gt;&gt;Notifica\u00e7\u00e3o: Disparar Notifica\u00e7\u00e3o\n        Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Conclus\u00e3o\n    end\n\n    Usu\u00e1rio-&gt;&gt;Sistema: Concluir Processo\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Conclus\u00e3o\n    Sistema--&gt;&gt;Notifica\u00e7\u00e3o: Disparar Notifica\u00e7\u00e3o\n    Notifica\u00e7\u00e3o--&gt;&gt;Usu\u00e1rio: Receber Notifica\u00e7\u00e3o</code></pre>"},{"location":"modelagem/processos/#explicacao-dos-diagramas","title":"Explica\u00e7\u00e3o dos Diagramas:","text":"<ol> <li> <p>Estrutura do Processo:</p> <ul> <li>Processo: Entidade principal que representa o processo com suas v\u00e1rias propriedades e associa\u00e7\u00f5es.</li> <li>Setor: Representa os departamentos envolvidos.</li> <li>Etapa: Fases ou passos do processo, incluindo status, setores, pessoas, coment\u00e1rios, e notifica\u00e7\u00f5es.</li> <li>Notifica\u00e7\u00e3o: Mensagens enviadas durante o processo.</li> <li>Pessoa: Usu\u00e1rios ou grupos envolvidos no processo.</li> <li>Arquivo: Documentos relacionados ao processo.</li> <li>Coment\u00e1rio: Observa\u00e7\u00f5es e discuss\u00f5es associadas a cada etapa.</li> </ul> </li> <li> <p>Sequ\u00eancia do Processo:</p> <ul> <li>Usu\u00e1rio cria um processo.</li> <li>Sistema confirma a cria\u00e7\u00e3o do processo.</li> <li>Usu\u00e1rio define os setores e etapas do processo.</li> <li>Sistema confirma a defini\u00e7\u00e3o dos setores e etapas.</li> <li>Usu\u00e1rio adiciona pessoas e arquivos ao processo.</li> <li>Sistema confirma a adi\u00e7\u00e3o.</li> <li>Durante o Progresso do Processo, o Usu\u00e1rio atualiza a etapa e o status, e o Sistema dispara notifica\u00e7\u00f5es.</li> <li>Usu\u00e1rio conclui o processo e o Sistema confirma a conclus\u00e3o.</li> </ul> </li> </ol>"},{"location":"modelagem/classes/etapa/","title":"Etapa","text":""},{"location":"modelagem/classes/etapa/#documento-de-modelagem-de-classe-etapa","title":"Documento de Modelagem de Classe: Etapa","text":""},{"location":"modelagem/classes/etapa/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento descreve a modelagem da classe <code>Etapa</code> dentro do sistema \"Obatala\", que ser\u00e1 utilizado para gerenciar etapas de processos curatoriais no WordPress. A classe <code>Etapa</code> ser\u00e1 um tipo de post customizado, permitindo a cria\u00e7\u00e3o de campos customizados e a integra\u00e7\u00e3o com o gerador de metadados do Tainacan.</p>"},{"location":"modelagem/classes/etapa/#descricao-geral","title":"Descri\u00e7\u00e3o Geral","text":"<p>A classe <code>Etapa</code> representa uma fase ou passo espec\u00edfico dentro de um processo curatorial. Cada <code>Etapa</code> pode incluir setores envolvidos, pessoas associadas, coment\u00e1rios, notifica\u00e7\u00f5es e arquivos anexados. Esta classe ser\u00e1 implementada como um tipo de post customizado, o que permitir\u00e1 a cria\u00e7\u00e3o e o gerenciamento din\u00e2mico de campos customizados utilizando o gerador de metadados do Tainacan.</p>"},{"location":"modelagem/classes/etapa/#nota-importante","title":"Nota Importante","text":"<ul> <li>Coment\u00e1rios: Os coment\u00e1rios ser\u00e3o literalmente <code>wp_comments</code> que ser\u00e3o adicionados ao post da etapa.</li> <li>Arquivos: Os arquivos ser\u00e3o <code>attachments</code> do WordPress associados ao post da etapa.</li> <li>Pessoas: As pessoas ser\u00e3o representadas por usu\u00e1rios do WordPress.</li> <li>Setores: Os setores ser\u00e3o taxonomias associadas ao post da etapa.</li> <li>Status: O status da etapa ser\u00e1 gerenciado como uma taxonomia associada ao post.</li> <li>Relacionamento com Processos: Cada etapa deve ser relacionada a um tipo de processo espec\u00edfico.</li> <li>Metadados: Uma etapa deve conter uma lista de metadados pr\u00e9-configurada e, quando adicionada a um processo, deve exibir esta lista na interface.</li> <li>M\u00e9todo no Processo: Cada processo dever\u00e1 implementar um m\u00e9todo para retornar a lista de etapas e tipos de etapas.</li> </ul>"},{"location":"modelagem/classes/etapa/#propriedades-da-classe","title":"Propriedades da Classe","text":""},{"location":"modelagem/classes/etapa/#1-nome-title","title":"1. Nome (Title)","text":"<ul> <li>Descri\u00e7\u00e3o: Identifica\u00e7\u00e3o \u00fanica da etapa.</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/etapa/#2-prazo-deadline","title":"2. Prazo (Deadline)","text":"<ul> <li>Descri\u00e7\u00e3o: Data limite para a conclus\u00e3o da etapa.</li> <li>Tipo: Date</li> </ul>"},{"location":"modelagem/classes/etapa/#3-status","title":"3. Status","text":"<ul> <li>Descri\u00e7\u00e3o: Estado atual da etapa (ex: Iniciada, Em Progresso, Conclu\u00edda).</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/etapa/#4-comentarios-comments","title":"4. Coment\u00e1rios (Comments)","text":"<ul> <li>Descri\u00e7\u00e3o: Observa\u00e7\u00f5es e discuss\u00f5es associadas \u00e0 etapa.</li> <li>Tipo: Array de objetos <code>Comentario</code></li> </ul>"},{"location":"modelagem/classes/etapa/#5-setores-departments","title":"5. Setores (Departments)","text":"<ul> <li>Descri\u00e7\u00e3o: Departamentos ou setores envolvidos na etapa.</li> <li>Tipo: Array de objetos <code>Setor</code></li> </ul>"},{"location":"modelagem/classes/etapa/#6-pessoas-people","title":"6. Pessoas (People)","text":"<ul> <li>Descri\u00e7\u00e3o: Usu\u00e1rios ou grupos de usu\u00e1rios envolvidos na etapa.</li> <li>Tipo: Array de objetos <code>Pessoa</code></li> </ul>"},{"location":"modelagem/classes/etapa/#7-notificacoes-notifications","title":"7. Notifica\u00e7\u00f5es (Notifications)","text":"<ul> <li>Descri\u00e7\u00e3o: Alertas ou avisos relacionados \u00e0 etapa.</li> <li>Tipo: Array de objetos <code>Notificacao</code></li> </ul>"},{"location":"modelagem/classes/etapa/#8-arquivos-attachments","title":"8. Arquivos (Attachments)","text":"<ul> <li>Descri\u00e7\u00e3o: Documentos ou arquivos relacionados \u00e0 etapa.</li> <li>Tipo: Array de objetos <code>Arquivo</code></li> </ul>"},{"location":"modelagem/classes/etapa/#metodos-da-classe","title":"M\u00e9todos da Classe","text":""},{"location":"modelagem/classes/etapa/#1-adicionarcomentariocomentario-comentario","title":"1. adicionarComentario(Comentario $comentario)","text":"<ul> <li>Descri\u00e7\u00e3o: Adiciona um novo coment\u00e1rio \u00e0 etapa.</li> <li>Par\u00e2metros: <code>Comentario $comentario</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/etapa/#2-adicionarsetorsetor-setor","title":"2. adicionarSetor(Setor $setor)","text":"<ul> <li>Descri\u00e7\u00e3o: Adiciona um novo setor \u00e0 etapa.</li> <li>Par\u00e2metros: <code>Setor $setor</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/etapa/#3-adicionarpessoapessoa-pessoa","title":"3. adicionarPessoa(Pessoa $pessoa)","text":"<ul> <li>Descri\u00e7\u00e3o: Adiciona uma nova pessoa \u00e0 etapa.</li> <li>Par\u00e2metros: <code>Pessoa $pessoa</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/etapa/#4-adicionarnotificacaonotificacao-notificacao","title":"4. adicionarNotificacao(Notificacao $notificacao)","text":"<ul> <li>Descri\u00e7\u00e3o: Adiciona uma nova notifica\u00e7\u00e3o \u00e0 etapa.</li> <li>Par\u00e2metros: <code>Notificacao $notificacao</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/etapa/#5-adicionararquivoarquivo-arquivo","title":"5. adicionarArquivo(Arquivo $arquivo)","text":"<p>Nota</p> <p>Al\u00e9m das capacidades padr\u00e3o dos attachments do WordPress, um arquivo deve conter metadados que indiquem a etapa em que foi adicionado e o respons\u00e1vel pelo upload do arquivo.</p> <ul> <li>Descri\u00e7\u00e3o: Adiciona um novo arquivo \u00e0 etapa.</li> <li>Par\u00e2metros: <code>Arquivo $arquivo</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/etapa/#6-alterarstatusstring-novostatus","title":"6. alterarStatus(String $novoStatus)","text":"<ul> <li>Descri\u00e7\u00e3o: Altera o status da etapa e gera notifica\u00e7\u00f5es para todos os envolvidos na etapa.</li> <li>Par\u00e2metros: <code>String $novoStatus</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/etapa/#diagramas","title":"Diagramas","text":""},{"location":"modelagem/classes/etapa/#diagrama-de-classe","title":"Diagrama de Classe","text":"<pre><code>classDiagram\n    class Collection {\n        +String name\n        +String description\n        +List&lt;Item&gt; items\n        +void addItem(Item item)\n        +void removeItem(Item item)\n    }\n\n    class Processo {\n        +String nome\n        +Date data\n        +String conteudo\n        +List&lt;Etapa&gt; etapas\n        +String status\n        +Date prazo\n        +List&lt;Notificacao&gt; notificacoes\n        +List&lt;Arquivo&gt; arquivos\n        +Integer postTypeID\n        +void adicionarEtapa(Etapa etapa)\n        +void adicionarNotificacao(Notificacao notificacao)\n        +void adicionarArquivo(Arquivo arquivo)\n        +List&lt;Etapa&gt; getEtapas()\n        +List&lt;String&gt; getTiposDeEtapas()\n        +Boolean verificarPermissaoEdicao()\n    }\n\n    class Etapa {\n        +String nome\n        +Date prazo\n        +String status\n        +List&lt;Comentario&gt; comentarios\n        +List&lt;Setor&gt; setores\n        +List&lt;Pessoa&gt; pessoas\n        +List&lt;Notificacao&gt; notificacoes\n        +List&lt;Arquivo&gt; arquivos\n        +Integer postTypeID\n        +void adicionarComentario(Comentario comentario)\n        +void adicionarSetor(Setor setor)\n        +void adicionarPessoa(Pessoa pessoa)\n        +void adicionarNotificacao(Notificacao notificacao)\n        +void adicionarArquivo(Arquivo arquivo)\n        +void alterarStatus(String novoStatus)\n    }\n\n    class Comentario {\n        +String nome\n        +String url\n    }\n\n    class Setor {\n        +String nome\n    }\n\n    class Pessoa {\n        +String nome\n        +String email\n    }\n\n    class Notificacao {\n        +String mensagem\n        +Date dataEnvio\n        +WP_User usuarioDestinatario\n        +String tipoNotificacao\n        +void enviarEmail()\n        +void exibirAlertaPainel()\n        +void limparAlertaPainel()\n        +void gerarNotificacaoStatusAlterado(String novoStatus, List&lt;WP_User&gt; usuariosEnvolvidos)\n    }\n\n    class Arquivo {\n        +String nome\n        +String url\n        +String autor\n        +String etapa\n    }\n\n    Processo &lt;|-- Collection\n    Etapa &lt;|-- Collection\n    Processo \"1\" -- \"*\" Etapa : cont\u00e9m\n    Etapa \"1\" -- \"*\" Comentario : possui\n    Etapa \"1\" -- \"*\" Setor : pertence a\n    Etapa \"1\" -- \"*\" Pessoa : envolvido\n    Etapa \"1\" -- \"*\" Notificacao : dispara\n    Etapa \"1\" -- \"*\" Arquivo : anexa</code></pre>"},{"location":"modelagem/classes/etapa/#explicacao-do-diagrama","title":"Explica\u00e7\u00e3o do Diagrama","text":"<ol> <li> <p>Collection: Representa a cole\u00e7\u00e3o do Tainacan, que pode ser usada para gerenciar itens e metadados dentro do WordPress. Tanto <code>Processo</code> quanto <code>Etapa</code> estendem a classe <code>Collection</code>, o que significa que ambos s\u00e3o tratados como cole\u00e7\u00f5es de itens no Tainacan.</p> </li> <li> <p>Processo: A entidade principal que representa um processo curatorial. Cada processo cont\u00e9m uma lista de etapas, notifica\u00e7\u00f5es, e arquivos. Ele tem m\u00e9todos para adicionar e gerenciar essas entidades, al\u00e9m de m\u00e9todos para retornar a lista de etapas e tipos de etapas.</p> </li> <li> <p>Etapa: Uma fase espec\u00edfica dentro de um processo. Cada etapa pode conter coment\u00e1rios, setores, pessoas, notifica\u00e7\u00f5es e arquivos. Ela tamb\u00e9m estende a classe <code>Collection</code>, permitindo o gerenciamento de metadados e itens como posts do WordPress.</p> </li> <li> <p>Relacionamentos:</p> <ul> <li>Processo cont\u00e9m m\u00faltiplas Etapas.</li> <li>Etapa pode possuir m\u00faltiplos Comentarios, Setores, Pessoas, Notifica\u00e7\u00f5es e Arquivos.</li> </ul> </li> <li> <p>Posts do WordPress: Tanto <code>Processo</code> quanto <code>Etapa</code> s\u00e3o implementados como tipos de post customizados no WordPress, estendendo a funcionalidade padr\u00e3o dos posts por meio das collections do Tainacan.</p> </li> </ol>"},{"location":"modelagem/classes/etapa/#diagrama-de-sequencia","title":"Diagrama de Sequ\u00eancia","text":"<pre><code>sequenceDiagram\n    participant Usu\u00e1rio\n    participant Sistema\n    participant Notifica\u00e7\u00e3o\n\n    Usu\u00e1rio-&gt;&gt;Sistema: Criar Etapa\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Cria\u00e7\u00e3o\n    Usu\u00e1rio-&gt;&gt;Sistema: Definir Setores e Pessoas\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Defini\u00e7\u00e3o\n\n    loop Progresso da Etapa\n        Usu\u00e1rio-&gt;&gt;Sistema: Atualizar Status da Etapa\n        Sistema--&gt;&gt;Notifica\u00e7\u00e3o: Disparar Notifica\u00e7\u00e3o\n        Notifica\u00e7\u00e3o-&gt;&gt;Notifica\u00e7\u00e3o: Para cada usu\u00e1rio envolvido\n        Notifica\u00e7\u00e3o--&gt;&gt;Usu\u00e1rio: Receber Notifica\u00e7\u00e3o\n        Usu\u00e1rio-&gt;&gt;Sistema: Adicionar Coment\u00e1rios e Arquivos\n        Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Adi\u00e7\u00e3o\n    end\n\n    Usu\u00e1rio-&gt;&gt;Sistema: Concluir Etapa\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Conclus\u00e3o\n    Sistema--&gt;&gt;Notifica\u00e7\u00e3o: Disparar Notifica\u00e7\u00e3o\n    Notifica\u00e7\u00e3o--&gt;&gt;Usu\u00e1rio: Receber Notifica\u00e7\u00e3o</code></pre>"},{"location":"modelagem/classes/etapa/#conclusao","title":"Conclus\u00e3o","text":"<p>A classe <code>Etapa</code>, implementada como um tipo de post customizado no WordPress, \u00e9 fundamental para a gest\u00e3o de fases espec\u00edficas dentro de um processo curatorial no sistema \"Obatala\". Este documento apresentou uma vis\u00e3o geral das propriedades e m\u00e9todos da classe, assim como diagramas que explicam sua estrutura e sequ\u00eancia de utiliza\u00e7\u00e3o. A utiliza\u00e7\u00e3o de campos customizados gerados pelo Tainacan permite uma flexibilidade e dinamismo na gest\u00e3o das etapas, garantindo uma integra\u00e7\u00e3o eficiente e detalhada com as funcionalidades avan\u00e7adas do Tainacan.</p> <p>Cada etapa deve ser relacionada a um tipo de processo espec\u00edfico. Uma etapa deve conter uma lista de metadados pr\u00e9-configurada e, quando adicionada a um processo, deve exibir esta lista na interface. Al\u00e9m disso, cada processo dever\u00e1 implementar um m\u00e9todo para retornar a lista de etapas e tipos de etapas.</p>"},{"location":"modelagem/classes/notificacao/","title":"Notificacao","text":""},{"location":"modelagem/classes/notificacao/#documento-de-modelagem-de-classe-notificacao","title":"Documento de Modelagem de Classe: Notifica\u00e7\u00e3o","text":""},{"location":"modelagem/classes/notificacao/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento descreve a modelagem da classe <code>Notifica\u00e7\u00e3o</code> dentro do sistema \"Obatala\", que ser\u00e1 utilizada para gerenciar notifica\u00e7\u00f5es relacionadas \u00e0s etapas de processos curatoriais no WordPress. As notifica\u00e7\u00f5es ser\u00e3o disparadas automaticamente sempre que o status de uma etapa mudar, notificando todos os envolvidos no processo de acordo com seu envolvimento na etapa.</p>"},{"location":"modelagem/classes/notificacao/#descricao-geral","title":"Descri\u00e7\u00e3o Geral","text":"<p>A classe <code>Notifica\u00e7\u00e3o</code> \u00e9 respons\u00e1vel por gerenciar e enviar alertas aos usu\u00e1rios envolvidos em uma etapa de um processo curatorial. As notifica\u00e7\u00f5es ser\u00e3o disparadas por e-mail utilizando o <code>wp-mail</code> e tamb\u00e9m exibidas como alertas no painel do WordPress para os usu\u00e1rios envolvidos na etapa. N\u00e3o ser\u00e1 necess\u00e1rio armazenar um hist\u00f3rico de notifica\u00e7\u00f5es, pois elas ser\u00e3o enviadas por e-mail.</p>"},{"location":"modelagem/classes/notificacao/#propriedades-da-classe","title":"Propriedades da Classe","text":""},{"location":"modelagem/classes/notificacao/#1-mensagem-message","title":"1. Mensagem (Message)","text":"<ul> <li>Descri\u00e7\u00e3o: O conte\u00fado da notifica\u00e7\u00e3o.</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/notificacao/#2-data-de-envio-send-date","title":"2. Data de Envio (Send Date)","text":"<ul> <li>Descri\u00e7\u00e3o: A data e hora em que a notifica\u00e7\u00e3o foi enviada.</li> <li>Tipo: Date</li> </ul>"},{"location":"modelagem/classes/notificacao/#3-usuario-destinatario-recipient-user","title":"3. Usu\u00e1rio Destinat\u00e1rio (Recipient User)","text":"<ul> <li>Descri\u00e7\u00e3o: O usu\u00e1rio que receber\u00e1 a notifica\u00e7\u00e3o.</li> <li>Tipo: Objeto <code>WP_User</code></li> </ul>"},{"location":"modelagem/classes/notificacao/#4-tipo-de-notificacao-notification-type","title":"4. Tipo de Notifica\u00e7\u00e3o (Notification Type)","text":"<ul> <li>Descri\u00e7\u00e3o: O tipo de notifica\u00e7\u00e3o (ex: Status Alterado, Novo Coment\u00e1rio).</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/notificacao/#metodos-da-classe","title":"M\u00e9todos da Classe","text":""},{"location":"modelagem/classes/notificacao/#1-enviaremail","title":"1. enviarEmail()","text":"<ul> <li>Descri\u00e7\u00e3o: Envia a notifica\u00e7\u00e3o por e-mail ao usu\u00e1rio destinat\u00e1rio utilizando <code>wp-mail</code>.</li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/notificacao/#2-exibiralertapainel","title":"2. exibirAlertaPainel()","text":"<ul> <li>Descri\u00e7\u00e3o: Exibe a notifica\u00e7\u00e3o como um alerta no painel do WordPress para o usu\u00e1rio destinat\u00e1rio.</li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/notificacao/#3-limparalertapainel","title":"3. limparAlertaPainel()","text":"<ul> <li>Descri\u00e7\u00e3o: Remove a notifica\u00e7\u00e3o do painel do WordPress.</li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/notificacao/#4-gerarnotificacaostatusalteradostring-novostatus-list-usuariosenvolvidos","title":"4. gerarNotificacaoStatusAlterado(String $novoStatus, List $usuariosEnvolvidos) <ul> <li>Descri\u00e7\u00e3o: Gera uma notifica\u00e7\u00e3o quando o status da etapa \u00e9 alterado.</li> <li>Par\u00e2metros: <ul> <li><code>String $novoStatus</code> - O novo status da etapa.</li> <li><code>List&lt;WP_User&gt; $usuariosEnvolvidos</code> - A lista de usu\u00e1rios envolvidos na etapa.</li> </ul> </li> <li>Retorno: void</li> </ul>","text":""},{"location":"modelagem/classes/notificacao/#diagramas","title":"Diagramas","text":""},{"location":"modelagem/classes/notificacao/#diagrama-de-classe","title":"Diagrama de Classe <pre><code>classDiagram\n    class Notificacao {\n        +String mensagem\n        +Date dataEnvio\n        +WP_User usuarioDestinatario\n        +String tipoNotificacao\n        +void enviarEmail()\n        +void exibirAlertaPainel()\n        +void limparAlertaPainel()\n        +void gerarNotificacaoStatusAlterado(String novoStatus, List&lt;WP_User&gt; usuariosEnvolvidos)\n    }\n\n    class Etapa {\n        +String nome\n        +Date prazo\n        +String status\n        +List&lt;Comentario&gt; comentarios\n        +List&lt;Setor&gt; setores\n        +List&lt;Pessoa&gt; pessoas\n        +List&lt;Notificacao&gt; notificacoes\n        +List&lt;Arquivo&gt; arquivos\n        +Integer postTypeID\n        +void adicionarComentario(Comentario comentario)\n        +void adicionarSetor(Setor setor)\n        +void adicionarPessoa(Pessoa pessoa)\n        +void adicionarNotificacao(Notificacao notificacao)\n        +void adicionarArquivo(Arquivo arquivo)\n        +void alterarStatus(String novoStatus)\n    }\n\n    Notificacao --&gt; WP_User : destinat\u00e1rio\n    Etapa \"1\" -- \"*\" Notificacao : dispara</code></pre>","text":""},{"location":"modelagem/classes/notificacao/#diagrama-de-sequencia","title":"Diagrama de Sequ\u00eancia <pre><code>sequenceDiagram\n    participant Usu\u00e1rio\n    participant Sistema\n    participant Notifica\u00e7\u00e3o\n    participant Email\n\n    Usu\u00e1rio-&gt;&gt;Sistema: Alterar Status da Etapa\n    Sistema--&gt;&gt;Etapa: Atualizar Status\n    Etapa--&gt;&gt;Notifica\u00e7\u00e3o: Gerar Notifica\u00e7\u00e3o de Status Alterado\n    Notifica\u00e7\u00e3o-&gt;&gt;Notifica\u00e7\u00e3o: Para cada usu\u00e1rio envolvido\n    Notifica\u00e7\u00e3o--&gt;&gt;Email: Enviar Notifica\u00e7\u00e3o por E-mail\n    Notifica\u00e7\u00e3o--&gt;&gt;Usu\u00e1rio: Exibir Alerta no Painel do WordPress\n    Usu\u00e1rio-&gt;&gt;Sistema: Acknowledge Notifica\u00e7\u00e3o\n    Sistema--&gt;&gt;Notifica\u00e7\u00e3o: Limpar Alerta do Painel</code></pre>","text":""},{"location":"modelagem/classes/notificacao/#explicacao-dos-metodos","title":"Explica\u00e7\u00e3o dos M\u00e9todos","text":""},{"location":"modelagem/classes/notificacao/#1-enviaremail_1","title":"1. enviarEmail() <p>Este m\u00e9todo utiliza a fun\u00e7\u00e3o <code>wp-mail</code> para enviar a notifica\u00e7\u00e3o por e-mail ao usu\u00e1rio destinat\u00e1rio. Ele inclui a mensagem da notifica\u00e7\u00e3o, a data de envio, e o tipo de notifica\u00e7\u00e3o.</p>","text":""},{"location":"modelagem/classes/notificacao/#2-exibiralertapainel_1","title":"2. exibirAlertaPainel() <p>Este m\u00e9todo exibe a notifica\u00e7\u00e3o como um alerta no painel do WordPress para o usu\u00e1rio destinat\u00e1rio. Ele garante que o usu\u00e1rio esteja ciente das atualiza\u00e7\u00f5es ou mudan\u00e7as nas etapas do processo.</p>","text":""},{"location":"modelagem/classes/notificacao/#3-limparalertapainel_1","title":"3. limparAlertaPainel() <p>Este m\u00e9todo remove a notifica\u00e7\u00e3o exibida no painel do WordPress. Ele \u00e9 utilizado para limpar os alertas ap\u00f3s o usu\u00e1rio ter reconhecido a notifica\u00e7\u00e3o.</p>","text":""},{"location":"modelagem/classes/notificacao/#4-gerarnotificacaostatusalteradostring-novostatus-list-usuariosenvolvidos_1","title":"4. gerarNotificacaoStatusAlterado(String $novoStatus, List $usuariosEnvolvidos) <p>Este m\u00e9todo gera uma notifica\u00e7\u00e3o sempre que o status de uma etapa \u00e9 alterado. Ele cria a mensagem da notifica\u00e7\u00e3o, define o tipo de notifica\u00e7\u00e3o como \"Status Alterado\", e dispara a notifica\u00e7\u00e3o para todos os usu\u00e1rios envolvidos na etapa.</p>","text":""},{"location":"modelagem/classes/notificacao/#implementacao-automatica-de-notificacoes-nas-etapas","title":"Implementa\u00e7\u00e3o Autom\u00e1tica de Notifica\u00e7\u00f5es nas Etapas","text":"<p>Cada etapa ser\u00e1 respons\u00e1vel por implementar automaticamente suas notifica\u00e7\u00f5es. Sempre que o status de uma etapa mudar, todos os usu\u00e1rios envolvidos na etapa ser\u00e3o notificados do andamento. A classe <code>Etapa</code> ter\u00e1 um m\u00e9todo <code>alterarStatus</code> que, ao ser chamado, atualizar\u00e1 o status da etapa e disparar\u00e1 as notifica\u00e7\u00f5es para os usu\u00e1rios envolvidos.</p> <pre><code>classDiagram\n    class Etapa {\n        +String nome\n        +Date prazo\n        +String status\n        +List&lt;Comentario&gt; comentarios\n        +List&lt;Setor&gt; setores\n        +List&lt;Pessoa&gt; pessoas\n        +List&lt;Notificacao&gt; notificacoes\n        +List&lt;Arquivo&gt; arquivos\n        +Integer postTypeID\n        +void adicionarComentario(Comentario comentario)\n        +void adicionarSetor(Setor setor)\n        +void adicionarPessoa(Pessoa pessoa)\n        +void adicionarNotificacao(Notificacao notificacao)\n        +void adicionarArquivo(Arquivo arquivo)\n        +void alterarStatus(String novoStatus)\n    }\n\n    Etapa --&gt; Notificacao : dispara</code></pre>"},{"location":"modelagem/classes/notificacao/#explicacao-do-metodo-alterarstatus","title":"Explica\u00e7\u00e3o do M\u00e9todo <code>alterarStatus</code>","text":""},{"location":"modelagem/classes/notificacao/#alterarstatusstring-novostatus","title":"alterarStatus(String $novoStatus) <ul> <li>Descri\u00e7\u00e3o: Atualiza o status da etapa e gera notifica\u00e7\u00f5es para todos os usu\u00e1rios envolvidos.</li> <li>Par\u00e2metros: <ul> <li><code>String $novoStatus</code> - O novo status da etapa.</li> </ul> </li> <li>Retorno: void</li> </ul> <p>Este m\u00e9todo atualiza o status da etapa e chama o m\u00e9todo <code>gerarNotificacaoStatusAlterado</code> da classe <code>Notificacao</code>, passando o novo status e a lista de usu\u00e1rios envolvidos na etapa. A notifica\u00e7\u00e3o ser\u00e1 ent\u00e3o enviada por e-mail e exibida como um alerta no painel do WordPress para cada usu\u00e1rio.</p>","text":""},{"location":"modelagem/classes/notificacao/#conclusao","title":"Conclus\u00e3o","text":"<p>A classe <code>Notifica\u00e7\u00e3o</code> \u00e9 essencial para manter os usu\u00e1rios informados sobre as mudan\u00e7as e atualiza\u00e7\u00f5es nas etapas de um processo curatorial no sistema \"Obatala\". Este documento apresentou uma vis\u00e3o geral das propriedades e m\u00e9todos da classe, assim como diagramas que explicam sua estrutura e sequ\u00eancia de utiliza\u00e7\u00e3o. Ao integrar notifica\u00e7\u00f5es por e-mail e alertas no painel do WordPress, a classe <code>Notifica\u00e7\u00e3o</code> assegura que todos os usu\u00e1rios envolvidos sejam devidamente informados, garantindo a transpar\u00eancia e efici\u00eancia na gest\u00e3o dos processos curatoriais. A inclus\u00e3o do m\u00e9todo para limpar as notifica\u00e7\u00f5es do painel assegura que os alertas sejam gerenciados de forma eficiente e n\u00e3o sobrecarreguem o usu\u00e1rio. A implementa\u00e7\u00e3o autom\u00e1tica de notifica\u00e7\u00f5es em cada etapa simplifica a gest\u00e3o e garante que todos os envolvidos sejam notificados sempre que o status de uma etapa mudar.</p>"},{"location":"modelagem/classes/pessoa/","title":"Pessoa","text":""},{"location":"modelagem/classes/pessoa/#documento-de-modelagem-de-classe-pessoa","title":"Documento de Modelagem de Classe: Pessoa","text":""},{"location":"modelagem/classes/pessoa/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento descreve a modelagem da classe <code>Pessoa</code> dentro do sistema \"Obatala\", que ser\u00e1 utilizada como uma abstra\u00e7\u00e3o sobre os usu\u00e1rios do WordPress. A classe <code>Pessoa</code> possibilitar\u00e1 a extens\u00e3o das permiss\u00f5es de usu\u00e1rios em cole\u00e7\u00f5es do Tainacan, permitindo um controle mais granular sobre quem pode editar, apagar ou atualizar determinada etapa de um processo.</p>"},{"location":"modelagem/classes/pessoa/#descricao-geral","title":"Descri\u00e7\u00e3o Geral","text":"<p>A classe <code>Pessoa</code> representa um usu\u00e1rio do WordPress que pode ser atribu\u00eddo a uma etapa de um processo curatorial. As permiss\u00f5es de um usu\u00e1rio determinar\u00e3o suas capacidades de intera\u00e7\u00e3o com as etapas, como editar, apagar ou atualizar. Apenas administradores ter\u00e3o a permiss\u00e3o de reabrir uma etapa de um processo.</p>"},{"location":"modelagem/classes/pessoa/#propriedades-da-classe","title":"Propriedades da Classe","text":""},{"location":"modelagem/classes/pessoa/#1-nome-name","title":"1. Nome (Name)","text":"<ul> <li>Descri\u00e7\u00e3o: Nome da pessoa.</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/pessoa/#2-email-email","title":"2. Email (Email)","text":"<ul> <li>Descri\u00e7\u00e3o: Email da pessoa.</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/pessoa/#3-permissoes-permissions","title":"3. Permiss\u00f5es (Permissions)","text":"<ul> <li>Descri\u00e7\u00e3o: Permiss\u00f5es do usu\u00e1rio sobre etapas e processos.</li> <li>Tipo: Array de Strings</li> </ul>"},{"location":"modelagem/classes/pessoa/#4-funcao-role","title":"4. Fun\u00e7\u00e3o (Role)","text":"<ul> <li>Descri\u00e7\u00e3o: Fun\u00e7\u00e3o do usu\u00e1rio no WordPress (ex: Administrador, Editor, Colaborador).</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/pessoa/#5-setor-department","title":"5. Setor (Department)","text":"<ul> <li>Descri\u00e7\u00e3o: Setor ao qual a pessoa pertence.</li> <li>Tipo: Objeto <code>Setor</code></li> </ul>"},{"location":"modelagem/classes/pessoa/#metodos-da-classe","title":"M\u00e9todos da Classe","text":""},{"location":"modelagem/classes/pessoa/#1-obterpermissoes","title":"1. obterPermissoes()","text":"<ul> <li>Descri\u00e7\u00e3o: Retorna a lista de permiss\u00f5es do usu\u00e1rio.</li> <li>Retorno: Array de Strings</li> </ul>"},{"location":"modelagem/classes/pessoa/#2-atribuirpermissaostring-permissao","title":"2. atribuirPermissao(String $permissao)","text":"<ul> <li>Descri\u00e7\u00e3o: Atribui uma nova permiss\u00e3o ao usu\u00e1rio.</li> <li>Par\u00e2metros: <code>String $permissao</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/pessoa/#3-removerpermissaostring-permissao","title":"3. removerPermissao(String $permissao)","text":"<ul> <li>Descri\u00e7\u00e3o: Remove uma permiss\u00e3o do usu\u00e1rio.</li> <li>Par\u00e2metros: <code>String $permissao</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/pessoa/#4-podeeditaretapaetapa-etapa","title":"4. podeEditarEtapa(Etapa $etapa)","text":"<ul> <li>Descri\u00e7\u00e3o: Verifica se o usu\u00e1rio tem permiss\u00e3o para editar uma etapa.</li> <li>Par\u00e2metros: <code>Etapa $etapa</code></li> <li>Retorno: Boolean</li> </ul>"},{"location":"modelagem/classes/pessoa/#5-podeapagaretapaetapa-etapa","title":"5. podeApagarEtapa(Etapa $etapa)","text":"<ul> <li>Descri\u00e7\u00e3o: Verifica se o usu\u00e1rio tem permiss\u00e3o para apagar uma etapa.</li> <li>Par\u00e2metros: <code>Etapa $etapa</code></li> <li>Retorno: Boolean</li> </ul>"},{"location":"modelagem/classes/pessoa/#6-podeatualizaretapaetapa-etapa","title":"6. podeAtualizarEtapa(Etapa $etapa)","text":"<ul> <li>Descri\u00e7\u00e3o: Verifica se o usu\u00e1rio tem permiss\u00e3o para atualizar uma etapa.</li> <li>Par\u00e2metros: <code>Etapa $etapa</code></li> <li>Retorno: Boolean</li> </ul>"},{"location":"modelagem/classes/pessoa/#7-podereabriretapaetapa-etapa","title":"7. podeReabrirEtapa(Etapa $etapa)","text":"<ul> <li>Descri\u00e7\u00e3o: Verifica se o usu\u00e1rio tem permiss\u00e3o para reabrir uma etapa (apenas administradores).</li> <li>Par\u00e2metros: <code>Etapa $etapa</code></li> <li>Retorno: Boolean</li> </ul>"},{"location":"modelagem/classes/pessoa/#diagramas","title":"Diagramas","text":""},{"location":"modelagem/classes/pessoa/#diagrama-de-classe","title":"Diagrama de Classe","text":"<pre><code>classDiagram\n    class Pessoa {\n        +String nome\n        +String email\n        +Array&lt;String&gt; permissoes\n        +String funcao\n        +Setor setor\n        +Array&lt;String&gt; obterPermissoes()\n        +void atribuirPermissao(String permissao)\n        +void removerPermissao(String permissao)\n        +Boolean podeEditarEtapa(Etapa etapa)\n        +Boolean podeApagarEtapa(Etapa etapa)\n        +Boolean podeAtualizarEtapa(Etapa etapa)\n        +Boolean podeReabrirEtapa(Etapa etapa)\n    }\n\n    class Setor {\n        +String nome\n        +String descricao\n        +Array&lt;Pessoa&gt; pessoas\n        +Array&lt;String&gt; permissoes\n        +void adicionarPessoa(Pessoa pessoa)\n        +void removerPessoa(Pessoa pessoa)\n        +Array&lt;String&gt; obterPermissoes()\n        +void atribuirPermissao(String permissao)\n        +void removerPermissao(String permissao)\n        +Boolean podeEditarEtapa(Etapa etapa)\n        +Boolean podeApagarEtapa(Etapa etapa)\n        +Boolean podeAtualizarEtapa(Etapa etapa)\n    }\n\n    class Etapa {\n        +String nome\n        +Date prazo\n        +String status\n        +List&lt;Comentario&gt; comentarios\n        +Setor setor\n        +List&lt;Pessoa&gt; pessoas\n        +List&lt;Notificacao&gt; notificacoes\n        +List&lt;Arquivo&gt; arquivos\n        +Integer postTypeID\n        +void adicionarComentario(Comentario comentario)\n        +void adicionarSetor(Setor setor)\n        +void adicionarPessoa(Pessoa pessoa)\n        +void adicionarNotificacao(Notificacao notificacao)\n        +void adicionarArquivo(Arquivo arquivo)\n        +void alterarStatus(String novoStatus)\n    }\n\n    Pessoa \"1\" -- \"1\" Setor : pertence a\n    Setor \"1\" -- \"*\" Pessoa : agrupa\n    Etapa \"1\" -- \"1\" Setor : atribuido a\n    Etapa \"*\" -- \"*\" Pessoa : atribuido a</code></pre>"},{"location":"modelagem/classes/pessoa/#explicacao-do-diagrama","title":"Explica\u00e7\u00e3o do Diagrama","text":"<ol> <li> <p>Pessoa: Representa um usu\u00e1rio do WordPress, com propriedades como nome, email, permiss\u00f5es, fun\u00e7\u00e3o e setor. A classe inclui m\u00e9todos para gerenciar as permiss\u00f5es do usu\u00e1rio e verificar suas capacidades de intera\u00e7\u00e3o com as etapas do processo.</p> </li> <li> <p>Setor: Agrupa pessoas com permiss\u00f5es espec\u00edficas para interagir com as etapas de um processo. Cada setor tem um nome, descri\u00e7\u00e3o, lista de pessoas e permiss\u00f5es. Um setor pode ter v\u00e1rias pessoas, mas cada pessoa pertence a apenas um setor.</p> </li> <li> <p>Etapa: Uma fase espec\u00edfica dentro de um processo. Cada etapa pode conter coment\u00e1rios, setores, pessoas, notifica\u00e7\u00f5es e arquivos. Cada etapa \u00e9 atribu\u00edda a um \u00fanico setor.</p> </li> <li> <p>Relacionamentos:</p> <ul> <li>Pessoa pertence a um Setor.</li> <li>Setor agrupa m\u00faltiplas Pessoas.</li> <li>Etapa \u00e9 atribu\u00edda a um \u00fanico Setor.</li> <li>Pessoa pode ser atribu\u00edda a m\u00faltiplas Etapas.</li> </ul> </li> </ol>"},{"location":"modelagem/classes/pessoa/#diagrama-de-sequencia","title":"Diagrama de Sequ\u00eancia","text":"<pre><code>sequenceDiagram\n    participant Administrador\n    participant Sistema\n    participant Etapa\n\n    Administrador-&gt;&gt;Sistema: Reabrir Etapa\n    Sistema--&gt;&gt;Etapa: Verifica Permiss\u00e3o do Usu\u00e1rio\n    Etapa--&gt;&gt;Sistema: Permiss\u00e3o Concedida\n    Sistema--&gt;&gt;Administrador: Etapa Reaberta</code></pre>"},{"location":"modelagem/classes/pessoa/#explicacao-dos-metodos","title":"Explica\u00e7\u00e3o dos M\u00e9todos","text":""},{"location":"modelagem/classes/pessoa/#1-obterpermissoes_1","title":"1. obterPermissoes()","text":"<p>Este m\u00e9todo retorna a lista de permiss\u00f5es atribu\u00eddas ao usu\u00e1rio, permitindo verificar quais a\u00e7\u00f5es o usu\u00e1rio pode realizar.</p>"},{"location":"modelagem/classes/pessoa/#2-atribuirpermissaostring-permissao_1","title":"2. atribuirPermissao(String $permissao)","text":"<p>Este m\u00e9todo atribui uma nova permiss\u00e3o ao usu\u00e1rio, adicionando a capacidade de realizar a\u00e7\u00f5es adicionais sobre as etapas.</p>"},{"location":"modelagem/classes/pessoa/#3-removerpermissaostring-permissao_1","title":"3. removerPermissao(String $permissao)","text":"<p>Este m\u00e9todo remove uma permiss\u00e3o do usu\u00e1rio, restringindo suas capacidades de intera\u00e7\u00e3o com as etapas.</p>"},{"location":"modelagem/classes/pessoa/#4-podeeditaretapaetapa-etapa_1","title":"4. podeEditarEtapa(Etapa $etapa)","text":"<p>Este m\u00e9todo verifica se o usu\u00e1rio tem permiss\u00e3o para editar uma etapa espec\u00edfica.</p>"},{"location":"modelagem/classes/pessoa/#5-podeapagaretapaetapa-etapa_1","title":"5. podeApagarEtapa(Etapa $etapa)","text":"<p>Este m\u00e9todo verifica se o usu\u00e1rio tem permiss\u00e3o para apagar uma etapa espec\u00edfica.</p>"},{"location":"modelagem/classes/pessoa/#6-podeatualizaretapaetapa-etapa_1","title":"6. podeAtualizarEtapa(Etapa $etapa)","text":"<p>Este m\u00e9todo verifica se o usu\u00e1rio tem permiss\u00e3o para atualizar uma etapa espec\u00edfica.</p>"},{"location":"modelagem/classes/pessoa/#7-podereabriretapaetapa-etapa_1","title":"7. podeReabrirEtapa(Etapa $etapa)","text":"<p>Este m\u00e9todo verifica se o usu\u00e1rio tem permiss\u00e3o para reabrir uma etapa. Apenas administradores ter\u00e3o essa permiss\u00e3o.</p>"},{"location":"modelagem/classes/pessoa/#conclusao","title":"Conclus\u00e3o","text":"<p>A classe <code>Pessoa</code>, implementada como uma abstra\u00e7\u00e3o sobre os usu\u00e1rios do WordPress, \u00e9 fundamental para a gest\u00e3o de permiss\u00f5es e atribui\u00e7\u00f5es dentro de um processo curatorial no sistema \"Obatala\". Este documento apresentou uma vis\u00e3o geral das propriedades e m\u00e9todos da classe, assim como diagramas que explicam sua estrutura e sequ\u00eancia de utiliza\u00e7\u00e3o. Ao utilizar a classe <code>Pessoa</code>, o sistema pode controlar de forma granular as permiss\u00f5es dos usu\u00e1rios sobre as etapas, garantindo um fluxo de trabalho seguro e eficiente.</p>"},{"location":"modelagem/classes/processo/","title":"Processo","text":""},{"location":"modelagem/classes/processo/#documento-de-modelagem-de-classe-processo","title":"Documento de Modelagem de Classe: Processo","text":""},{"location":"modelagem/classes/processo/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento descreve a modelagem da classe <code>Processo</code> dentro do sistema \"Obatala\", que ser\u00e1 utilizado para gerenciar processos curatoriais no WordPress. A classe <code>Processo</code> estender\u00e1 a classe <code>Collection</code> do Tainacan, permitindo a cria\u00e7\u00e3o de um tipo de post customizado e a integra\u00e7\u00e3o com as funcionalidades avan\u00e7adas de gest\u00e3o de cole\u00e7\u00f5es do Tainacan.</p>"},{"location":"modelagem/classes/processo/#descricao-geral","title":"Descri\u00e7\u00e3o Geral","text":"<p>A classe <code>Processo</code> representa a entidade principal no sistema \"Obatala\". Ela \u00e9 respons\u00e1vel por gerenciar todos os aspectos de um processo curatorial, incluindo suas etapas, notifica\u00e7\u00f5es e arquivos anexados. A classe estende a <code>Collection</code> do Tainacan, aproveitando suas capacidades de gest\u00e3o de cole\u00e7\u00f5es digitais.</p> <p>Nota</p> <p>Como a classe <code>Processo</code> estende a classe <code>Collection</code> do Tainacan, ela herda todos os m\u00e9todos e funcionalidades da classe <code>Collection</code>. Isso inclui capacidades avan\u00e7adas de intera\u00e7\u00e3o com objetos do tipo <code>WP_POST</code>, gerenciamento de metadados e manipula\u00e7\u00e3o de itens dentro de uma cole\u00e7\u00e3o. Al\u00e9m disso, a classe <code>Processo</code> ter\u00e1 um ID relacionado ao tipo de post, permitindo uma integra\u00e7\u00e3o fluida e eficiente com o WordPress.</p>"},{"location":"modelagem/classes/processo/#propriedades-da-classe","title":"Propriedades da Classe","text":""},{"location":"modelagem/classes/processo/#1-nome-title","title":"1. Nome (Title)","text":"<ul> <li>Descri\u00e7\u00e3o: Identifica\u00e7\u00e3o \u00fanica do processo.</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/processo/#2-data-date","title":"2. Data (Date)","text":"<ul> <li>Descri\u00e7\u00e3o: Data de cria\u00e7\u00e3o ou in\u00edcio do processo.</li> <li>Tipo: Date</li> </ul>"},{"location":"modelagem/classes/processo/#3-conteudo-content","title":"3. Conte\u00fado (Content)","text":"<ul> <li>Descri\u00e7\u00e3o: Descri\u00e7\u00e3o detalhada do processo.</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/processo/#4-etapas-steps","title":"4. Etapas (Steps)","text":"<ul> <li>Descri\u00e7\u00e3o: Fases ou passos do processo, incluindo coment\u00e1rios, setores, pessoas, status, itens, cole\u00e7\u00f5es e notifica\u00e7\u00f5es associadas.</li> <li>Tipo: Array de objetos <code>Etapa</code></li> </ul>"},{"location":"modelagem/classes/processo/#5-status","title":"5. Status","text":"<ul> <li>Descri\u00e7\u00e3o: Estado atual do processo (ex: Iniciado, Em Progresso, Conclu\u00eddo).</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/processo/#6-prazo-deadline","title":"6. Prazo (Deadline)","text":"<ul> <li>Descri\u00e7\u00e3o: Data limite para a conclus\u00e3o do processo/etapa.</li> <li>Tipo: Date</li> </ul>"},{"location":"modelagem/classes/processo/#7-notificacoes-notifications","title":"7. Notifica\u00e7\u00f5es (Notifications)","text":"<ul> <li>Descri\u00e7\u00e3o: Alertas ou avisos relacionados ao processo.</li> <li>Tipo: Array de objetos <code>Notificacao</code></li> </ul>"},{"location":"modelagem/classes/processo/#8-arquivos-attachments","title":"8. Arquivos (Attachments)","text":"<ul> <li>Descri\u00e7\u00e3o: Documentos ou arquivos relacionados ao processo.</li> <li>Tipo: Array de objetos <code>Arquivo</code></li> </ul>"},{"location":"modelagem/classes/processo/#9-id-do-tipo-de-post-post-type-id","title":"9. ID do Tipo de Post (Post Type ID)","text":"<ul> <li>Descri\u00e7\u00e3o: ID relacionado ao tipo de post, permitindo a integra\u00e7\u00e3o com o WordPress.</li> <li>Tipo: Integer</li> </ul>"},{"location":"modelagem/classes/processo/#10-permissoes-de-edicao-edit-permissions","title":"10. Permiss\u00f5es de Edi\u00e7\u00e3o (Edit Permissions)","text":"<ul> <li>Descri\u00e7\u00e3o: Define se o processo pode ser editado com base em seu status.</li> <li>Tipo: Boolean</li> </ul>"},{"location":"modelagem/classes/processo/#metodos-da-classe","title":"M\u00e9todos da Classe","text":""},{"location":"modelagem/classes/processo/#1-adicionaretapaetapa-etapa","title":"1. adicionarEtapa(Etapa $etapa)","text":"<ul> <li>Descri\u00e7\u00e3o: Adiciona uma nova etapa ao processo.</li> <li>Par\u00e2metros: <code>Etapa $etapa</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/processo/#2-adicionarnotificacaonotificacao-notificacao","title":"2. adicionarNotificacao(Notificacao $notificacao)","text":"<ul> <li>Descri\u00e7\u00e3o: Adiciona uma nova notifica\u00e7\u00e3o ao processo.</li> <li>Par\u00e2metros: <code>Notificacao $notificacao</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/processo/#3-adicionararquivoarquivo-arquivo","title":"3. adicionarArquivo(Arquivo $arquivo)","text":"<ul> <li>Descri\u00e7\u00e3o: Adiciona um novo arquivo ao processo.</li> <li>Par\u00e2metros: <code>Arquivo $arquivo</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/processo/#4-getetapas","title":"4. getEtapas()","text":"<ul> <li>Descri\u00e7\u00e3o: Retorna a lista de etapas do processo.</li> <li>Retorno: Array de objetos <code>Etapa</code></li> </ul>"},{"location":"modelagem/classes/processo/#5-gettiposdeetapas","title":"5. getTiposDeEtapas()","text":"<ul> <li>Descri\u00e7\u00e3o: Retorna a lista de tipos de etapas dispon\u00edveis.</li> <li>Retorno: Array de Strings</li> </ul>"},{"location":"modelagem/classes/processo/#6-verificarpermissaoedicao","title":"6. verificarPermissaoEdicao()","text":"<ul> <li>Descri\u00e7\u00e3o: Verifica se o processo pode ser editado com base em seu status.</li> <li>Retorno: Boolean</li> </ul>"},{"location":"modelagem/classes/processo/#diagramas","title":"Diagramas","text":""},{"location":"modelagem/classes/processo/#diagrama-de-classe","title":"Diagrama de Classe","text":"<p>Nota</p> <p>Nesta abstra\u00e7\u00e3o adicionamos a classe etapa para demonstrar que ela interage com o processo, apesar de interdependentes o processo deve ser implementado individualmente.</p> <pre><code>classDiagram\n    class Collection {\n        +String name\n        +String description\n        +List&lt;Item&gt; items\n        +void addItem(Item item)\n        +void removeItem(Item item)\n    }\n\n    class Processo {\n        +String nome\n        +Date data\n        +String conteudo\n        +List&lt;Etapa&gt; etapas\n        +String status\n        +Date prazo\n        +List&lt;Notificacao&gt; notificacoes\n        +List&lt;Arquivo&gt; arquivos\n        +Integer postTypeID\n        +Boolean permissaoEdicao\n        +void adicionarEtapa(Etapa etapa)\n        +void adicionarNotificacao(Notificacao notificacao)\n        +void adicionarArquivo(Arquivo arquivo)\n        +List&lt;Etapa&gt; getEtapas()\n        +List&lt;String&gt; getTiposDeEtapas()\n        +Boolean verificarPermissaoEdicao()\n    }\n\n    class Etapa {\n        +String nome\n        +Date prazo\n        +String status\n        +List&lt;Comentario&gt; comentarios\n        +List&lt;Setor&gt; setores\n        +List&lt;Pessoa&gt; pessoas\n        +List&lt;Notificacao&gt; notificacoes\n        +List&lt;Arquivo&gt; arquivos\n        +Integer postTypeID\n        +void adicionarComentario(Comentario comentario)\n        +void adicionarSetor(Setor setor)\n        +void adicionarPessoa(Pessoa pessoa)\n        +void adicionarNotificacao(Notificacao notificacao)\n        +void adicionarArquivo(Arquivo arquivo)\n        +void alterarStatus(String novoStatus)\n    }\n\n    class Comentario {\n        +String nome\n        +String url\n    }\n\n    class Setor {\n        +String nome\n    }\n\n    class Pessoa {\n        +String nome\n        +String email\n    }\n\n    class Notificacao {\n        +String mensagem\n        +Date dataEnvio\n        +WP_User usuarioDestinatario\n        +String tipoNotificacao\n        +void enviarEmail()\n        +void exibirAlertaPainel()\n        +void limparAlertaPainel()\n        +void gerarNotificacaoStatusAlterado(String novoStatus, List&lt;WP_User&gt; usuariosEnvolvidos)\n    }\n\n    class Arquivo {\n        +String nome\n        +String url\n        +String autor\n        +String etapa\n    }\n\n    Collection &lt;|-- Processo\n    Collection &lt;|-- Etapa\n    Processo \"1\" -- \"*\" Etapa : cont\u00e9m\n    Processo \"1\" -- \"*\" Notificacao : possui\n    Processo \"1\" -- \"*\" Arquivo : possui\n    Etapa \"1\" -- \"*\" Comentario : possui\n    Etapa \"1\" -- \"*\" Setor : pertence a\n    Etapa \"1\" -- \"*\" Pessoa : envolvido\n    Etapa \"1\" -- \"*\" Notificacao : dispara\n    Etapa \"1\" -- \"*\" Arquivo : anexa</code></pre>"},{"location":"modelagem/classes/processo/#diagrama-de-sequencia","title":"Diagrama de Sequ\u00eancia","text":"<pre><code>sequenceDiagram\n    participant Usu\u00e1rio\n    participant Sistema\n    participant Notifica\u00e7\u00e3o\n    participant Tainacan\n\n    Usu\u00e1rio-&gt;&gt;Sistema: Criar Processo\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Cria\u00e7\u00e3o\n    Usu\u00e1rio-&gt;&gt;Sistema: Definir Setores e Etapas\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Defini\u00e7\u00e3o\n\n    loop Progresso do Processo\n        Usu\u00e1rio-&gt;&gt;Sistema: Atualizar Status da Etapa\n        Sistema--&gt;&gt;Notifica\u00e7\u00e3o: Disparar Notifica\u00e7\u00e3o\n        Notifica\u00e7\u00e3o-&gt;&gt;Notifica\u00e7\u00e3o: Para cada usu\u00e1rio envolvido\n        Notifica\u00e7\u00e3o--&gt;&gt;Usu\u00e1rio: Receber Notifica\u00e7\u00e3o\n        Usu\u00e1rio-&gt;&gt;Sistema: Adicionar Pessoas e Arquivos\n        Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Adi\u00e7\u00e3o\n        Sistema-&gt;&gt;Tainacan: Adiciona ou recupera Itens/Cole\u00e7\u00f5es\n        Tainacan--&gt;&gt;Sistema: Confirma\u00e7\u00e3o de Adi\u00e7\u00e3o\n        Usu\u00e1rio-&gt;&gt;Sistema: Concluir Etapa\n        Sistema--&gt;&gt;Notifica\u00e7\u00e3o: Disparar Notifica\u00e7\u00e3o\n        Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Conclus\u00e3o\n    end\n\n    Usu\u00e1rio-&gt;&gt;Sistema: Concluir Processo\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Conclus\u00e3o\n    Sistema--&gt;&gt;Notifica\u00e7\u00e3o: Disparar Notifica\u00e7\u00e3o\n    Notifica\u00e7\u00e3o--&gt;&gt;Usu\u00e1rio: Receber Notifica\u00e7\u00e3o</code></pre>"},{"location":"modelagem/classes/processo/#conclusao","title":"Conclus\u00e3o","text":"<p>A classe <code>Processo</code>, estendendo a classe <code>Collection</code> do Tainacan, \u00e9 fundamental para a gest\u00e3o de processos curatoriais no sistema \"Obatala\". Este documento apresentou uma vis\u00e3o geral das propriedades e m\u00e9todos da classe, assim como diagramas que explicam sua estrutura e sequ\u00eancia de utiliza\u00e7\u00e3o. Ao herdar os m\u00e9todos e funcionalidades da classe <code>Collection</code>, a classe <code>Processo</code> se beneficia das capacidades avan\u00e7adas de intera\u00e7\u00e3o com objetos do tipo <code>POST</code>, gerenciamento de metadados e manipula\u00e7\u00e3o de itens dentro de uma cole\u00e7\u00e3o. Al\u00e9m disso, a associa\u00e7\u00e3o de um ID relacionado ao tipo de post garante uma integra\u00e7\u00e3o eficiente com o WordPress.</p> <p>Cada processo dever\u00e1 implementar um m\u00e9todo para retornar a lista de etapas e tipos de etapas, garantindo uma gest\u00e3o completa e eficiente das fases do processo curatorial. A propriedade de permiss\u00f5es de edi\u00e7\u00e3o com base no status do processo assegura que apenas processos em certos estados podem ser editados, mantendo a integridade e o controle do fluxo do processo.</p>"},{"location":"modelagem/classes/setor/","title":"Setor","text":""},{"location":"modelagem/classes/setor/#documento-de-modelagem-de-classe-setor","title":"Documento de Modelagem de Classe: Setor","text":""},{"location":"modelagem/classes/setor/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este documento descreve a modelagem da classe <code>Setor</code> dentro do sistema \"Obatala\", que ser\u00e1 utilizada para gerenciar os setores envolvidos nas etapas dos processos curatoriais no WordPress. A classe <code>Setor</code> representar\u00e1 um tipo de fun\u00e7\u00e3o adicional, agrupando diversas pessoas e definindo permiss\u00f5es de edi\u00e7\u00e3o, exclus\u00e3o e atualiza\u00e7\u00e3o de informa\u00e7\u00f5es em uma etapa.</p>"},{"location":"modelagem/classes/setor/#descricao-geral","title":"Descri\u00e7\u00e3o Geral","text":"<p>A classe <code>Setor</code> agrupa pessoas que ter\u00e3o permiss\u00f5es espec\u00edficas para interagir com as etapas de um processo curatorial. Cada etapa ser\u00e1 atribu\u00edda a um setor, e o sistema permitir\u00e1 a cria\u00e7\u00e3o de m\u00faltiplos setores, com cada setor participando de uma etapa espec\u00edfica.</p>"},{"location":"modelagem/classes/setor/#propriedades-da-classe","title":"Propriedades da Classe","text":""},{"location":"modelagem/classes/setor/#1-nome-name","title":"1. Nome (Name)","text":"<ul> <li>Descri\u00e7\u00e3o: Nome do setor.</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/setor/#2-descricao-description","title":"2. Descri\u00e7\u00e3o (Description)","text":"<ul> <li>Descri\u00e7\u00e3o: Descri\u00e7\u00e3o do setor.</li> <li>Tipo: String</li> </ul>"},{"location":"modelagem/classes/setor/#3-pessoas-people","title":"3. Pessoas (People)","text":"<ul> <li>Descri\u00e7\u00e3o: Lista de pessoas que fazem parte do setor.</li> <li>Tipo: Array de objetos <code>Pessoa</code></li> </ul>"},{"location":"modelagem/classes/setor/#4-permissoes-permissions","title":"4. Permiss\u00f5es (Permissions)","text":"<ul> <li>Descri\u00e7\u00e3o: Permiss\u00f5es atribu\u00eddas ao setor.</li> <li>Tipo: Array de Strings</li> </ul>"},{"location":"modelagem/classes/setor/#metodos-da-classe","title":"M\u00e9todos da Classe","text":""},{"location":"modelagem/classes/setor/#1-adicionarpessoapessoa-pessoa","title":"1. adicionarPessoa(Pessoa $pessoa)","text":"<ul> <li>Descri\u00e7\u00e3o: Adiciona uma nova pessoa ao setor.</li> <li>Par\u00e2metros: <code>Pessoa $pessoa</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/setor/#2-removerpessoapessoa-pessoa","title":"2. removerPessoa(Pessoa $pessoa)","text":"<ul> <li>Descri\u00e7\u00e3o: Remove uma pessoa do setor.</li> <li>Par\u00e2metros: <code>Pessoa $pessoa</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/setor/#3-obterpermissoes","title":"3. obterPermissoes()","text":"<ul> <li>Descri\u00e7\u00e3o: Retorna a lista de permiss\u00f5es atribu\u00eddas ao setor.</li> <li>Retorno: Array de Strings</li> </ul>"},{"location":"modelagem/classes/setor/#4-atribuirpermissaostring-permissao","title":"4. atribuirPermissao(String $permissao)","text":"<ul> <li>Descri\u00e7\u00e3o: Atribui uma nova permiss\u00e3o ao setor.</li> <li>Par\u00e2metros: <code>String $permissao</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/setor/#5-removerpermissaostring-permissao","title":"5. removerPermissao(String $permissao)","text":"<ul> <li>Descri\u00e7\u00e3o: Remove uma permiss\u00e3o do setor.</li> <li>Par\u00e2metros: <code>String $permissao</code></li> <li>Retorno: void</li> </ul>"},{"location":"modelagem/classes/setor/#6-podeeditaretapaetapa-etapa","title":"6. podeEditarEtapa(Etapa $etapa)","text":"<ul> <li>Descri\u00e7\u00e3o: Verifica se o setor tem permiss\u00e3o para editar uma etapa.</li> <li>Par\u00e2metros: <code>Etapa $etapa</code></li> <li>Retorno: Boolean</li> </ul>"},{"location":"modelagem/classes/setor/#7-podeapagaretapaetapa-etapa","title":"7. podeApagarEtapa(Etapa $etapa)","text":"<ul> <li>Descri\u00e7\u00e3o: Verifica se o setor tem permiss\u00e3o para apagar uma etapa.</li> <li>Par\u00e2metros: <code>Etapa $etapa</code></li> <li>Retorno: Boolean</li> </ul>"},{"location":"modelagem/classes/setor/#8-podeatualizaretapaetapa-etapa","title":"8. podeAtualizarEtapa(Etapa $etapa)","text":"<ul> <li>Descri\u00e7\u00e3o: Verifica se o setor tem permiss\u00e3o para atualizar uma etapa.</li> <li>Par\u00e2metros: <code>Etapa $etapa</code></li> <li>Retorno: Boolean</li> </ul>"},{"location":"modelagem/classes/setor/#diagramas","title":"Diagramas","text":""},{"location":"modelagem/classes/setor/#diagrama-de-classe","title":"Diagrama de Classe","text":"<pre><code>classDiagram\n    class Setor {\n        +String nome\n        +String descricao\n        +Array&lt;Pessoa&gt; pessoas\n        +Array&lt;String&gt; permissoes\n        +void adicionarPessoa(Pessoa pessoa)\n        +void removerPessoa(Pessoa pessoa)\n        +Array&lt;String&gt; obterPermissoes()\n        +void atribuirPermissao(String permissao)\n        +void removerPermissao(String permissao)\n        +Boolean podeEditarEtapa(Etapa etapa)\n        +Boolean podeApagarEtapa(Etapa etapa)\n        +Boolean podeAtualizarEtapa(Etapa etapa)\n    }\n\n    class Pessoa {\n        +String nome\n        +String email\n        +Array&lt;String&gt; permissoes\n        +String funcao\n        +Array&lt;String&gt; obterPermissoes()\n        +void atribuirPermissao(String permissao)\n        +void removerPermissao(String permissao)\n        +Boolean podeEditarEtapa(Etapa etapa)\n        +Boolean podeApagarEtapa(Etapa etapa)\n        +Boolean podeAtualizarEtapa(Etapa etapa)\n        +Boolean podeReabrirEtapa(Etapa etapa)\n    }\n\n    class Etapa {\n        +String nome\n        +Date prazo\n        +String status\n        +List&lt;Comentario&gt; comentarios\n        +List&lt;Setor&gt; setores\n        +List&lt;Pessoa&gt; pessoas\n        +List&lt;Notificacao&gt; notificacoes\n        +List&lt;Arquivo&gt; arquivos\n        +Integer postTypeID\n        +void adicionarComentario(Comentario comentario)\n        +void adicionarSetor(Setor setor)\n        +void adicionarPessoa(Pessoa pessoa)\n        +void adicionarNotificacao(Notificacao notificacao)\n        +void adicionarArquivo(Arquivo arquivo)\n        +void alterarStatus(String novoStatus)\n    }\n\n    Setor \"1\" -- \"*\" Pessoa : agrupa\n    Etapa \"1\" -- \"1\" Setor : atribuido a</code></pre>"},{"location":"modelagem/classes/setor/#explicacao-do-diagrama","title":"Explica\u00e7\u00e3o do Diagrama","text":"<ol> <li> <p>Setor: Representa um grupo de pessoas com permiss\u00f5es espec\u00edficas para interagir com as etapas de um processo. Cada setor tem um nome, descri\u00e7\u00e3o, lista de pessoas e permiss\u00f5es.</p> </li> <li> <p>Pessoa: Representa um usu\u00e1rio do WordPress, com propriedades como nome, email, permiss\u00f5es e fun\u00e7\u00e3o. A classe inclui m\u00e9todos para gerenciar as permiss\u00f5es do usu\u00e1rio e verificar suas capacidades de intera\u00e7\u00e3o com as etapas do processo.</p> </li> <li> <p>Etapa: Uma fase espec\u00edfica dentro de um processo. Cada etapa pode conter coment\u00e1rios, setores, pessoas, notifica\u00e7\u00f5es e arquivos. Cada etapa \u00e9 atribu\u00edda a um \u00fanico setor.</p> </li> <li> <p>Relacionamentos:</p> <ul> <li>Setor agrupa m\u00faltiplas Pessoas.</li> <li>Etapa \u00e9 atribu\u00edda a um \u00fanico Setor.</li> </ul> </li> </ol>"},{"location":"modelagem/classes/setor/#diagrama-de-sequencia","title":"Diagrama de Sequ\u00eancia","text":"<pre><code>sequenceDiagram\n    participant Usu\u00e1rio\n    participant Sistema\n    participant Etapa\n\n    Usu\u00e1rio-&gt;&gt;Sistema: Criar Setor\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Cria\u00e7\u00e3o\n    Usu\u00e1rio-&gt;&gt;Sistema: Adicionar Pessoa ao Setor\n    Sistema--&gt;&gt;Usu\u00e1rio: Confirma\u00e7\u00e3o de Adi\u00e7\u00e3o\n\n    loop Gerenciamento de Etapa\n        Usu\u00e1rio-&gt;&gt;Sistema: Atualizar Status da Etapa\n        Sistema--&gt;&gt;Etapa: Verifica Permiss\u00e3o do Setor\n        Etapa--&gt;&gt;Sistema: Permiss\u00e3o Concedida\n        Sistema--&gt;&gt;Usu\u00e1rio: Atualiza\u00e7\u00e3o Confirmada\n    end</code></pre>"},{"location":"modelagem/classes/setor/#explicacao-dos-metodos","title":"Explica\u00e7\u00e3o dos M\u00e9todos","text":""},{"location":"modelagem/classes/setor/#1-adicionarpessoapessoa-pessoa_1","title":"1. adicionarPessoa(Pessoa $pessoa)","text":"<p>Este m\u00e9todo adiciona uma nova pessoa ao setor, permitindo que essa pessoa tenha as permiss\u00f5es atribu\u00eddas ao setor.</p>"},{"location":"modelagem/classes/setor/#2-removerpessoapessoa-pessoa_1","title":"2. removerPessoa(Pessoa $pessoa)","text":"<p>Este m\u00e9todo remove uma pessoa do setor, revogando suas permiss\u00f5es relacionadas ao setor.</p>"},{"location":"modelagem/classes/setor/#3-obterpermissoes_1","title":"3. obterPermissoes()","text":"<p>Este m\u00e9todo retorna a lista de permiss\u00f5es atribu\u00eddas ao setor, permitindo verificar quais a\u00e7\u00f5es o setor pode realizar.</p>"},{"location":"modelagem/classes/setor/#4-atribuirpermissaostring-permissao_1","title":"4. atribuirPermissao(String $permissao)","text":"<p>Este m\u00e9todo atribui uma nova permiss\u00e3o ao setor, adicionando a capacidade de realizar a\u00e7\u00f5es adicionais sobre as etapas.</p>"},{"location":"modelagem/classes/setor/#5-removerpermissaostring-permissao_1","title":"5. removerPermissao(String $permissao)","text":"<p>Este m\u00e9todo remove uma permiss\u00e3o do setor, restringindo suas capacidades de intera\u00e7\u00e3o com as etapas.</p>"},{"location":"modelagem/classes/setor/#6-podeeditaretapaetapa-etapa_1","title":"6. podeEditarEtapa(Etapa $etapa)","text":"<p>Este m\u00e9todo verifica se o setor tem permiss\u00e3o para editar uma etapa espec\u00edfica.</p>"},{"location":"modelagem/classes/setor/#7-podeapagaretapaetapa-etapa_1","title":"7. podeApagarEtapa(Etapa $etapa)","text":"<p>Este m\u00e9todo verifica se o setor tem permiss\u00e3o para apagar uma etapa espec\u00edfica.</p>"},{"location":"modelagem/classes/setor/#8-podeatualizaretapaetapa-etapa_1","title":"8. podeAtualizarEtapa(Etapa $etapa)","text":"<p>Este m\u00e9todo verifica se o setor tem permiss\u00e3o para atualizar uma etapa espec\u00edfica.</p>"},{"location":"modelagem/classes/setor/#conclusao","title":"Conclus\u00e3o","text":"<p>A classe <code>Setor</code>, implementada como um tipo de fun\u00e7\u00e3o adicional no WordPress, \u00e9 fundamental para a gest\u00e3o de grupos de pessoas e suas permiss\u00f5es nas etapas de um processo curatorial no sistema \"Obatala\". Este documento apresentou uma vis\u00e3o geral das propriedades e m\u00e9todos da classe, assim como diagramas que explicam sua estrutura e sequ\u00eancia de utiliza\u00e7\u00e3o. Ao utilizar a classe <code>Setor</code>, o sistema pode controlar de forma granular as permiss\u00f5es dos grupos de usu\u00e1rios sobre as etapas, garantindo um fluxo de trabalho seguro e eficiente. Cada etapa ser\u00e1 atribu\u00edda a um setor espec\u00edfico, e as permiss\u00f5es do setor determinar\u00e3o as capacidades de intera\u00e7\u00e3o dos usu\u00e1rios com a etapa.</p>"},{"location":"tutoriais/guia-dev/","title":"Cria\u00e7\u00e3o de Interfaces no WordPress para Gerenciamento de Processos no Plugin Obatala","text":"<p>O desenvolvimento de interfaces de usu\u00e1rio no WordPress para gerenciar processos personalizados no plugin Obatala envolve a cria\u00e7\u00e3o de menus de administra\u00e7\u00e3o, registro de tipos de posts (Custom Post Types) e implementa\u00e7\u00e3o de blocos no editor Gutenberg. Este documento descreve como configurar a interface administrativa e gerenciar processos, utilizando fun\u00e7\u00f5es nativas do WordPress e padr\u00f5es de desenvolvimento recomendados.</p>"},{"location":"tutoriais/guia-dev/#1-registro-de-custom-post-types","title":"1. Registro de Custom Post Types","text":"<p>Para a gest\u00e3o de processos no Obatala, utilizamos o Tainacan para criar e gerenciar tipos de posts personalizados. Estendemos a classe de cole\u00e7\u00e3o do Tainacan para definir os tipos de posts necess\u00e1rios, como <code>Process</code>, <code>ProcessType</code> e <code>Sector</code>.</p>"},{"location":"tutoriais/guia-dev/#2-criacao-da-interface-de-administracao","title":"2. Cria\u00e7\u00e3o da Interface de Administra\u00e7\u00e3o","text":"<p>Para criar uma interface de administra\u00e7\u00e3o no WordPress utilizando o plugin Obatala, s\u00e3o configurados menus e submenus, permitindo aos usu\u00e1rios acessar diferentes ferramentas de gerenciamento de processos.</p>"},{"location":"tutoriais/guia-dev/#estrutura-do-menu-principal","title":"Estrutura do Menu Principal","text":"<p>Abaixo est\u00e1 o c\u00f3digo PHP usado para registrar o menu principal e seus submenus no painel administrativo. A classe <code>AdminMenu</code> gerencia a cria\u00e7\u00e3o do menu \"Obatala\" com suas p\u00e1ginas de submenus espec\u00edficas, como <code>Process Manager</code>, <code>Process Viewer</code>, <code>Process Models</code>, <code>Process Type Editor</code>, e <code>Sector Manager</code>.</p> <pre><code>&lt;?php\n    namespace Obatala\\Admin;\n\n    class AdminMenu {\n        private static $pages = [\n            'main' =&gt; [\n                'title' =&gt; 'Obatala',\n                'menu_title' =&gt; 'Obatala',\n                'capability' =&gt; 'manage_options',\n                'slug' =&gt; 'obatala-main',\n                'callback' =&gt; 'render_main_page',\n                'icon' =&gt; 'dashicons-admin-site',\n                'position' =&gt; 2\n            ],\n            'submenus' =&gt; [\n                [\n                    'parent_slug' =&gt; 'obatala-main',\n                    'title' =&gt; 'Process Manager',\n                    'menu_title' =&gt; 'Process Manager',\n                    'capability' =&gt; 'manage_options',\n                    'slug' =&gt; 'process-manager',\n                    'callback' =&gt; 'render_page'\n                ],\n                [\n                    'parent_slug' =&gt; 'obatala-main',\n                    'title' =&gt; 'Process Viewer',\n                    'menu_title' =&gt; 'Process Viewer',\n                    'capability' =&gt; 'read',\n                    'slug' =&gt; 'process-viewer',\n                    'callback' =&gt; 'render_page'\n                ],\n                [\n                    'parent_slug' =&gt; 'obatala-main',\n                    'title' =&gt; 'Process Models',\n                    'menu_title' =&gt; 'Process Models',\n                    'capability' =&gt; 'edit_posts',\n                    'slug' =&gt; 'process-type-manager',\n                    'callback' =&gt; 'render_page'\n                ],\n                [\n                    'parent_slug' =&gt; 'obatala-main',\n                    'title' =&gt; 'Process Type Editor',\n                    'menu_title' =&gt; 'Process Type Editor',\n                    'capability' =&gt; 'manage_options',\n                    'slug' =&gt; 'process-type-editor',\n                    'callback' =&gt; 'render_page'\n                ],\n                [\n                    'parent_slug' =&gt; 'obatala-main',\n                    'title' =&gt; 'Sector Manager',\n                    'menu_title' =&gt; 'Sector Manager',\n                    'capability' =&gt; 'manage_options',\n                    'slug' =&gt; 'sector_manager',\n                    'callback' =&gt; 'render_page'\n                ]\n            ]\n        ];\n\n        public static function init() {\n            add_action('admin_menu', [self::class, 'add_admin_pages']);\n            add_action('admin_enqueue_scripts', [self::class, 'enqueue_scripts']);\n        }\n\n        public static function add_admin_pages() {\n            $main = self::$pages['main'];\n            add_menu_page(\n                __($main['title'], 'obatala'),\n                __($main['menu_title'], 'obatala'),\n                $main['capability'],\n                $main['slug'],\n                [self::class, $main['callback']],\n                $main['icon'],\n                $main['position']\n            );\n\n            foreach (self::$pages['submenus'] as $submenu) {\n                add_submenu_page(\n                    $submenu['parent_slug'],\n                    __($submenu['title'], 'obatala'),\n                    __($submenu['menu_title'], 'obatala'),\n                    $submenu['capability'],\n                    $submenu['slug'],\n                    [self::class, $submenu['callback']]\n                );\n            }\n        }\n    }\n?&gt;\n</code></pre>"},{"location":"tutoriais/guia-dev/#renderizacao-das-paginas-de-menu","title":"Renderiza\u00e7\u00e3o das P\u00e1ginas de Menu","text":"<p>Cada submenu \u00e9 renderizado pela fun\u00e7\u00e3o render_page, que identifica a p\u00e1gina com base no slug. A fun\u00e7\u00e3o render_main_page define o conte\u00fado inicial exibido ao acessar o menu principal \"Obatala\".</p> <pre><code>&lt;?php\n    public static function render_main_page() {\n        echo '&lt;h1&gt;' . __('Bem-vindo ao Obatala', 'obatala') . '&lt;/h1&gt;';\n        echo '&lt;p&gt;' . __('Selecione uma op\u00e7\u00e3o do submenu para come\u00e7ar.', 'obatala') . '&lt;/p&gt;';\n    }\n?&gt;\n</code></pre> <ol> <li>Uso de Blocos Gutenberg Para criar uma interface de administra\u00e7\u00e3o interativa, o Obatala utiliza blocos do editor Gutenberg. Com o Gutenberg, \u00e9 poss\u00edvel criar componentes de interface utilizando React, o que permite uma experi\u00eancia de usu\u00e1rio mais din\u00e2mica.</li> </ol> <pre><code>&lt;?php\n    function obatala_manage_processos_page() {\n        &lt;div class=\"wrap\"&gt;\n            &lt;h1&gt;echo esc_html(get_admin_page_title());&gt;&lt;/h1&gt;\n            &lt;div id=\"obatala-admin-app\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        wp_enqueue_script(\n            'obatala-admin-scripts',\n            plugin_dir_url(__FILE__) . 'js/obatala-admin.js',\n            array('wp-element', 'wp-components', 'wp-i18n', 'wp-api-fetch', 'wp-data'),\n            filemtime(plugin_dir_path(__FILE__) . 'js/obatala-admin.js'),\n            true\n        );\n    }\n?&gt;\n</code></pre> <ol> <li> <p>Seguran\u00e7a e Valida\u00e7\u00e3o Para garantir seguran\u00e7a, todas as entradas de dados devem ser validadas e sanitizadas. Fun\u00e7\u00f5es como sanitize_text_field() e check_admin_referer() devem ser usadas para proteger contra ataques como Cross-Site Scripting (XSS).</p> </li> <li> <p>Permiss\u00f5es e Restri\u00e7\u00f5es de Acesso As p\u00e1ginas e funcionalidades do plugin devem ser acess\u00edveis apenas para usu\u00e1rios autorizados. Fun\u00e7\u00f5es como current_user_can() s\u00e3o usadas para checar as permiss\u00f5es do usu\u00e1rio antes de exibir conte\u00fado sens\u00edvel ou permitir certas a\u00e7\u00f5es.</p> </li> <li> <p>Registro de Endpoints da REST API O plugin registra endpoints personalizados da REST API para permitir a manipula\u00e7\u00e3o de dados do Obatala. Esses endpoints s\u00e3o implementados para manipular entidades como Process, ProcessType e Sector.</p> </li> </ol> <pre><code>&lt;?php\n    private function register_api_endpoints() {\n        $custom_post_type_api = new \\Obatala\\Api\\CustomPostTypeApi();\n        $custom_post_type_api-&gt;register();\n\n        $process_custom_fields = new \\Obatala\\Api\\ProcessApi();\n        $process_custom_fields-&gt;register();\n\n        $process_type_custom_fields = new \\Obatala\\Api\\ProcessTypeApi();\n        $process_type_custom_fields-&gt;register();\n\n        $sector_api = new \\Obatala\\Api\\SectorApi();\n        $sector_api-&gt;register();\n    }\n?&gt;\n</code></pre>"},{"location":"tutoriais/guia-dev/#conclusao","title":"Conclus\u00e3o","text":"<p>Essas etapas configuram uma interface robusta e segura para o WordPress com o plugin Obatala. A integra\u00e7\u00e3o com o Tainacan e o uso de blocos Gutenberg permite que os usu\u00e1rios interajam com o plugin de maneira eficaz e moderna, proporcionando uma experi\u00eancia de gest\u00e3o de processos curatoriais intuitiva e personalizada.</p>"}]}